(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************!*\
  !*** ./node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-SG": "./node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "./node_modules/moment/locale/en-SG.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) { // check for number or string
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return id;
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./src/$$_lazy_route_resource lazy recursive":
/*!**********************************************************!*\
  !*** ./src/$$_lazy_route_resource lazy namespace object ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./src/$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/acp/acp.component.html":
/*!****************************************!*\
  !*** ./src/app/acp/acp.component.html ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"containerACPArea\">\r\n\t<div style=\"padding-top: 5px; color: white; font-size: 30px; font-family: sans-serif; background-color: rgba(0,0,0,0.5)\">\r\n\t\t<div style=\"text-align: center;\">\r\n\t\t\tADMIN CONTROL PANEL 3.0\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"acp-card ui-grid\">\r\n\t\t\t<div class=\"panelMenu\">\r\n\t\t\t\t<p-panelMenu [multiple]=\"false\" #panelMenu></p-panelMenu>\r\n\t\t\t</div>   \r\n\t\t\t<div class=\"acpContent\">\r\n\t\t\t\t<p-scrollPanel [style]=\"{height: '100%'}\">\r\n\t\t\t\t\t<ng-container #tab></ng-container>\r\n\t\t\t\t</p-scrollPanel>\t\r\n\t\t\t</div>  \r\n\t\t\r\n\t</div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/acp/acp.component.scss":
/*!****************************************!*\
  !*** ./src/app/acp/acp.component.scss ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerACPArea {\n  width: 100%;\n  height: 100%;\n  background-image: url(\"/assets/img/bckacp.jpg\");\n  background-size: cover; }\n\n.acp-card {\n  align-content: center;\n  position: absolute;\n  width: auto;\n  height: auto;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin-top: 40px;\n  margin-bottom: 40px;\n  margin-left: 10%;\n  margin-right: 10%;\n  background: rgba(255, 255, 255, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 0px; }\n\n.ui-panelmenu {\n  height: 100% !important; }\n\n.acp-card .panelMenu {\n  float: left;\n  border: 1px solid gray;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.6);\n  text-align: center; }\n\n.acp-card .acpContent {\n  float: left;\n  padding-left: 15px;\n  height: 100%;\n  display: inline-block; }\n\n.ui-menuitem-text {\n  color: black !important; }\n\n.ui-menuitem-icon {\n  color: black !important; }\n"

/***/ }),

/***/ "./src/app/acp/acp.component.ts":
/*!**************************************!*\
  !*** ./src/app/acp/acp.component.ts ***!
  \**************************************/
/*! exports provided: ACPComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ACPComponent", function() { return ACPComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _user_management_user_acp_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./user-management/user-acp.component */ "./src/app/acp/user-management/user-acp.component.ts");
/* harmony import */ var _policy_management_policy_acp_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./policy-management/policy-acp.component */ "./src/app/acp/policy-management/policy-acp.component.ts");
/* harmony import */ var _log_management_logACP_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./log-management/logACP.component */ "./src/app/acp/log-management/logACP.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ACPComponent = /** @class */ (function () {
    function ACPComponent(router, componentFactoryResolver, viewContainerRef, route) {
        this.router = router;
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.route = route;
        this.availableMenuItems = {};
    }
    ACPComponent.prototype.ngOnInit = function () {
        this.initTabMenu();
        this.initMenuItem();
    };
    /**
     * this method returns an object which is responsible for creating the menu item "User Management"
     * the menu item contains submenus: "Overview", "Details" (currently not in use), "Add User"
     *
     * @return object
     */
    ACPComponent.prototype.userMI = function () {
        return {
            'key': 'user',
            'label': 'User Management',
            'icon': 'fa fa-user',
            'items': [
                this.userOverview(), this.userDetails(), this.userAdd()
            ],
            'component': _user_management_user_acp_component__WEBPACK_IMPORTED_MODULE_2__["UserACPComponent"]
        };
    };
    /**
     * this method ensures that the "Overview" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.userOverview = function () {
        return {
            'key': 'overview',
            'label': 'Overview',
            'icon': 'fa fa-dashboard'
        };
    };
    /**
     * this method ensures that the "Details" section is visible and all others are hidden
     * [currently not in use]
     *
     * @return object
     */
    ACPComponent.prototype.userDetails = function () {
        return {
            'key': 'details',
            'label': 'Details',
            'icon': 'fa fa-info',
            'visible': false
        };
    };
    /**
     * this method ensures that the "Add User" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.userAdd = function () {
        return {
            'key': 'add',
            'label': 'Add User',
            'icon': 'fa fa-plus'
        };
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Policy Management"
     * the menu item contains submenus: "Overview", "Add Element", "Export", "Import", "Settings" (currently not in use)
     *
     * @return object
     */
    ACPComponent.prototype.policyMI = function () {
        return {
            'key': 'policy',
            'label': 'Policy Management',
            'icon': 'fa fa-user-secret',
            'expanded': false,
            'items': [
                this.policyOverview(), this.policyAdd(), this.policyExport(), this.policyImport(), this.policySettings()
            ],
            'component': _policy_management_policy_acp_component__WEBPACK_IMPORTED_MODULE_3__["PolicyACPComponent"]
        };
    };
    /**
     * this method ensures that the "Overview" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.policyOverview = function () {
        return {
            'key': 'overview',
            'label': 'Overview',
            'icon': 'fa fa-dashboard'
        };
    };
    /**
     * this method ensures that the "Add Element" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.policyAdd = function () {
        return {
            'key': 'add',
            'label': 'Add Element',
            'icon': 'fa fa-plus'
        };
    };
    /**
     * this method ensures that the "Export" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.policyExport = function () {
        return {
            'key': 'export',
            'label': 'Export',
            'icon': 'fas fa-arrow-up'
        };
    };
    /**
     * this method ensures that the "Import" section is visible and all others are hidden
     *
     * @return object
     */
    ACPComponent.prototype.policyImport = function () {
        return {
            'key': 'import',
            'label': 'Import',
            'icon': 'fas fa-arrow-down'
        };
    };
    /**
     * this method ensures that the "Settings" section is visible and all others are hidden
     * [currently not in use]
     *
     * @return object
     */
    ACPComponent.prototype.policySettings = function () {
        return {
            'key': 'settings',
            'label': 'Settings (ACP4.0)',
            'icon': 'fas fa-wrench',
            'disabled': true,
            'visible': false
        };
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Logs"
     * the menu item does not contain any submenus
     *
     * @return object
     */
    ACPComponent.prototype.logMI = function () {
        return {
            'key': 'logs',
            'label': 'Logs',
            'icon': 'fas fa-history',
            'component': _log_management_logACP_component__WEBPACK_IMPORTED_MODULE_4__["LogACPComponent"]
        };
    };
    /**
     * in this method, any method that has a suffix "MI" is called and its return values are stored in the variable "availableMenuItems"
     * in addition, for each menu item and sub-item an event listener is declared which ensures that the corresponding component is loaded and the URL is adjusted accordingly
     */
    ACPComponent.prototype.initTabMenu = function () {
        var prototypes = Object.getPrototypeOf(this);
        for (var funcName in prototypes) {
            if (funcName.substr(-2) === 'MI') {
                var item_1 = this[funcName]();
                if (typeof (item_1) === 'object') {
                    item_1._showMenu = true;
                    this.availableMenuItems[item_1.key] = item_1;
                }
            }
        }
        this.panelMenu.model = [];
        for (var obj in this.availableMenuItems) {
            var item = this.availableMenuItems[obj];
            //Eventdeklaration
            item.command = (function (key) {
                return function () {
                    this.loadComponent(key);
                    window.location.assign('/acp#' + key + '/overview');
                };
            })(obj).bind(this);
            //Eventdeklaration: Kinder (max. 2D)
            if (item.items != null) {
                for (var _i = 0, _a = item.items; _i < _a.length; _i++) {
                    var child = _a[_i];
                    child.command = (function (key, childKey) {
                        return function () {
                            window.location.assign('/acp#' + key + '/' + childKey);
                        };
                    })(obj, child.key).bind(this);
                }
            }
            this.panelMenu.model.push(item);
        }
    };
    ACPComponent.prototype.initMenuItem = function () {
        this.setMenuItem('');
    };
    /**
     * sets the currently viewed menu item and loads the corresponding component
     *
     * @param key which MenuItem is to be loaded
     */
    ACPComponent.prototype.setMenuItem = function (key) {
        var menuItem = this.getMenuItem(key == '' ? Object.keys(this.availableMenuItems)[0] : key);
        if (menuItem != null) {
            this.panelMenu.activeItem = menuItem;
            this.loadComponent(menuItem.key);
        }
    };
    /**
     * trivial
     *
     * @param key trivial
     */
    ACPComponent.prototype.getMenuItem = function (key) {
        return this.availableMenuItems[key];
    };
    /**
     * mainly ensures that the content of the component is displayed
     *
     * @param key which MenuItem is to be loaded
     */
    ACPComponent.prototype.loadComponent = function (key) {
        this.tab.remove(this.tab.length);
        var component = this.getMenuItem(key).component;
        if (component != null) {
            var factory = this.componentFactoryResolver.resolveComponentFactory(component);
            var componentRef = this.tab.createComponent(factory);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('panelMenu'),
        __metadata("design:type", Object)
    ], ACPComponent.prototype, "panelMenu", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tab', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"])
    ], ACPComponent.prototype, "tab", void 0);
    ACPComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-acp',
            template: __webpack_require__(/*! ./acp.component.html */ "./src/app/acp/acp.component.html"),
            styles: [__webpack_require__(/*! ./acp.component.scss */ "./src/app/acp/acp.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        })
        /**
        *	add new menu item:
        *	Step 1a: declare method (for menu items), important the suffix "MI" must be included in the method name
        *   Step 1b: or declare method (for submenus), important the suffix "MI" is not contained in the method name
        *	Step 2: return an object in the properties similar to MenuModule (if you chose step 1a: attributes not contained in MenuModule, e.g. "component", must be specified)
        */
        ,
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"]])
    ], ACPComponent);
    return ACPComponent;
}());



/***/ }),

/***/ "./src/app/acp/log-management/logACP.component.html":
/*!**********************************************************!*\
  !*** ./src/app/acp/log-management/logACP.component.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"containerLogACP\">\r\n\t<p-table #dt [value]=\"logs\" [columns]=\"cols\" [rows]=\"10\" [loading]=\"loading\" [paginator]=\"true\"\r\n           (onLazyLoad)=\"loadLogs($event)\" [totalRecords]=\"100000\" [lazy]=\"true\">\r\n\t\t<ng-template pTemplate=\"header\" let-columns>\r\n\t\t\t<tr>\r\n\t\t\t\t<th *ngFor=\"let col of columns\">\r\n\t\t\t\t\t{{col.header}}\r\n\t\t\t\t</th>\r\n\t\t\t</tr>\r\n\t\t\t<tr>\r\n\t\t\t\t<th *ngFor=\"let col of columns\" [ngSwitch]=\"col.field\">\r\n\t\t\t\t\t<p-calendar [inputStyle]=\"{'width': '220px', 'font-size': '12px'}\" appendTo=\"body\"  *ngSwitchCase=\"'date'\"\r\n                      [(ngModel)]=\"rangeDates\" selectionMode=\"range\" [readonlyInput]=\"true\" [showTime]=\"true\" (onSelect)=\"loadLogs($event)\"></p-calendar>\r\n\t\t\t\t\t<input style=\"width: 100px;\" *ngSwitchCase=\"'username'\" pInputText type=\"text\" (input)=\"loadLogs($event)\" [(ngModel)]=\"text\">\r\n\t\t\t\t</th>\r\n\t\t\t</tr>\r\n\t\t</ng-template>\r\n\r\n\t\t<ng-template pTemplate=\"body\" let-log let-columns=\"columns\">\r\n\t\t\t<tr>\r\n\t\t\t\t<td *ngFor=\"let col of columns\">\r\n\t\t\t\t\t{{log[col.field]}}\r\n\t\t\t\t</td>\r\n\t\t\t</tr>\r\n\t\t</ng-template>\r\n\t</p-table>  \r\n</div>\r\n"

/***/ }),

/***/ "./src/app/acp/log-management/logACP.component.scss":
/*!**********************************************************!*\
  !*** ./src/app/acp/log-management/logACP.component.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".ui-table {\n  width: 925px; }\n"

/***/ }),

/***/ "./src/app/acp/log-management/logACP.component.ts":
/*!********************************************************!*\
  !*** ./src/app/acp/log-management/logACP.component.ts ***!
  \********************************************************/
/*! exports provided: LogACPComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogACPComponent", function() { return LogACPComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_acp_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/acp.service */ "./src/app/services/acp.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var LogACPComponent = /** @class */ (function () {
    function LogACPComponent(acpservice) {
        this.acpservice = acpservice;
        this.from = undefined;
        this.till = undefined;
        this.text = '';
        this.msgs = [];
        this.rows = 10;
    }
    LogACPComponent.prototype.ngOnInit = function () {
        this.cols = [
            { field: 'date', header: 'Date and Time' },
            { field: 'priority', header: 'Priority' },
            { field: 'source', header: 'Source' },
            { field: 'username', header: 'Associated User' },
            { field: 'action', header: 'Action' },
            { field: 'object', header: 'Affected Object' },
            { field: 'status', header: 'Status' }
        ];
        this.loading = true;
    };
    /**
     * This method loads logs depending on the event
     *
     * @param ev
     */
    LogACPComponent.prototype.loadLogs = function (ev) {
        this.loading = true;
        if (ev.first === undefined)
            ev.first = 0;
        if (ev.rows === undefined)
            ev.rows = this.rows;
        if (this.rangeDates !== undefined && this.rangeDates[1] !== undefined && this.text.length === 0) {
            this.loadLogsDaterangeFilter(ev);
        }
        else if (this.rangeDates !== undefined && this.rangeDates[1] !== undefined && this.text.length > 0) {
            this.loadLogsUsernameDaterangeFilter(ev);
        }
        else
            this.loadLogsNoFilter(ev);
    };
    /**
     * This method loads logs from the current log file
     *
     * @param ev
     */
    LogACPComponent.prototype.loadLogsNoFilter = function (ev) {
        var _this = this;
        this.acpservice.getLogs(ev.first, ev.rows).subscribe(function (result) {
            _this.logs = result;
            _this.msgs.push({
                severity: 'success',
                summary: 'logs loaded successfully'
            });
            _this.loading = false;
        }, function (err) {
            _this.msgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        });
    };
    /**
     * This method loads logs with a date range filter
     *
     * @param ev
     */
    LogACPComponent.prototype.loadLogsDaterangeFilter = function (ev) {
        var _this = this;
        this.acpservice.getLogsDaterangeFilter(this.rangeDates[0], this.rangeDates[1], ev.first, ev.rows).subscribe(function (result) {
            _this.logs = result;
            _this.msgs.push({
                severity: 'success',
                summary: 'logs loaded successfully'
            });
            _this.loading = false;
        }, function (err) {
            _this.msgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        });
    };
    /**
     * This method loads logs with a username and date range filter
     *
     * @param ev
     */
    LogACPComponent.prototype.loadLogsUsernameDaterangeFilter = function (ev) {
        var _this = this;
        this.acpservice.getLogsUsernameDaterangeFilter(this.rangeDates[0], this.rangeDates[1], this.text, ev.first, ev.rows).subscribe(function (result) {
            _this.logs = result;
            _this.msgs.push({
                severity: 'success',
                summary: 'logs loaded successfully'
            });
            _this.loading = false;
        }, function (err) {
            _this.msgs.push({
                severity: 'error',
                summary: 'Error!',
                detail: 'Error while loading logs'
            });
        });
    };
    LogACPComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-logACP',
            template: __webpack_require__(/*! ./logACP.component.html */ "./src/app/acp/log-management/logACP.component.html"),
            styles: [__webpack_require__(/*! ./logACP.component.scss */ "./src/app/acp/log-management/logACP.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [_services_acp_service__WEBPACK_IMPORTED_MODULE_1__["ACPService"]]
        }),
        __metadata("design:paramtypes", [_services_acp_service__WEBPACK_IMPORTED_MODULE_1__["ACPService"]])
    ], LogACPComponent);
    return LogACPComponent;
}());



/***/ }),

/***/ "./src/app/acp/policy-management/policy-acp.component.html":
/*!*****************************************************************!*\
  !*** ./src/app/acp/policy-management/policy-acp.component.html ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog header=\"Confirmation\" icon=\"fa fa-exclamation-triangle\"></p-confirmDialog>\r\n<p-growl [value]=\"privacyMsgs\" [sticky]=\"true\"></p-growl>\r\n\r\n<div style=\"display: none\" #overview>\r\n\t<div style=\"font-size: 15px; color: white\" *ngIf=\"sequenceList.length === 0\">\r\n\t\tempty\r\n\t</div>\r\n\t<div *ngFor=\"let currID of sequenceList; let i=index\" id=\"{{currID}}\">\r\n\t\t<div class=\"vertical-align\" *ngIf=\"availableElements[currID] != null\">\r\n\t\t\t<p-fieldset [toggleable]=\"false\" [collapsed]=\"false\">\r\n\t\t\t\t<p-header>\r\n\t\t\t\t\t<div style=\"border: none; font-weight: bold; background-color: black; color: white\" class=\"ui-message\">\r\n\t\t\t\t\t  {{availableElements[currID].title}}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</p-header>\r\n\t\t\t\t<div style=\"width: 650px;\">\r\n\t\t\t\t\t{{availableElements[currID].descriptions.before}}<hr/>\r\n\t\t\t\t\t<div *ngIf=\"availableElements[currID].children.length == 0\">\r\n\t\t\t\t\t\t<i>empty</i>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div *ngFor=\"let child of availableElements[currID].children; let i=index\" id=\"{{child.id}}\">\r\n\t\t\t\t\t\t<p-fieldset *ngIf=\"availableElements[child.id] != null\">\r\n\t\t\t\t\t\t\t<p-header>\r\n\t\t\t\t\t\t\t\t<div style=\"border: none; font-weight: bold;\" class=\"ui-message\">\r\n\t\t\t\t\t\t\t\t\t{{availableElements[child.id].title}}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</p-header>\r\n\t\t\t\t\t\t\t<div style=\"width: 600px;\">\r\n\t\t\t\t\t\t\t\t{{child.descriptions.before}}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div class=\"ui-g-12\">\r\n\t\t\t\t\t\t\t\t<u>{{child.descriptions.submit}}</u><br/>\r\n\t\t\t\t\t\t\t\t<div class=\"ui-g-8\">\r\n\t\t\t\t\t\t\t\t\t<button pButton icon=\"fas fa-wrench\" style=\"background-color: blue; margin-right: 5px;\" type=\"submit\" label=\"CHANGE\" (click)=\"prepareChangeArea(child.id)\"></button>\r\n\t\t\t\t\t\t\t\t\t<button pButton icon=\"fas fa-arrow-up\" style=\"background-color: green; margin-right: 5px;\" type=\"submit\" label=\"EXPORT\" (click)=\"prepareExportArea(child.id)\"></button>\r\n\t\t\t\t\t\t\t\t\t<button pButton icon=\"fa fa-trash\" style=\"background-color: red;\" type=\"submit\" label=\"REMOVE\" (click)=\"prepareRemoveArea(child.id)\"></button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"ui-g-4\" style=\"text-align: right; color: green; -ms-transform: translateY(25%); transform: translateY(25%);\">\r\n\t\t\t\t\t\t\t\t\t<span *ngIf=\"child.inUse\">✔inUse </span>\r\n\t\t\t\t\t\t\t\t\t<span *ngIf=\"child.consentRequired\">✔consentRequired </span>\r\n\t\t\t\t\t\t\t\t\t<span *ngIf=\"child.preChecked\">✔preChecked </span>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</p-fieldset>\t\t\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr/>{{availableElements[currID].descriptions.after}}\r\n\t\t\t\t\t<div class=\"ui-g-12\">\r\n\t\t\t\t\t\t<u>{{availableElements[currID].descriptions.submit}}</u><br/>\r\n\t\t\t\t\t\t<div class=\"ui-g-8\">\r\n\t\t\t\t\t\t\t<button pButton icon=\"fas fa-wrench\" style=\"background-color: blue; margin-right: 5px;\" type=\"submit\" label=\"CHANGE\" (click)=\"prepareChangeArea(currID)\"></button>\r\n\t\t\t\t\t\t\t<button pButton icon=\"fas fa-arrow-up\" style=\"background-color: green; margin-right: 5px;\" type=\"submit\" label=\"EXPORT\" (click)=\"prepareExportArea(currID)\"></button>\r\n\t\t\t\t\t\t\t<button pButton icon=\"fa fa-trash\" style=\"background-color: red;\" type=\"submit\" label=\"REMOVE\" (click)=\"prepareRemoveArea(currID)\"></button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class=\"ui-g-4\" style=\"text-align: right; color: green; -ms-transform: translateY(25%); transform: translateY(25%);\">\r\n\t\t\t\t\t\t\t<span *ngIf=\"availableElements[currID].inUse\">✔inUse </span>\r\n\t\t\t\t\t\t\t<span *ngIf=\"availableElements[currID].consentRequired\">✔consentRequired</span>\r\n\t\t\t\t\t\t\t<span *ngIf=\"availableElements[currID].preChecked\">✔preChecked </span>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</p-fieldset>\r\n\t\t</div>\r\n\t</div>\t\r\n\t<br/>\r\n\t<br/>\r\n</div>\r\n\r\n<div style=\"display: none; width: 500px\" #add>\r\n\t<form [formGroup]=\"addElementForm\" *ngIf=\"addElementForm != null\" (ngSubmit)=\"checkElementInsertion(addElementForm.value)\">\r\n\t\t<p-fieldset [toggleable]=\"false\">\r\n\t\t\t<p-header>\r\n\t\t\t\t<div class=\"ui-g\">\r\n\t\t\t\t\t<div class=\"ui-g-2\">\r\n\t\t\t\t\t\t<button pButton type=\"button\" icon=\"fas fa-plus\" style=\"background-color: green; width: 50px; height: 65px; margin-top: 25px;\"></button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ui-g-1\" style=\"width: 250px; text-align: right; color: green; -ms-transform: translateY(25%); transform: translateY(25%);\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"id\" placeholder=\"id\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"contextID\" placeholder=\"contextID\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"priorVersion\" placeholder=\"priorVersion\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"title\" placeholder=\"title\" class=\"policyInput\">\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</p-header>\r\n\t\t\t<div style=\"width: 400px;\">\r\n\t\t\t\t<textarea style=\"width: 100%; height: 100px;\" type=\"text\" InputTextareaModule formControlName=\"descriptionsBefore\" placeholder=\"descriptions.before\"></textarea>\r\n\t\t\t\t<br/><hr/>\r\n\t\t\t\t<b>sub-elements</b>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<textarea style=\"width: 100%; height: 100px;\" type=\"text\" InputTextareaModule formControlName=\"descriptionsAfter\" placeholder=\"descriptions.after\"></textarea>\r\n\t\t\t\t<p-calendar showTime=\"true\" hourFormat=\"24\"  formControlName=\"validFrom\" placeholder=\"validFrom\"></p-calendar>\r\n\t\t\t\t<div class=\"ui-g-25\">\r\n\t\t\t\t    <p-checkbox binary=\"true\" formControlName=\"inUse\" title=\"inUse\"></p-checkbox>\r\n\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"consentRequired\" title=\"consentRequired\"></p-checkbox>\r\n\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"preChecked\" title=\"preChecked\"></p-checkbox>\r\n\t\t\t\t\t<input style=\"width: 100%\" type=\"text\" pInputText formControlName=\"descriptionsSubmit\" placeholder=\"descriptions.submit\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<button pButton type=\"submit\" style=\"margin-right: 5px;\" label=\"Add Element\"></button>\r\n\t\t\t</div>\r\n\t\t</p-fieldset>\r\n\t</form>\r\n\t<br/>\r\n</div>\r\n\r\n<div style=\"display: none\" #export>\r\n\t<form [formGroup]=\"exportElementForm\" *ngIf=\"exportElementForm != null\" (ngSubmit)=\"checkBackupElementInsertion(exportElementForm.value)\">\r\n\t\t<p-selectButton formControlName=\"selectedTab\" [options]=\"exportTabOptions\"></p-selectButton>\r\n\t\t<div style=\"\" *ngIf=\"exportElementForm.controls.selectedTab.value === 'db'\">\r\n\t\t\t<p-listbox formControlName=\"selectedBackupElement\" [options]=\"exportTabEntries\"></p-listbox>\r\n\t\t</div>\r\n\t\t<div *ngIf=\"exportElementForm.controls.selectedTab.value === 'tf'\">\r\n\t\t\t<textarea type=\"text\" InputTextareaModule formControlName=\"backupContent\"></textarea><br/>\r\n\t\t\t<input type=\"hidden\" pInputText formControlName=\"backupID\">\r\n\t\t\t<input type=\"text\" pInputText formControlName=\"backupName\" placeholder=\"enter name for saving backup\">\r\n\t\t\t<div style=\"color: black; font-weight: bold;\">\r\n\t\t\t\t<button *ngIf=\"this.exportElementForm.value.backupID === ''\" pButton style=\"background-color: green; margin-right: 5px;\" type=\"submit\" label=\"CREATE BACKUP\" [disabled]=\"!exportElementForm.valid\"></button>\r\n\t\t\t\t<button *ngIf=\"this.exportElementForm.value.backupID !== ''\" pButton style=\"background-color: blue; margin-right: 5px;\" type=\"submit\" label=\"CHANGE BACKUP\" [disabled]=\"!exportElementForm.valid\"></button>\r\n\t\t\t\t<button *ngIf=\"this.exportElementForm.value.backupID !== ''\" pButton style=\"background-color: green; margin-right: 5px;\" type=\"button\" label=\"CREATE COPY\" (click)=\"createBackupCopy(this.exportElementForm.value.backupID)\"></button>\r\n\t\t\t\t<button *ngIf=\"this.exportElementForm.value.backupID !== ''\" pButton style=\"background-color: red\" type=\"button\" label=\"REMOVE BACKUP\" (click)=\"removeBackupElement(this.exportElementForm.value.backupID)\"></button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<br/>\r\n\t</form>\r\n</div>\r\n\r\n\r\n<div style=\"display: none\" #import>\r\n\t<form [formGroup]=\"importElementForm\" *ngIf=\"importElementForm != null\" (ngSubmit)=\"checkImportElementInsertion(importElementForm.value)\">\r\n\t\t<p-listbox formControlName=\"selectedBackupElement\" [options]=\"importTabEntries\"></p-listbox>\r\n\t\t<div style=\"color: black; font-weight: bold;\">\r\n\t\t\t<p-fieldset [toggleable]=\"false\" [collapsed]=\"false\">\r\n\t\t\t\t<p-header>\r\n\t\t\t\t\t<div style=\"border: none; font-weight: bold; background-color: blue; color: white\">\r\n\t\t\t\t\t\tMODES\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</p-header>\r\n\t\t\t\t<p-radioButton formControlName=\"mode\" name=\"mode\" label=\"DEFAULT\" value=\"default\"></p-radioButton><br/>\r\n\t\t\t\t<p-radioButton formControlName=\"mode\" name=\"mode\" label=\"OVERRIDE\" value=\"override\"></p-radioButton><br/>\r\n\t\t\t\t<p-radioButton formControlName=\"mode\" name=\"mode\" label=\"ONLY\" value=\"only\"></p-radioButton>\r\n\t\t\t</p-fieldset>\r\n\t\t\t<button pButton style=\"background-color: red\" type=\"submit\" label=\"LOAD BACKUP\" [disabled]=\"importElementForm.value.selectedBackupElement === ''\"></button>\r\n\t\t</div>\r\n\t</form>\r\n</div>\r\n\r\n<div style=\"display: none\" #settings>\r\n\td\r\n</div>\r\n\r\n<div style=\"display: none; width: 500px\" #change>\r\n\t<form [formGroup]=\"changeElementForm\" *ngIf=\"changeElementForm != null\" (ngSubmit)=\"checkElementChanges(changeElementForm.value)\">\r\n\t\t<p-fieldset [toggleable]=\"false\">\r\n\t\t\t<p-header>\r\n\t\t\t\t<div class=\"ui-g\">\r\n\t\t\t\t\t<div class=\"ui-g-2\">\r\n\t\t\t\t\t\t<button pButton type=\"button\" icon=\"fas fa-wrench\" style=\"background-color: blue; width: 50px; height: 65px; margin-top: 25px;\"></button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"ui-g-1\" style=\"width: 250px; text-align: right; color: green; -ms-transform: translateY(25%); transform: translateY(25%);\">\r\n\t\t\t\t\t\t<input type=\"hidden\" pInputText formControlName=\"_id\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"id\" placeholder=\"id\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"contextID\" placeholder=\"contextID\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"priorVersion\" placeholder=\"priorVersion\" class=\"policyInput\">\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"title\" placeholder=\"title\" class=\"policyInput\">\t\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</p-header>\r\n\t\t\t<div style=\"width: 400px;\">\r\n\t\t\t\t<textarea style=\"width: 100%; height: 100px;\" type=\"text\" InputTextareaModule formControlName=\"descriptionsBefore\" placeholder=\"descriptions.before\"></textarea>\r\n\t\t\t\t<br/><hr/>\r\n\t\t\t\t<b>sub-elements</b>\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<textarea style=\"width: 100%; height: 100px;\" type=\"text\" InputTextareaModule formControlName=\"descriptionsAfter\" placeholder=\"descriptions.after\"></textarea>\r\n\t\t\t\t<p-calendar showTime=\"true\" hourFormat=\"24\"  formControlName=\"validFrom\" placeholder=\"validFrom\"></p-calendar>\r\n\t\t\t\t<div class=\"ui-g-25\">\r\n\t\t\t\t    <p-checkbox binary=\"true\" formControlName=\"inUse\" title=\"inUse\"></p-checkbox>\r\n\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"consentRequired\" title=\"consentRequired\"></p-checkbox>\r\n\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"preChecked\" title=\"preChecked\"></p-checkbox>\r\n\t\t\t\t\t<input style=\"width: 100%\" type=\"text\" pInputText formControlName=\"descriptionsSubmit\" placeholder=\"descriptions.submit\">\r\n\t\t\t\t</div>\r\n\t\t\t\t<br/>\r\n\t\t\t\t<button pButton type=\"submit\" style=\"margin-right: 5px;\" label=\"Change Element\"></button>\r\n\t\t\t\t<button pButton type=\"button\" label=\"Back\" (click)=\"goBack()\"></button>\r\n\t\t\t</div>\r\n\t\t</p-fieldset>\r\n\t</form>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/acp/policy-management/policy-acp.component.scss":
/*!*****************************************************************!*\
  !*** ./src/app/acp/policy-management/policy-acp.component.scss ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "textarea {\n  width: 450px;\n  min-height: 200px; }\n\n.policyInput {\n  min-width: 400px; }\n\n.ui-listbox {\n  width: 450px;\n  min-height: 200px; }\n\n.ui-widget-overlay {\n  z-index: 0 !important; }\n"

/***/ }),

/***/ "./src/app/acp/policy-management/policy-acp.component.ts":
/*!***************************************************************!*\
  !*** ./src/app/acp/policy-management/policy-acp.component.ts ***!
  \***************************************************************/
/*! exports provided: PolicyACPComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolicyACPComponent", function() { return PolicyACPComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../models/backend/dataprivacyelementbackend */ "./src/app/models/backend/dataprivacyelementbackend.ts");
/* harmony import */ var _services_acp_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/acp.service */ "./src/app/services/acp.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var PolicyACPComponent = /** @class */ (function () {
    function PolicyACPComponent(confirmationService, route, fb, acpS) {
        this.confirmationService = confirmationService;
        this.route = route;
        this.fb = fb;
        this.acpS = acpS;
        this.privacyMsgs = [];
    }
    PolicyACPComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.children = ['overview', 'add', 'import', 'export', 'settings', 'change'];
        this.availableElements = {};
        this.availableBackupElements = {};
        this.sequenceList = [];
        this.initAddArea();
        this.initExportArea();
        this.initChangeArea();
        //event listener for updating the displayed content (for the "policy" area)
        this.route.fragment.subscribe(function (fragments) {
            var url = _this.getPreparedURL();
            if (url[0] === 'policy') {
                var key = url[1];
                for (var _i = 0, _a = _this.children; _i < _a.length; _i++) {
                    var currentKey = _a[_i];
                    _this[currentKey].nativeElement.style.display = "none";
                }
                if (_this[key] != null) {
                    var callName = 'update' + key.charAt(0).toUpperCase() + key.slice(1) + 'Area';
                    if (_this[callName] != null) {
                        _this[callName].apply(_this, _this.arguments);
                        _this.arguments = [];
                    }
                    _this[key].nativeElement.style.display = "";
                }
                else {
                    _this.privacyMsgs.push({
                        severity: 'error',
                        summary: 'Error',
                        detail: 'component of <b>' + key + '</b> is undefined'
                    });
                }
            }
        });
    };
    /* ---------------------------- SAMPLES ----------------------------*/
    /**
     * adjusts the URL accordingly to enable the trigger for updating content
     *
     * @param key which page should be displayed?
     */
    PolicyACPComponent.prototype.show = function (key) {
        if (key === void 0) { key = ''; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        key = key === '' ? this.children[0] : key;
        this.arguments = args;
        if (key !== this.getPreparedURL()[1])
            window.location.assign('/acp#policy/' + key);
    };
    /**
     * trivial
     */
    PolicyACPComponent.prototype.goBack = function () {
        window.history.back();
    };
    /**
     * URL content is adapted so that further processing of the fragments can function without problems
     */
    PolicyACPComponent.prototype.getPreparedURL = function () {
        var url = this.route.snapshot.fragment;
        if (url == null)
            url = '';
        url = url.split('?')[0]; //Parameterangaben abschneiden
        return url.split('/');
    };
    /**
     * this method ensures that the privacy elements are loaded
     * the special thing about this method is that the upper elements are loaded separately from the lower elements to avoid loading sequence problems
     */
    PolicyACPComponent.prototype.loadPrivacyElements = function () {
        var _this = this;
        this.sequenceList = [];
        this.availableElements = {};
        this.acpS.getAllPrivacyElements('root').subscribe(function (result) {
            result.forEach(function (obj) {
                var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_4__["DataPrivacyElementBackend"](obj);
                this.availableElements[obj.id] = item;
                this.sequenceList.push([obj.id]);
            }.bind(_this));
            _this.acpS.getAllPrivacyElements('leaf').subscribe(function (result) {
                result.forEach(function (obj) {
                    var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_4__["DataPrivacyElementBackend"](obj);
                    this.availableElements[obj.id] = item;
                    this.availableElements[obj.contextID].addChild(item);
                }.bind(_this));
            });
        });
    };
    /* ---------------------------- OVERVIEW AREA ----------------------------*/
    PolicyACPComponent.prototype.updateOverviewArea = function () {
        this.loadPrivacyElements();
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`CHANGE` (prepareChangeArea(privacyID))-> PAGE[CHANGE]:INPUTS@AVAIL_ELEMS[PRIVACYID]
     *
     * @param privacyID
     */
    PolicyACPComponent.prototype.prepareChangeArea = function (privacyID) {
        this.show('change');
        var elem = this.availableElements[privacyID];
        this.changeElementForm.patchValue({
            _id: elem.id,
            id: elem.id,
            priorVersion: elem.priorVersion,
            contextID: elem.contextID,
            title: elem.title,
            descriptionsBefore: elem.descriptions.before,
            descriptionsAfter: elem.descriptions.after,
            descriptionsSubmit: elem.descriptions.submit,
            validFrom: elem.validFrom,
            inUse: elem.inUse,
            consentRequired: elem.consentRequired,
            preChecked: elem.preChecked
        });
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`EXPORT` (prepareExportArea(privacyID))-> PAGE[EXPORT]:INPUTS@AVAIL_BACKUP_ELEMS[PRIVACYID]
     *
     * @param privacyID
     */
    PolicyACPComponent.prototype.prepareExportArea = function (privacyID) {
        var _this = this;
        this.show('export', 1);
        this.acpS.getPrivacyElement(privacyID).subscribe(function (result) {
            _this.exportElementForm.patchValue({
                backupID: '',
                backupName: '',
                backupContent: _this.convertPrivacyElementsToJSON(result)
            });
        });
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`REMOVE` (prepareRemoveArea(privacyID))-> (PAGE[OVERVIEW]:CONFIRM@`Are you sure ...` (accept)-> PAGE[OVERVIEW]:AVAIL_BACKUP_ELEMS\AVAIL_BACKUP_ELEMS[PRIVACYID])
     *
     * @param privacyID
     */
    PolicyACPComponent.prototype.prepareRemoveArea = function (privacyID) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure that you want to perform this action?',
            accept: function () {
                _this.acpS.removePrivacyElement(privacyID).subscribe(function (result) {
                    _this.privacyMsgs.push({
                        severity: 'success',
                        summary: 'The element has been removed',
                        detail: _this.availableElements[privacyID].title
                    });
                    if (_this.availableElements[privacyID] != null) {
                        document.getElementById(privacyID).remove();
                        delete _this.availableElements[privacyID];
                    }
                    _this.show('overview');
                }, function (err) {
                    _this.privacyMsgs.push({
                        severity: 'error',
                        summary: 'Error!'
                    });
                });
            }
        });
    };
    /* ---------------------------- ADD AREA ----------------------------*/
    /**
     * input values are initialized according to the expected contents
     */
    PolicyACPComponent.prototype.initAddArea = function () {
        var formControls = {};
        formControls['id'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['contextID'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['priorVersion'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['title'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsBefore'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsAfter'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsSubmit'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['validFrom'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['inUse'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](true, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['consentRequired'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](true, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['preChecked'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.addElementForm = this.fb.group(formControls);
    };
    PolicyACPComponent.prototype.updateAddArea = function () {
        this.initAddArea();
    };
    /**
     * this method checks the inputs and inserts a new data privacy element if the inputs are correct
     *
     * @param data the user inputs
     */
    PolicyACPComponent.prototype.checkElementInsertion = function (data) {
        var _this = this;
        var privacyElement = {
            id: data.id,
            priorVersion: data.priorVersion,
            contextID: data.contextID,
            title: data.title,
            descriptions: {
                before: data.descriptionsBefore,
                after: data.descriptionsAfter,
                submit: data.descriptionsSubmit
            },
            consentRequired: data.consentRequired,
            preChecked: data.preChecked,
            inUse: data.inUse,
            validFrom: data.validFrom == null ? 0 : data.validFrom
        };
        this.acpS.addPrivacyElement(privacyElement).subscribe(function (result) {
            _this.privacyMsgs.push({
                severity: 'success',
                summary: 'The element has been added',
                detail: privacyElement.title
            });
            _this.show('overview');
        }, function (err) {
            _this.privacyMsgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        });
    };
    /* ---------------------------- EXPORT AREA ----------------------------*/
    /**
     * this method checks the inputs and inserts a new data privacy element if the inputs are correct
     */
    PolicyACPComponent.prototype.initExportArea = function () {
        var _this = this;
        this.exportTabOptions = [
            { label: 'Database', value: 'db' },
            { label: 'TextField', value: 'tf' }
        ];
        var formControls = {};
        formControls['selectedTab'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['selectedBackupElement'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['backupID'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['backupName'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2)]));
        formControls['backupContent'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.exportElementForm = this.fb.group(formControls);
        this.exportTabEntries = [
            { label: 'Current DB State', value: 'current' }
        ];
        this.acpS.getAllPrivacyBackups().subscribe(function (result) {
            result.forEach(function (backupElement) {
                this.availableBackupElements[backupElement.id] = backupElement;
                this.exportTabEntries.push({ label: backupElement.name, value: backupElement.id });
            }.bind(_this));
        });
        this.exportElementForm.controls.selectedBackupElement.valueChanges.subscribe(function (key) {
            if (key === undefined)
                return;
            if (key === 'current') {
                _this.acpS.getAllPrivacyElements().subscribe(function (dpElements) {
                    _this.exportElementForm.patchValue({
                        backupID: '',
                        backupName: '',
                        backupContent: _this.convertPrivacyElementsToJSON(dpElements)
                    });
                    _this.setExportTab(1);
                });
            }
            else {
                _this.exportElementForm.patchValue({
                    backupID: _this.availableBackupElements[key].id,
                    backupName: _this.availableBackupElements[key].name,
                    backupContent: JSON.stringify(_this.availableBackupElements[key].content)
                });
                _this.setExportTab(1);
            }
            _this.setExportTabSelectedItem();
        });
    };
    PolicyACPComponent.prototype.updateExportArea = function (selectedTabIndex) {
        this.setExportTab(selectedTabIndex);
    };
    PolicyACPComponent.prototype.setExportTab = function (index) {
        if (index === void 0) { index = 0; }
        this.exportElementForm.controls.selectedTab.patchValue(this.exportTabOptions[index].value);
    };
    PolicyACPComponent.prototype.setExportTabSelectedItem = function (index) {
        if (index === void 0) { index = null; }
        this.exportElementForm.controls.selectedBackupElement.patchValue(index == null ? undefined : this.exportTabEntries[index]);
    };
    /**
     * this method checks the inputs and inserts a new privacy backup element if the inputs are correct
     *
     * @param data the user inputs
     */
    PolicyACPComponent.prototype.checkBackupElementInsertion = function (data) {
        var _this = this;
        var backupElement = {
            id: data.backupID === '' ? 'null' : data.backupID,
            content: data.backupContent,
            description: '',
            name: data.backupName,
            creationDate: new Date()
        };
        try {
            backupElement.content = JSON.parse(backupElement.content);
            this.acpS.updatePrivacyBackup(backupElement.id, backupElement).subscribe(function (result) {
                _this.privacyMsgs.push({
                    severity: 'success',
                    summary: (backupElement.id === 'null' ? 'The backup has been added' : 'The backup has been changed'),
                    detail: backupElement.name
                });
                _this.initExportArea();
                _this.setExportTab();
            }, function (err) {
            });
        }
        catch (e) {
            this.privacyMsgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        }
    };
    /**
     * this method creates a copy of an existing privacy backup element
     *
     * @param backupID
     */
    PolicyACPComponent.prototype.createBackupCopy = function (backupID) {
        this.checkBackupElementInsertion({
            backupID: '',
            backupName: this.availableBackupElements[backupID].name + ' Copy',
            backupContent: JSON.stringify(this.availableBackupElements[backupID].content)
        });
    };
    /**
     * this method remove an existing privacy backup element if the inputs are correct
     *
     * @param backupID
     */
    PolicyACPComponent.prototype.removeBackupElement = function (backupID) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure that you want to perform this action?',
            accept: function () {
                _this.acpS.removePrivacyBackup(backupID).subscribe(function (result) {
                    _this.privacyMsgs.push({
                        severity: 'success',
                        summary: 'The element has been removed',
                        detail: backupID
                    });
                    for (var i in _this.exportTabEntries) {
                        var selItem = _this.exportTabEntries[i];
                        if (selItem.value === backupID) {
                            _this.exportTabEntries.splice(i, 1);
                            break;
                        }
                    }
                    _this.setExportTab();
                }, function (err) {
                    _this.privacyMsgs.push({
                        severity: 'error',
                        summary: 'Error!'
                    });
                });
            }
        });
    };
    /**
     * converts a DataPrivacyElementBackend type object to JSON format
     *
     * @param dpElements DataPrivacyElementBackend
     */
    PolicyACPComponent.prototype.convertPrivacyElementsToJSON = function (dpElements) {
        var result = '{';
        for (var _i = 0, dpElements_1 = dpElements; _i < dpElements_1.length; _i++) {
            var currentElement = dpElements_1[_i];
            result += '"' + currentElement.id + '":' + JSON.stringify(currentElement) + ',';
        }
        result = result.substr(0, result.length - 1);
        result += '}';
        return result;
    };
    /* ---------------------------- IMPORT AREA ----------------------------*/
    /**
     * this method checks the inputs and inserts a new data privacy element if the inputs are correct
     */
    PolicyACPComponent.prototype.initImportArea = function () {
        var _this = this;
        this.importTabEntries = [];
        var formControls = {};
        formControls['selectedBackupElement'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['backupID'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['backupName'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2)]));
        formControls['backupContent'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['mode'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('default', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.importElementForm = this.fb.group(formControls);
        this.acpS.getAllPrivacyBackups().subscribe(function (result) {
            if (result.length == 0) {
                _this.importElementForm.controls.backupContent.disable();
            }
            result.forEach(function (backupElement) {
                this.availableBackupElements[backupElement.id] = backupElement;
                this.importTabEntries.push({ label: backupElement.name, value: backupElement.id });
            }.bind(_this));
        });
    };
    PolicyACPComponent.prototype.updateImportArea = function () {
        this.initImportArea();
    };
    PolicyACPComponent.prototype.setImportTabSelectedItem = function (index) {
        if (index === void 0) { index = null; }
        this.importElementForm.controls.selectedBackupElement.patchValue(index == null ? undefined : this.importTabEntries[index]);
    };
    /**
     * this method checks the inputs and imports a privacy backup element if user has accepted the hint
     *
     * @param data the user inputs
     */
    PolicyACPComponent.prototype.checkImportElementInsertion = function (data) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure that you want to perform this action?',
            accept: function () {
                _this.acpS.importPrivacyBackup(data.selectedBackupElement, data.mode).subscribe(function (result) {
                    _this.privacyMsgs.push({
                        severity: 'success',
                        summary: 'successful',
                        detail: 'The backup was imported successfully.'
                    });
                    _this.show('overview');
                }, function (err) {
                    _this.privacyMsgs.push({
                        severity: 'error',
                        summary: 'Error!'
                    });
                });
            }
        });
    };
    /* ---------------------------- CHANGE AREA ----------------------------*/
    /**
     * this method checks the inputs and inserts a new data privacy element if the inputs are correct
     */
    PolicyACPComponent.prototype.initChangeArea = function () {
        var formControls = {};
        formControls['_id'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['id'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['contextID'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['priorVersion'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['title'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsBefore'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsAfter'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['descriptionsSubmit'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['validFrom'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['inUse'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](true, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['consentRequired'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"](true, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['preChecked'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.changeElementForm = this.fb.group(formControls);
    };
    PolicyACPComponent.prototype.updateChangeArea = function () {
    };
    /**
     * this method checks the inputs and change the data privacy element if the inputs are correct
     *
     * @param data the user inputs
     */
    PolicyACPComponent.prototype.checkElementChanges = function (data) {
        var _this = this;
        var privacyID = data._id;
        var privacyElement = {
            id: data.id,
            priorVersion: data.priorVersion,
            contextID: data.contextID,
            title: data.title,
            descriptions: {
                before: data.descriptionsBefore,
                after: data.descriptionsAfter,
                submit: data.descriptionsSubmit
            },
            consentRequired: data.consentRequired,
            preChecked: data.preChecked,
            inUse: data.inUse,
            validFrom: data.validFrom == null ? 0 : data.validFrom
        };
        this.acpS.updatePrivacyElement(privacyID, privacyElement).subscribe(function (result) {
            _this.privacyMsgs.push({
                severity: 'success',
                summary: 'The element has been changed',
                detail: privacyElement.title
            });
            _this.initChangeArea();
            _this.goBack();
        }, function (err) {
            _this.privacyMsgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('overview'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "overview", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('add'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "add", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('import'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "import", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('export'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "export", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('settings'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "settings", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('change'),
        __metadata("design:type", Object)
    ], PolicyACPComponent.prototype, "change", void 0);
    PolicyACPComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-policy-acp',
            template: __webpack_require__(/*! ./policy-acp.component.html */ "./src/app/acp/policy-management/policy-acp.component.html"),
            styles: [__webpack_require__(/*! ./policy-acp.component.scss */ "./src/app/acp/policy-management/policy-acp.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _services_acp_service__WEBPACK_IMPORTED_MODULE_5__["ACPService"]]
        }),
        __metadata("design:paramtypes", [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"], _services_acp_service__WEBPACK_IMPORTED_MODULE_5__["ACPService"]])
    ], PolicyACPComponent);
    return PolicyACPComponent;
}());



/***/ }),

/***/ "./src/app/acp/user-management/user-acp.component.html":
/*!*************************************************************!*\
  !*** ./src/app/acp/user-management/user-acp.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog header=\"Confirmation\" icon=\"fa fa-exclamation-triangle\"></p-confirmDialog>\r\n<p-growl [value]=\"userMsgs\" [sticky]=\"true\"></p-growl>\r\n\r\n<div style=\"display: none\" #overview>\r\n\t<div *ngFor=\"let user of users; let i=index\" id=\"{{user.userId}}\">\r\n\t\t<div class=\"vertical-align\" *ngIf=\"user != null\">\r\n\t\t\t<p-fieldset [toggleable]=\"false\" [collapsed]=\"false\">\r\n\t\t\t\t<p-header>\r\n\t\t\t\t\t<div style=\"border: none; font-weight: bold; background-color: blue; color: white\" class=\"ui-message\">\r\n\t\t\t\t\t  {{user.username}}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</p-header>\r\n\t\t\t\t<table>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">ID</td>\r\n\t\t\t\t\t\t<td>{{user.userId}}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">Creation date</td>\r\n\t\t\t\t\t\t<td>---</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">Role</td>\r\n\t\t\t\t\t\t<td>{{user.role}}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">E-Mail</td>\r\n\t\t\t\t\t\t<td>{{user.email}}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">First name</td>\r\n\t\t\t\t\t\t<td>{{user.firstname}}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<td style=\"font-weight: bold\">Last name</td>\r\n\t\t\t\t\t\t<td>{{user.lastname}}</td>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</table>\r\n\t\t\t\t<div class=\"ui-g-12\">\r\n\t\t\t\t\t<button pButton icon=\"fas fa-wrench\" style=\"background-color: black; margin-right: 5px;\" type=\"submit\" label=\"CHANGE\" (click)=\"prepareChangeArea(user.userId)\"></button>\r\n\t\t\t\t\t<button pButton icon=\"fa fa-refresh\" style=\"background-color: green;\" type=\"submit\" label=\"RESET PASSWORD\" (click)=\"prepareResetPasswordArea(user.userId)\"></button>\r\n\t\t\t\t\t<button pButton icon=\"fa fa-trash\" style=\"background-color: red;\" type=\"submit\" label=\"REMOVE\" (click)=\"prepareRemoveArea(user.userId)\"></button>\r\n\t\t\t\t</div>\r\n\t\t\t</p-fieldset>\r\n\t\t</div>\r\n\t</div>\t\r\n\t<br/>\r\n\t<br/>\r\n</div>\r\n\r\n<div style=\"display: none\" #change>\r\n\t<form [formGroup]=\"changeUserForm\" *ngIf=\"changeUserForm != null\" (ngSubmit)=\"checkUserChanges(changeUserForm.value)\">\r\n\t\t<p-fieldset [toggleable]=\"false\">\r\n\t\t\t<p-header>\r\n\t\t\t\t<div style=\"border: none; font-weight: bold; background-color: blue; color: white;\" class=\"ui-message\">\r\n\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"username\" class=\"userHeaderInput\">\t\r\n\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.username.valid&&changeUserForm.controls.username.dirty\">\r\n\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle \"></i> \r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\t\r\n\t\t\t</p-header>\r\n\t\t\t<table>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">ID</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"id\" class=\"userInput\">\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Role</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<p-dropdown placeholder=\"Select a role\" [options]=\"role\" formControlName=\"role\" [autoWidth]=\"false\"></p-dropdown>\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.role.valid&&changeUserForm.controls.role.dirty\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i> invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">E-Mail</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"email\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.email.valid&&changeUserForm.controls.email.dirty\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i> invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">First name</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"firstname\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.firstname.valid&&changeUserForm.controls.firstname.dirty\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i> invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Last name</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"lastname\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.lastname.valid&&changeUserForm.controls.lastname.dirty\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i> invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Confirmed</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"confirmed\" title=\"confirmed\"></p-checkbox>\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!changeUserForm.controls.confirmed.valid&&changeUserForm.controls.confirmed.dirty\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i> invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t\t<button pButton type=\"submit\" style=\"margin-right: 5px;\" label=\"Change User\" [disabled]=\"!changeUserForm.valid\"></button>\r\n\t\t\t<button pButton type=\"button\" label=\"Back\" (click)=\"goBack()\"></button>\r\n\t\t</p-fieldset>\r\n\t</form>\r\n</div>\r\n\r\n<div style=\"display: none\" #add>\r\n\t<form [formGroup]=\"addUserForm\" *ngIf=\"addUserForm != null\" (ngSubmit)=\"checkUserCreation(addUserForm.value)\">\r\n\t\t<p-fieldset [toggleable]=\"false\">\r\n\t\t\t<p-header>\r\n\t\t\t\t<div style=\"border: none; font-weight: bold; background-color: blue; color: white;\" class=\"ui-message\">\r\n\t\t\t\t\tADD USER\r\n\t\t\t\t</div>\t\r\n\t\t\t</p-header>\r\n\t\t\t<table>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Role</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<p-dropdown placeholder=\"Select a role\" [options]=\"role\" formControlName=\"role\" [autoWidth]=\"false\"></p-dropdown>\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.role.valid&&addUserForm.controls.role.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Username</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"username\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.username.valid&&addUserForm.controls.username.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Password</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"password\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.password.valid&&addUserForm.controls.password.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">E-Mail</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"email\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.email.valid&&addUserForm.controls.email.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">First name</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"firstname\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.firstname.valid&&addUserForm.controls.firstname.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Last name</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<input type=\"text\" pInputText formControlName=\"lastname\" class=\"userInput\">\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.lastname.valid&&addUserForm.controls.lastname.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t<td style=\"font-weight: bold\">Confirmed</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<p-checkbox binary=\"true\" formControlName=\"confirmed\" title=\"confirmed\"></p-checkbox>\r\n\t\t\t\t\t\t<div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!addUserForm.controls.confirmed.valid&&addUserForm.controls.confirmed.dirty\">\r\n\t\t\t\t\t\t  invalid\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t</table>\r\n\t\t\t<button pButton type=\"submit\" style=\"margin-right: 5px;\" label=\"Create User\" [disabled]=\"!addUserForm.valid\"></button>\r\n\t\t</p-fieldset>\r\n\t</form>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/acp/user-management/user-acp.component.scss":
/*!*************************************************************!*\
  !*** ./src/app/acp/user-management/user-acp.component.scss ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "textarea {\n  width: 450px;\n  min-height: 200px; }\n\n.userHeaderInput {\n  min-width: 200px;\n  background: none;\n  border: none;\n  color: white;\n  font-weight: bold; }\n\n.userInput {\n  min-width: 300px; }\n\n.ui-listbox {\n  width: 450px;\n  min-height: 200px; }\n\n.ui-widget-overlay {\n  z-index: 0 !important; }\n\n.ui-fieldset {\n  min-width: 500px !important; }\n\n.ui-dropdown {\n  min-width: 300px !important; }\n"

/***/ }),

/***/ "./src/app/acp/user-management/user-acp.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/acp/user-management/user-acp.component.ts ***!
  \***********************************************************/
/*! exports provided: UserACPComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserACPComponent", function() { return UserACPComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _models_database_project__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../models/database/project */ "./src/app/models/database/project.ts");
/* harmony import */ var _models_database_dashboard__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../models/database/dashboard */ "./src/app/models/database/dashboard.ts");
/* harmony import */ var _models_database_sheet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../models/database/sheet */ "./src/app/models/database/sheet.ts");
/* harmony import */ var _models_frontend_user__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../models/frontend/user */ "./src/app/models/frontend/user.ts");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/index.js");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(http_status_codes__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _services_acp_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../services/acp.service */ "./src/app/services/acp.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












var UserACPComponent = /** @class */ (function () {
    function UserACPComponent(confirmationService, route, databaseService, fb, acpS) {
        this.confirmationService = confirmationService;
        this.route = route;
        this.databaseService = databaseService;
        this.fb = fb;
        this.acpS = acpS;
        this.userMsgs = [];
        this.ROLEDEVELOPER = 'developer';
        this.ROLEENDUSER = 'enduser';
        this.emailPattern = '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$';
    }
    UserACPComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.children = ['overview', 'change', 'add'];
        this.users = [];
        this.initChangeArea();
        this.initAddArea();
        //event listener for updating the displayed content (for the "user" area)
        this.route.fragment.subscribe(function (fragments) {
            var url = _this.getPreparedURL();
            if (url[0] === 'user') {
                var key = url[1];
                for (var _i = 0, _a = _this.children; _i < _a.length; _i++) {
                    var currentKey = _a[_i];
                    _this[currentKey].nativeElement.style.display = "none";
                }
                if (_this[key] != null) {
                    var callName = 'update' + key.charAt(0).toUpperCase() + key.slice(1) + 'Area';
                    if (_this[callName] != null) {
                        _this[callName].apply(_this, _this.arguments);
                        _this.arguments = [];
                    }
                    _this[key].nativeElement.style.display = "";
                }
                else {
                    _this.userMsgs.push({
                        severity: 'error',
                        summary: 'Error',
                        detail: 'component of <b>' + key + '</b> is undefined'
                    });
                }
            }
        });
    };
    /* ---------------------------- SAMPLES ----------------------------*/
    /**
     * adjusts the URL accordingly to enable the trigger for updating content
     *
     * @param key which page should be displayed?
     */
    UserACPComponent.prototype.show = function (key) {
        if (key === void 0) { key = ''; }
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        key = key === '' ? this.children[0] : key;
        this.arguments = args;
        if (key !== this.getPreparedURL()[1])
            window.location.assign('/acp#user/' + key);
    };
    /**
     * trivial
     */
    UserACPComponent.prototype.goBack = function () {
        window.history.back();
    };
    /**
     * URL content is adapted so that further processing of the fragments can function without problems
     *
     * @return string url without parameters
     */
    UserACPComponent.prototype.getPreparedURL = function () {
        var url = this.route.snapshot.fragment;
        if (url == null)
            url = '';
        url = url.split('?')[0]; //Parameterangaben abschneiden
        return url.split('/');
    };
    UserACPComponent.prototype.getUser = function (userID) {
        for (var _i = 0, _a = this.users; _i < _a.length; _i++) {
            var user = _a[_i];
            if (user.userId === userID)
                return user;
        }
        return null;
    };
    /* ---------------------------- OVERVIEW AREA ----------------------------*/
    UserACPComponent.prototype.updateOverviewArea = function () {
        var _this = this;
        this.acpS.getAllUsers().subscribe(function (result) {
            _this.users = result;
        });
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`CHANGE` (prepareChangeArea(userID))-> PAGE[CHANGE]:INPUTS@USERS[userID]
     *
     * @param userID
     */
    UserACPComponent.prototype.prepareChangeArea = function (userID) {
        this.show('change');
        var user = this.getUser(userID);
        this.changeUserForm.patchValue({
            id: user.userId,
            username: user.username,
            role: user.role,
            email: user.email,
            firstname: user.firstname,
            lastname: user.lastname,
            confirmed: user.confirmed
        });
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`RESET PASSWORD` (prepareResetPasswordArea(userID))-> (PAGE[OVERVIEW]:CONFIRM@`Are you sure ...` (accept)-> PAGE[OVERVIEW])
     *
     * @param userID
     */
    UserACPComponent.prototype.prepareResetPasswordArea = function (userID) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure that you want to perform this action?',
            accept: function () {
                _this.acpS.resetUserPassword(userID).subscribe(function (result) {
                    _this.userMsgs.push({
                        severity: 'success',
                        summary: 'successful',
                        detail: '...'
                    });
                    _this.show('overview');
                }, function (err) {
                    _this.userMsgs.push({
                        severity: 'error',
                        summary: 'Error!'
                    });
                });
            }
        });
    };
    /**
     * input values are initialized according to the expected contents
     * PAGE[OVERVIEW]:BUTTON@`REMOVE` (prepareRemoveArea(userID))-> (PAGE[OVERVIEW]:CONFIRM@`Are you sure ...` (accept)-> PAGE[OVERVIEW]:USERS\USERS[userID])
     *
     * @param userID
     */
    UserACPComponent.prototype.prepareRemoveArea = function (userID) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Are you sure that you want to perform this action?',
            accept: function () {
                _this.acpS.removeUser(userID).subscribe(function (result) {
                    _this.userMsgs.push({
                        severity: 'success',
                        summary: 'successful',
                        detail: 'User was removed!'
                    });
                    document.getElementById(userID).remove();
                    _this.show('overview');
                }, function (err) {
                    _this.userMsgs.push({
                        severity: 'error',
                        summary: 'Error!'
                    });
                });
            }
        });
    };
    /* ---------------------------- CHANGE AREA ----------------------------*/
    UserACPComponent.prototype.initChangeArea = function () {
        var formControls = {};
        formControls['id'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]({ value: '', disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        formControls['username'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(6)]));
        formControls['role'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required);
        formControls['email'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].pattern(this.emailPattern)]));
        formControls['firstname'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(32)]));
        formControls['lastname'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(64)]));
        formControls['confirmed'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]({ value: '', disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.changeUserForm = this.fb.group(formControls);
        this.role = [];
        this.role.push({ label: 'Enduser', value: 'enduser' });
        this.role.push({ label: 'Developer', value: 'developer' });
    };
    UserACPComponent.prototype.updateChangeArea = function () {
    };
    /**
     * this method checks the inputs and change user properties if the inputs are correct
     *
     * @param data the user inputs
     */
    UserACPComponent.prototype.checkUserChanges = function (data) {
        var _this = this;
        var userID = this.changeUserForm.controls.id.value;
        var user = {
            role: data.role.toString(),
            userId: userID,
            email: data.email,
            username: data.username,
            firstname: data.firstname,
            lastname: data.lastname,
            password: data.password,
            checkedSettings: [],
            confirmed: data.confirmed
        };
        this.acpS.updateUser(userID, user).subscribe(function (result) {
            _this.userMsgs.push({
                severity: 'success',
                summary: 'user has been changed',
                detail: user.username
            });
            _this.initChangeArea();
            _this.goBack();
        }, function (err) {
            _this.userMsgs.push({
                severity: 'error',
                summary: 'Error!'
            });
        });
    };
    /* ---------------------------- ADD AREA ----------------------------*/
    UserACPComponent.prototype.initAddArea = function () {
        var formControls = {};
        formControls['username'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(6)]));
        formControls['password'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(6)]));
        formControls['role'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required);
        formControls['email'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].pattern(this.emailPattern)]));
        formControls['firstname'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(32)]));
        formControls['lastname'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(64)]));
        formControls['confirmed'] = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]({ value: false, disabled: true }, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].nullValidator);
        this.addUserForm = this.fb.group(formControls);
    };
    UserACPComponent.prototype.updateAddArea = function () {
    };
    /**
     * this method checks the inputs and create a the user if the inputs are correct
     *
     * @param data the user inputs
     */
    UserACPComponent.prototype.checkUserCreation = function (data) {
        var _this = this;
        var user = {
            role: data.role.toString(),
            userId: "",
            email: data.email,
            username: data.username,
            firstname: data.firstname,
            lastname: data.lastname,
            password: data.password,
            checkedSettings: [],
            confirmed: data.confirmed
        };
        this.acpS.addUser(user).subscribe(function (result) {
            //KOPIERT AUS create-user
            var sheetId = uuid_v4__WEBPACK_IMPORTED_MODULE_5___default()();
            var dashboardId = uuid_v4__WEBPACK_IMPORTED_MODULE_5___default()();
            var projectId = uuid_v4__WEBPACK_IMPORTED_MODULE_5___default()();
            var startSheet = new _models_database_sheet__WEBPACK_IMPORTED_MODULE_8__["SheetDB"](sheetId, 'Sheet 1', []);
            var startDashboard = new _models_database_dashboard__WEBPACK_IMPORTED_MODULE_7__["DashboardDB"](dashboardId, 'Dashboard 1', [sheetId]);
            _this.databaseService.insertDocument(_this.databaseService.USERSCOLLECTION, new _models_frontend_user__WEBPACK_IMPORTED_MODULE_9__["User"](result['userId'], user.role, projectId))
                .subscribe(function (resultUser) {
                _this.databaseService.insertDocument(_this.databaseService.PROJECTSCOLLECTION, new _models_database_project__WEBPACK_IMPORTED_MODULE_6__["ProjectDB"](projectId, 'Project 1', 'omega', [dashboardId]))
                    .subscribe(function (result) {
                }, function (err) {
                });
                _this.databaseService.insertDocument(_this.databaseService.DASHBOARDSCOLLECTION, startDashboard)
                    .subscribe(function (result) {
                }, function (err) {
                });
                _this.databaseService.insertDocument(_this.databaseService.SHEETSSCOLLECTION, startSheet)
                    .subscribe(function (result) {
                }, function (err) {
                });
                _this.userMsgs.push({
                    severity: 'success',
                    summary: 'Success',
                    detail: 'User has been added!'
                });
                _this.show('overview');
            }, function (err) {
                _this.userMsgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while creating user. Please try again later or contact the administrator.'
                });
            });
        }, function (err) {
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_10__["CONFLICT"]) {
                //**
                if (err.getMessage().equals('Email is already registered.')) {
                    _this.userMsgs.push({ severity: 'error', summary: 'Conflict', detail: 'Email address is already registered.' });
                }
                else
                    _this.userMsgs.push({ severity: 'error', summary: 'Conflict', detail: 'Username is already existed.' });
            }
            else {
                _this.userMsgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while creating user.Please try again later or contact the administrator.'
                });
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('overview'),
        __metadata("design:type", Object)
    ], UserACPComponent.prototype, "overview", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('change'),
        __metadata("design:type", Object)
    ], UserACPComponent.prototype, "change", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('add'),
        __metadata("design:type", Object)
    ], UserACPComponent.prototype, "add", void 0);
    UserACPComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-user-acp',
            template: __webpack_require__(/*! ./user-acp.component.html */ "./src/app/acp/user-management/user-acp.component.html"),
            styles: [__webpack_require__(/*! ./user-acp.component.scss */ "./src/app/acp/user-management/user-acp.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _services_acp_service__WEBPACK_IMPORTED_MODULE_11__["ACPService"]]
        }),
        __metadata("design:paramtypes", [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"], _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"], _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"], _services_acp_service__WEBPACK_IMPORTED_MODULE_11__["ACPService"]])
    ], UserACPComponent);
    return UserACPComponent;
}());



/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _skeleton_skeleton_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./skeleton/skeleton.module */ "./src/app/skeleton/skeleton.module.ts");
/* harmony import */ var _user_management_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./user-management/forgot-password/forgot-password.component */ "./src/app/user-management/forgot-password/forgot-password.component.ts");
/* harmony import */ var _user_management_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./user-management/reset-password/reset-password.component */ "./src/app/user-management/reset-password/reset-password.component.ts");
/* harmony import */ var _acp_acp_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./acp/acp.component */ "./src/app/acp/acp.component.ts");
/* harmony import */ var _user_management_home_home_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./user-management/home/home.component */ "./src/app/user-management/home/home.component.ts");
/* harmony import */ var _skeleton_unauthorized_unauthorized_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./skeleton/unauthorized/unauthorized.component */ "./src/app/skeleton/unauthorized/unauthorized.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};





/*@*/



/*We are lazy-loading the skeleton module, because the skeleton module needs some information which are only available after user-management*/
var routes = [
    /*@*/ { path: '', component: _user_management_home_home_component__WEBPACK_IMPORTED_MODULE_6__["HomeComponent"] },
    { path: 'acp', component: _acp_acp_component__WEBPACK_IMPORTED_MODULE_5__["ACPComponent"] },
    { path: 'dashboard', loadChildren: function () { return _skeleton_skeleton_module__WEBPACK_IMPORTED_MODULE_2__["SkeletonModule"]; } },
    { path: 'resetPassword', component: _user_management_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_4__["ResetPasswordComponent"] },
    { path: 'forgotPassword', component: _user_management_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_3__["ForgotPasswordComponent"] },
    { path: 'unauthorized', component: _skeleton_unauthorized_unauthorized_component__WEBPACK_IMPORTED_MODULE_7__["UnauthorizedComponent"] }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forRoot(routes)],
            providers: [],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.css":
/*!***********************************!*\
  !*** ./src/app/app.component.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "h1 {\r\n  color: #668BCC;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n  font-size: 250%;\r\n}\r\n"

/***/ }),

/***/ "./src/app/app.component.html":
/*!************************************!*\
  !*** ./src/app/app.component.html ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- shows user-management-page, create-user page or (when logged in) the dashboards -->\r\n<router-outlet></router-outlet>\r\n\r\n"

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};


var AppComponent = /** @class */ (function () {
    function AppComponent(router) {
        this.router = router;
    }
    AppComponent.prototype.ngOnInit = function () {
        // use it to navigate always to login page on refreh/reload
        //this.router.navigate(['']);
    };
    AppComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-root',
            template: __webpack_require__(/*! ./app.component.html */ "./src/app/app.component.html"),
            styles: [__webpack_require__(/*! ./app.component.css */ "./src/app/app.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/platform-browser/animations */ "./node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _models_shared_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./models/shared.module */ "./src/app/models/shared.module.ts");
/* harmony import */ var _acp_acp_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./acp/acp.component */ "./src/app/acp/acp.component.ts");
/* harmony import */ var _acp_user_management_user_acp_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./acp/user-management/user-acp.component */ "./src/app/acp/user-management/user-acp.component.ts");
/* harmony import */ var _acp_policy_management_policy_acp_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./acp/policy-management/policy-acp.component */ "./src/app/acp/policy-management/policy-acp.component.ts");
/* harmony import */ var _acp_log_management_logACP_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./acp/log-management/logACP.component */ "./src/app/acp/log-management/logACP.component.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _user_management_create_user_create_user_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./user-management/create-user/create-user.component */ "./src/app/user-management/create-user/create-user.component.ts");
/* harmony import */ var _user_management_login_login_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./user-management/login/login.component */ "./src/app/user-management/login/login.component.ts");
/* harmony import */ var _skeleton_skeleton_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./skeleton/skeleton.module */ "./src/app/skeleton/skeleton.module.ts");
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! primeng/confirmdialog */ "./node_modules/primeng/confirmdialog.js");
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_14__);
/* harmony import */ var _user_management_confirm_confirm_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./user-management/confirm/confirm.component */ "./src/app/user-management/confirm/confirm.component.ts");
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! primeng/accordion */ "./node_modules/primeng/accordion.js");
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(primeng_accordion__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! primeng/card */ "./node_modules/primeng/card.js");
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(primeng_card__WEBPACK_IMPORTED_MODULE_17__);
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! primeng/button */ "./node_modules/primeng/button.js");
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_18___default = /*#__PURE__*/__webpack_require__.n(primeng_button__WEBPACK_IMPORTED_MODULE_18__);
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! primeng/tabview */ "./node_modules/primeng/tabview.js");
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_19___default = /*#__PURE__*/__webpack_require__.n(primeng_tabview__WEBPACK_IMPORTED_MODULE_19__);
/* harmony import */ var primeng_toolbar__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! primeng/toolbar */ "./node_modules/primeng/toolbar.js");
/* harmony import */ var primeng_toolbar__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(primeng_toolbar__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var primeng_menubar__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! primeng/menubar */ "./node_modules/primeng/menubar.js");
/* harmony import */ var primeng_menubar__WEBPACK_IMPORTED_MODULE_21___default = /*#__PURE__*/__webpack_require__.n(primeng_menubar__WEBPACK_IMPORTED_MODULE_21__);
/* harmony import */ var primeng_panelmenu__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! primeng/panelmenu */ "./node_modules/primeng/panelmenu.js");
/* harmony import */ var primeng_panelmenu__WEBPACK_IMPORTED_MODULE_22___default = /*#__PURE__*/__webpack_require__.n(primeng_panelmenu__WEBPACK_IMPORTED_MODULE_22__);
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! primeng/slider */ "./node_modules/primeng/slider.js");
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(primeng_slider__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var primeng_inputswitch__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! primeng/inputswitch */ "./node_modules/primeng/inputswitch.js");
/* harmony import */ var primeng_inputswitch__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(primeng_inputswitch__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! primeng/tooltip */ "./node_modules/primeng/tooltip.js");
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(primeng_tooltip__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! primeng/overlaypanel */ "./node_modules/primeng/overlaypanel.js");
/* harmony import */ var primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! primeng/growl */ "./node_modules/primeng/growl.js");
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(primeng_growl__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! primeng/panel */ "./node_modules/primeng/panel.js");
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(primeng_panel__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! primeng/menu */ "./node_modules/primeng/menu.js");
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(primeng_menu__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! primeng/dialog */ "./node_modules/primeng/dialog.js");
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(primeng_dialog__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! primeng/sidebar */ "./node_modules/primeng/sidebar.js");
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(primeng_sidebar__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! primeng/tieredmenu */ "./node_modules/primeng/tieredmenu.js");
/* harmony import */ var primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! primeng/scrollpanel */ "./node_modules/primeng/scrollpanel.js");
/* harmony import */ var primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var primeng_calendar__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! primeng/calendar */ "./node_modules/primeng/calendar.js");
/* harmony import */ var primeng_calendar__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(primeng_calendar__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var primeng_selectbutton__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! primeng/selectbutton */ "./node_modules/primeng/selectbutton.js");
/* harmony import */ var primeng_selectbutton__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(primeng_selectbutton__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! primeng/radiobutton */ "./node_modules/primeng/radiobutton.js");
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(primeng_radiobutton__WEBPACK_IMPORTED_MODULE_37__);
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_38__);
/* harmony import */ var angular2_cookie_law__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! angular2-cookie-law */ "./node_modules/angular2-cookie-law/fesm5/angular2-cookie-law.js");
/* harmony import */ var primeng_progressspinner__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! primeng/progressspinner */ "./node_modules/primeng/progressspinner.js");
/* harmony import */ var primeng_progressspinner__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(primeng_progressspinner__WEBPACK_IMPORTED_MODULE_40__);
/* harmony import */ var _user_management_home_home_component__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./user-management/home/home.component */ "./src/app/user-management/home/home.component.ts");
/* harmony import */ var _user_management_privacyPolicy_privacyPolicy_component__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./user-management/privacyPolicy/privacyPolicy.component */ "./src/app/user-management/privacyPolicy/privacyPolicy.component.ts");
/* harmony import */ var primeng_tabmenu__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! primeng/tabmenu */ "./node_modules/primeng/tabmenu.js");
/* harmony import */ var primeng_tabmenu__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(primeng_tabmenu__WEBPACK_IMPORTED_MODULE_43__);
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! primeng/checkbox */ "./node_modules/primeng/checkbox.js");
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(primeng_checkbox__WEBPACK_IMPORTED_MODULE_44__);
/* harmony import */ var primeng_fieldset__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! primeng/fieldset */ "./node_modules/primeng/fieldset.js");
/* harmony import */ var primeng_fieldset__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(primeng_fieldset__WEBPACK_IMPORTED_MODULE_45__);
/* harmony import */ var _user_management_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./user-management/forgot-password/forgot-password.component */ "./src/app/user-management/forgot-password/forgot-password.component.ts");
/* harmony import */ var _user_management_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./user-management/reset-password/reset-password.component */ "./src/app/user-management/reset-password/reset-password.component.ts");
/* harmony import */ var _user_management_imprint_imprint_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./user-management/imprint/imprint.component */ "./src/app/user-management/imprint/imprint.component.ts");
/* harmony import */ var _skeleton_unauthorized_unauthorized_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./skeleton/unauthorized/unauthorized.component */ "./src/app/skeleton/unauthorized/unauthorized.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// Angular Modules




// Our created Modules


// Our Components










// ngprime modules


























/*@*/









var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_10__["AppComponent"],
                _user_management_create_user_create_user_component__WEBPACK_IMPORTED_MODULE_11__["CreateUserComponent"],
                _user_management_privacyPolicy_privacyPolicy_component__WEBPACK_IMPORTED_MODULE_42__["PrivacyPolicyComponent"],
                _acp_acp_component__WEBPACK_IMPORTED_MODULE_6__["ACPComponent"],
                _acp_user_management_user_acp_component__WEBPACK_IMPORTED_MODULE_7__["UserACPComponent"],
                _acp_policy_management_policy_acp_component__WEBPACK_IMPORTED_MODULE_8__["PolicyACPComponent"],
                _acp_log_management_logACP_component__WEBPACK_IMPORTED_MODULE_9__["LogACPComponent"],
                _user_management_home_home_component__WEBPACK_IMPORTED_MODULE_41__["HomeComponent"],
                _user_management_login_login_component__WEBPACK_IMPORTED_MODULE_12__["LoginComponent"],
                _user_management_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_46__["ForgotPasswordComponent"],
                _user_management_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_47__["ResetPasswordComponent"],
                _user_management_imprint_imprint_component__WEBPACK_IMPORTED_MODULE_48__["ImprintComponent"],
                _user_management_confirm_confirm_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmComponent"],
                _skeleton_unauthorized_unauthorized_component__WEBPACK_IMPORTED_MODULE_49__["UnauthorizedComponent"]
            ],
            imports: [
                primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_27__["OverlayPanelModule"],
                primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_34__["ScrollPanelModule"],
                primeng_sidebar__WEBPACK_IMPORTED_MODULE_32__["SidebarModule"],
                primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_33__["TieredMenuModule"],
                primeng_menu__WEBPACK_IMPORTED_MODULE_30__["MenuModule"],
                primeng_accordion__WEBPACK_IMPORTED_MODULE_16__["AccordionModule"],
                primeng_panel__WEBPACK_IMPORTED_MODULE_29__["PanelModule"],
                primeng_growl__WEBPACK_IMPORTED_MODULE_28__["GrowlModule"],
                primeng_tooltip__WEBPACK_IMPORTED_MODULE_26__["TooltipModule"],
                primeng_inputswitch__WEBPACK_IMPORTED_MODULE_25__["InputSwitchModule"],
                primeng_slider__WEBPACK_IMPORTED_MODULE_24__["SliderModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_23__["DropdownModule"],
                primeng_panelmenu__WEBPACK_IMPORTED_MODULE_22__["PanelMenuModule"],
                primeng_menubar__WEBPACK_IMPORTED_MODULE_21__["MenubarModule"],
                primeng_toolbar__WEBPACK_IMPORTED_MODULE_20__["ToolbarModule"],
                primeng_tabview__WEBPACK_IMPORTED_MODULE_19__["TabViewModule"],
                primeng_button__WEBPACK_IMPORTED_MODULE_18__["ButtonModule"],
                primeng_card__WEBPACK_IMPORTED_MODULE_17__["CardModule"],
                _app_routing_module__WEBPACK_IMPORTED_MODULE_4__["AppRoutingModule"],
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_0__["BrowserAnimationsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                _skeleton_skeleton_module__WEBPACK_IMPORTED_MODULE_13__["SkeletonModule"],
                primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_14__["ConfirmDialogModule"],
                _models_shared_module__WEBPACK_IMPORTED_MODULE_5__["SharedModule"].forRoot(),
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                primeng_dialog__WEBPACK_IMPORTED_MODULE_31__["DialogModule"],
                primeng_calendar__WEBPACK_IMPORTED_MODULE_35__["CalendarModule"],
                primeng_selectbutton__WEBPACK_IMPORTED_MODULE_36__["SelectButtonModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_23__["ListboxModule"],
                primeng_radiobutton__WEBPACK_IMPORTED_MODULE_37__["RadioButtonModule"],
                primeng_table__WEBPACK_IMPORTED_MODULE_38__["TableModule"],
                primeng_tabmenu__WEBPACK_IMPORTED_MODULE_43__["TabMenuModule"],
                primeng_checkbox__WEBPACK_IMPORTED_MODULE_44__["CheckboxModule"],
                primeng_fieldset__WEBPACK_IMPORTED_MODULE_45__["FieldsetModule"],
                angular2_cookie_law__WEBPACK_IMPORTED_MODULE_39__["CookieLawModule"],
                primeng_progressspinner__WEBPACK_IMPORTED_MODULE_40__["ProgressSpinnerModule"]
            ],
            entryComponents: [
                _acp_user_management_user_acp_component__WEBPACK_IMPORTED_MODULE_7__["UserACPComponent"],
                _acp_policy_management_policy_acp_component__WEBPACK_IMPORTED_MODULE_8__["PolicyACPComponent"],
                _acp_log_management_logACP_component__WEBPACK_IMPORTED_MODULE_9__["LogACPComponent"],
                _user_management_privacyPolicy_privacyPolicy_component__WEBPACK_IMPORTED_MODULE_42__["PrivacyPolicyComponent"],
                _user_management_login_login_component__WEBPACK_IMPORTED_MODULE_12__["LoginComponent"],
                _user_management_create_user_create_user_component__WEBPACK_IMPORTED_MODULE_11__["CreateUserComponent"],
                _user_management_forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_46__["ForgotPasswordComponent"],
                _user_management_reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_47__["ResetPasswordComponent"],
                _user_management_imprint_imprint_component__WEBPACK_IMPORTED_MODULE_48__["ImprintComponent"],
                _user_management_confirm_confirm_component__WEBPACK_IMPORTED_MODULE_15__["ConfirmComponent"],
                _skeleton_unauthorized_unauthorized_component__WEBPACK_IMPORTED_MODULE_49__["UnauthorizedComponent"]
            ],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_10__["AppComponent"]]
        }),
        __metadata("design:paramtypes", [])
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/custom-validation.ts":
/*!**************************************!*\
  !*** ./src/app/custom-validation.ts ***!
  \**************************************/
/*! exports provided: matchOtherValidator, notMatchOtherValidator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchOtherValidator", function() { return matchOtherValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "notMatchOtherValidator", function() { return notMatchOtherValidator; });
function matchOtherValidator(otherControlName) {
    var thisControl;
    var otherControl;
    return function matchOtherValidate(control) {
        if (!control.parent) {
            return null;
        }
        // Initializing the validator.
        if (!thisControl) {
            thisControl = control;
            otherControl = control.parent.get(otherControlName);
            if (!otherControl) {
                throw new Error('matchOtherValidator(): other control is not found in parent group');
            }
            otherControl.valueChanges.subscribe(function () {
                thisControl.updateValueAndValidity();
            });
        }
        if (!otherControl) {
            return null;
        }
        if (otherControl.value !== thisControl.value) {
            return {
                matchOther: true
            };
        }
        return null;
    };
}
function notMatchOtherValidator(otherControlName) {
    var thisControl;
    var otherControl;
    return function notMatchOtherValidate(control) {
        if (!control.parent) {
            return null;
        }
        //Initializing the validator
        if (!thisControl) {
            thisControl = control;
            otherControl = control.parent.get(otherControlName);
            if (!otherControl) {
                throw new Error('notMatchOtherValidator(): other control is not found in parent group');
            }
            otherControl.valueChanges.subscribe(function () {
                thisControl.updateValueAndValidity();
            });
        }
        if (!otherControl) {
            return null;
        }
        if (!(otherControl.value !== thisControl.value)) {
            return {
                notMatchOther: true
            };
        }
        return null;
    };
}


/***/ }),

/***/ "./src/app/models/backend/dataprivacyelementbackend.ts":
/*!*************************************************************!*\
  !*** ./src/app/models/backend/dataprivacyelementbackend.ts ***!
  \*************************************************************/
/*! exports provided: DataPrivacyElementBackend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataPrivacyElementBackend", function() { return DataPrivacyElementBackend; });
/**
 * This class represents a dataprivacyelement in the view of the backend
 */
var DataPrivacyElementBackend = /** @class */ (function () {
    function DataPrivacyElementBackend(objectConfig) {
        this.userId = "";
        this.priorVersion = ""; //Verweis auf die vorherige Version
        this.contextID = ""; //statt children Verweis auf Elternknoten, verdeutliche ich an diesem Beispiel
        this.title = "";
        this.descriptions = {
            before: "",
            after: "",
            submit: ""
        };
        this.children = []; //nur im frontend wichtig, wegen
        this.consentRequired = true;
        this.preChecked = false;
        this.inUse = false;
        this.id = objectConfig.id;
        this.userId = objectConfig.userId;
        this.title = objectConfig.title;
        if (objectConfig.hasOwnProperty('priorVersion'))
            this.priorVersion = objectConfig.priorVersion;
        if (objectConfig.hasOwnProperty('contextID'))
            this.contextID = objectConfig.contextID;
        if (objectConfig.descriptions.hasOwnProperty('before'))
            this.descriptions.before = objectConfig.descriptions.before;
        if (objectConfig.descriptions.hasOwnProperty('after'))
            this.descriptions.after = objectConfig.descriptions.after;
        if (objectConfig.descriptions.hasOwnProperty('submit'))
            this.descriptions.submit = objectConfig.descriptions.submit;
        if (objectConfig.hasOwnProperty('consentRequired'))
            this.consentRequired = objectConfig.consentRequired;
        if (objectConfig.hasOwnProperty('preChecked'))
            this.preChecked = objectConfig.preChecked;
        if (objectConfig.hasOwnProperty('inUse'))
            this.inUse = objectConfig.inUse;
        if (objectConfig.hasOwnProperty('validFrom'))
            this.validFrom = new Date(objectConfig.validFrom);
    }
    DataPrivacyElementBackend.prototype.addChild = function (child) {
        this.children.push(child);
    };
    return DataPrivacyElementBackend;
}());



/***/ }),

/***/ "./src/app/models/backend/platform.ts":
/*!********************************************!*\
  !*** ./src/app/models/backend/platform.ts ***!
  \********************************************/
/*! exports provided: Platform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Platform", function() { return Platform; });
/**
 * @ author Chinaedu Onwukwe
 * This class represents a platform in the view of the backend
 */
var Platform = /** @class */ (function () {
    function Platform(name, ip, port, username, password, platformId, userId, projectId, externalPlatformId) {
        this.name = name;
        this.ip = ip;
        this.port = port;
        this.username = username;
        this.password = password;
        this.platformId = platformId;
        this.userId = userId;
        this.projectId = projectId;
        this.externalPlatformId = externalPlatformId;
    }
    return Platform;
}());



/***/ }),

/***/ "./src/app/models/database/dashboard.ts":
/*!**********************************************!*\
  !*** ./src/app/models/database/dashboard.ts ***!
  \**********************************************/
/*! exports provided: DashboardDB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardDB", function() { return DashboardDB; });
var DashboardDB = /** @class */ (function () {
    /**
     * Constructor to initialize all parameters
     * @param id The unique identifier of a dashboard
     * @param name The name of the dashboard
     * @param sheets One or multiple {@link SheetDB#id}
     */
    function DashboardDB(id, name, sheets) {
        this.id = id;
        this.name = name;
        this.sheets = sheets;
    }
    return DashboardDB;
}());



/***/ }),

/***/ "./src/app/models/database/project.ts":
/*!********************************************!*\
  !*** ./src/app/models/database/project.ts ***!
  \********************************************/
/*! exports provided: ProjectDB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProjectDB", function() { return ProjectDB; });
var ProjectDB = /** @class */ (function () {
    /**
     * Constructor to initialize all paramters.
     * @param id The unique identifier for a project
     * @param name The name of a project
     * @param theme The theme of a project
     * @param dashboards One or multiple {@link DashboardDB}
     */
    function ProjectDB(id, name, theme, dashboards) {
        this.id = id;
        this.name = name;
        this.theme = theme;
        this.dashboards = dashboards;
    }
    return ProjectDB;
}());



/***/ }),

/***/ "./src/app/models/database/sheet.ts":
/*!******************************************!*\
  !*** ./src/app/models/database/sheet.ts ***!
  \******************************************/
/*! exports provided: SheetDB */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SheetDB", function() { return SheetDB; });
var SheetDB = /** @class */ (function () {
    /**
     * Constructor to initialize all parameters.
     * @param id A unique id to identify a sheet
     * @param name The name of a sheet
     * @param widgetIds An array with the {@link WidgetDB} (s)
     * @param widgets An array with the {@link WidgetDB#id} of the inherited widgets
     */
    function SheetDB(id, name, widgets) {
        this.id = id;
        this.name = name;
        this.widgets = widgets;
    }
    return SheetDB;
}());



/***/ }),

/***/ "./src/app/models/frontend/barchartwidget.ts":
/*!***************************************************!*\
  !*** ./src/app/models/frontend/barchartwidget.ts ***!
  \***************************************************/
/*! exports provided: BarChartWidget, Calculation, Frequency */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BarChartWidget", function() { return BarChartWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calculation", function() { return Calculation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Frequency", function() { return Frequency; });
/* harmony import */ var _chartwidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartwidget */ "./src/app/models/frontend/chartwidget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BarChartWidget = /** @class */ (function (_super) {
    __extends(BarChartWidget, _super);
    function BarChartWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isMonoVis, isNumerical, calculationType, frequencyType, axesOptions, numberOfValues, startDate, endDate, interval) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isMonoVis, numberOfValues, startDate, endDate, interval) || this;
        _this.axesOptions = axesOptions;
        _this.calculationType = calculationType;
        _this.isNumerical = isNumerical;
        _this.frequencyType = frequencyType;
        return _this;
    }
    return BarChartWidget;
}(_chartwidget__WEBPACK_IMPORTED_MODULE_0__["ChartWidget"]));

var Calculation;
(function (Calculation) {
    Calculation["Avg"] = "average";
    Calculation["Min"] = "minimum";
    Calculation["Max"] = "maximum";
})(Calculation || (Calculation = {}));
var Frequency;
(function (Frequency) {
    Frequency["Count"] = "count";
    Frequency["Percentage"] = "percentage";
})(Frequency || (Frequency = {}));


/***/ }),

/***/ "./src/app/models/frontend/bubbleChartDeviceEntity.ts":
/*!************************************************************!*\
  !*** ./src/app/models/frontend/bubbleChartDeviceEntity.ts ***!
  \************************************************************/
/*! exports provided: BubbleChartDeviceEntity, Calculation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BubbleChartDeviceEntity", function() { return BubbleChartDeviceEntity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calculation", function() { return Calculation; });
var BubbleChartDeviceEntity = /** @class */ (function () {
    function BubbleChartDeviceEntity(entityType, color, label, x, y, r, location) {
        this.color = '';
        this.label = '';
        this.color = color;
        this.label = label;
        this.x = x;
        this.y = y;
        this.r = r;
        this.location = location;
        this.entityType = entityType;
    }
    return BubbleChartDeviceEntity;
}());

var Calculation;
(function (Calculation) {
    Calculation["Avg"] = "average";
    Calculation["Min"] = "minimum";
    Calculation["Max"] = "maximum";
})(Calculation || (Calculation = {}));


/***/ }),

/***/ "./src/app/models/frontend/bubblechartwidget.ts":
/*!******************************************************!*\
  !*** ./src/app/models/frontend/bubblechartwidget.ts ***!
  \******************************************************/
/*! exports provided: BubbleChartWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BubbleChartWidget", function() { return BubbleChartWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var BubbleChartWidget = /** @class */ (function (_super) {
    __extends(BubbleChartWidget, _super);
    function BubbleChartWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, startDate, endDate, locations, colorPalette) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.deviceEntities = [];
        _this.chartType = 'bubble';
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.startDate = startDate;
        _this.endDate = endDate;
        _this.locations = locations;
        _this.colorPalette = colorPalette;
        return _this;
    }
    return BubbleChartWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/chartDeviceEntity.ts":
/*!******************************************************!*\
  !*** ./src/app/models/frontend/chartDeviceEntity.ts ***!
  \******************************************************/
/*! exports provided: ChartDeviceEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChartDeviceEntity", function() { return ChartDeviceEntity; });
/* harmony import */ var _deviceEntity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./deviceEntity */ "./src/app/models/frontend/deviceEntity.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ChartDeviceEntity = /** @class */ (function (_super) {
    __extends(ChartDeviceEntity, _super);
    function ChartDeviceEntity(deviceId, entityId, lineType, fillArea, showLine, color, label, unit, axis) {
        var _this = _super.call(this, deviceId, entityId) || this;
        _this.lineType = '';
        // to determine if line should be shown or only dots should be visualized
        _this.showLine = true;
        // to determin if area under line should be filled or not
        _this.fillArea = true;
        // color of line
        _this.color = '';
        // label of line
        _this.label = '';
        // unit of line
        _this.unit = '';
        _this.axis = '';
        _this.lineType = lineType;
        _this.fillArea = fillArea;
        _this.showLine = showLine;
        _this.color = color;
        _this.label = label;
        _this.unit = unit;
        _this.axis = axis;
        return _this;
    }
    return ChartDeviceEntity;
}(_deviceEntity__WEBPACK_IMPORTED_MODULE_0__["DeviceEntity"]));



/***/ }),

/***/ "./src/app/models/frontend/chartwidget.ts":
/*!************************************************!*\
  !*** ./src/app/models/frontend/chartwidget.ts ***!
  \************************************************/
/*! exports provided: ChartWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChartWidget", function() { return ChartWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a chart base widget
 */

var ChartWidget = /** @class */ (function (_super) {
    __extends(ChartWidget, _super);
    function ChartWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isMonoVis, numberOfValues, startDate, endDate, interval) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        /**
         * An array with the ids of the devices and
         * its sensors which are visualized
         */
        _this.deviceEntities = [];
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.isMonoVis = isMonoVis;
        _this.numberOfValues = numberOfValues;
        _this.startDate = startDate;
        _this.endDate = endDate;
        _this.interval = interval;
        return _this;
    }
    return ChartWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/dashboard.ts":
/*!**********************************************!*\
  !*** ./src/app/models/frontend/dashboard.ts ***!
  \**********************************************/
/*! exports provided: Dashboard */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Dashboard", function() { return Dashboard; });
var Dashboard = /** @class */ (function () {
    /**
     * Constructor to initialize all parameters
     * @param id The unique identifier of a dashboard
     * @param name The name of the dashboard
     * @param sheets One or multiple {@link Sheet#id}
     */
    function Dashboard(id, name, sheets) {
        this.id = id;
        this.name = name;
        this.sheets = sheets;
    }
    return Dashboard;
}());



/***/ }),

/***/ "./src/app/models/frontend/deviceEntity.ts":
/*!*************************************************!*\
  !*** ./src/app/models/frontend/deviceEntity.ts ***!
  \*************************************************/
/*! exports provided: DeviceEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceEntity", function() { return DeviceEntity; });
var DeviceEntity = /** @class */ (function () {
    function DeviceEntity(deviceId, entityId) {
        this.deviceId = '';
        this.entityId = '';
        this.entityId = entityId;
        this.deviceId = deviceId;
    }
    return DeviceEntity;
}());



/***/ }),

/***/ "./src/app/models/frontend/devicecontrolwidget.ts":
/*!********************************************************!*\
  !*** ./src/app/models/frontend/devicecontrolwidget.ts ***!
  \********************************************************/
/*! exports provided: DeviceControlWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceControlWidget", function() { return DeviceControlWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a base device control widget.
 * It can control a the status of device (e.g. light ON or OFF)
 */

var DeviceControlWidget = /** @class */ (function (_super) {
    __extends(DeviceControlWidget, _super);
    function DeviceControlWidget(id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.deviceId = deviceId;
        _this.entityId = entityId;
        _this.controlPosition = controlPosition;
        _this.fontSize = fontSize;
        _this.icon = icon;
        return _this;
    }
    return DeviceControlWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/doughnutchartwidget.ts":
/*!********************************************************!*\
  !*** ./src/app/models/frontend/doughnutchartwidget.ts ***!
  \********************************************************/
/*! exports provided: Doughnutchartwidget, DoughnutChartDeviceEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Doughnutchartwidget", function() { return Doughnutchartwidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoughnutChartDeviceEntity", function() { return DoughnutChartDeviceEntity; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _deviceEntity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./deviceEntity */ "./src/app/models/frontend/deviceEntity.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();


var Doughnutchartwidget = /** @class */ (function (_super) {
    __extends(Doughnutchartwidget, _super);
    function Doughnutchartwidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isCircleFull, distribution, colorPalette, startDate, endDate) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.isCircleFull = isCircleFull;
        _this.distribution = distribution;
        _this.startDate = startDate;
        _this.endDate = endDate;
        _this.colorPalette = colorPalette;
        return _this;
    }
    return Doughnutchartwidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));

var DoughnutChartDeviceEntity = /** @class */ (function (_super) {
    __extends(DoughnutChartDeviceEntity, _super);
    function DoughnutChartDeviceEntity(deviceId, entityId, label, unit) {
        var _this = _super.call(this, deviceId, entityId) || this;
        _this.label = label;
        _this.unit = unit;
        return _this;
    }
    return DoughnutChartDeviceEntity;
}(_deviceEntity__WEBPACK_IMPORTED_MODULE_1__["DeviceEntity"]));



/***/ }),

/***/ "./src/app/models/frontend/fieldvalue.ts":
/*!***********************************************!*\
  !*** ./src/app/models/frontend/fieldvalue.ts ***!
  \***********************************************/
/*! exports provided: Fieldvalue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Fieldvalue", function() { return Fieldvalue; });
/**
 * @author Chinaedu Onwukwe
 * This class helps to communicate with the database
 */
var Fieldvalue = /** @class */ (function () {
    function Fieldvalue(field, value) {
        this.field = field;
        this.value = value;
    }
    return Fieldvalue;
}());



/***/ }),

/***/ "./src/app/models/frontend/historyanomalywidget.ts":
/*!*********************************************************!*\
  !*** ./src/app/models/frontend/historyanomalywidget.ts ***!
  \*********************************************************/
/*! exports provided: HistoryAnomalyWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HistoryAnomalyWidget", function() { return HistoryAnomalyWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author Yasin Kaymak
 * This class models a history chart widget to display history data
 */

var HistoryAnomalyWidget = /** @class */ (function (_super) {
    __extends(HistoryAnomalyWidget, _super);
    function HistoryAnomalyWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, axesOptions, startDate, endDate, interval) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.startDate = startDate;
        _this.endDate = endDate;
        _this.interval = interval;
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.axesOptions = axesOptions;
        return _this;
    }
    return HistoryAnomalyWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/linechartwidget.ts":
/*!****************************************************!*\
  !*** ./src/app/models/frontend/linechartwidget.ts ***!
  \****************************************************/
/*! exports provided: LineChartWidget, AxesOptions */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineChartWidget", function() { return LineChartWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AxesOptions", function() { return AxesOptions; });
/* harmony import */ var _chartwidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chartwidget */ "./src/app/models/frontend/chartwidget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var LineChartWidget = /** @class */ (function (_super) {
    __extends(LineChartWidget, _super);
    function LineChartWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isMonoVis, isRealtime, isTimeBased, axesOptions, numberOfValues, startDate, endDate, interval) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, isMonoVis, numberOfValues, startDate, endDate, interval) || this;
        _this.axesOptions = axesOptions;
        _this.isMonoVis = isMonoVis;
        _this.isTimeBased = isTimeBased;
        _this.isRealtime = isRealtime;
        return _this;
    }
    return LineChartWidget;
}(_chartwidget__WEBPACK_IMPORTED_MODULE_0__["ChartWidget"]));

var AxesOptions = /** @class */ (function () {
    function AxesOptions(xLabels, yLabels, xLabelVisible, yLabelVisible) {
        this.xLabel = xLabels;
        this.yLabel = yLabels;
        this.xLabelVisible = xLabelVisible;
        this.yLabelVisible = yLabelVisible;
    }
    return AxesOptions;
}());



/***/ }),

/***/ "./src/app/models/frontend/polarareachartwidget.ts":
/*!*********************************************************!*\
  !*** ./src/app/models/frontend/polarareachartwidget.ts ***!
  \*********************************************************/
/*! exports provided: PolarAreaChartWidget, Distribution, SensorType, ActuatorType, Calculation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolarAreaChartWidget", function() { return PolarAreaChartWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Distribution", function() { return Distribution; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SensorType", function() { return SensorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActuatorType", function() { return ActuatorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Calculation", function() { return Calculation; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var PolarAreaChartWidget = /** @class */ (function (_super) {
    __extends(PolarAreaChartWidget, _super);
    function PolarAreaChartWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, startDate, endDate, calculationType, deviceType, location, colorPalette) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.deviceEntities = [];
        _this.chartType = 'polarArea';
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.startDate = startDate;
        _this.endDate = endDate;
        _this.calculationType = calculationType;
        _this.deviceType = deviceType;
        _this.location = location;
        _this.colorPalette = colorPalette;
        return _this;
    }
    return PolarAreaChartWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));

var Distribution;
(function (Distribution) {
    Distribution["TimeInterval"] = "timeInterval";
    Distribution["Location"] = "location";
    Distribution["Occupant"] = "occupant";
})(Distribution || (Distribution = {}));
var SensorType;
(function (SensorType) {
    SensorType["Motion"] = "motion";
    SensorType["Temperature"] = "temperature";
    SensorType["Humidity"] = "humidity";
    SensorType["Pressure"] = "pressure";
    SensorType["Energy"] = "energy";
    SensorType["Luminance"] = "luminance";
    SensorType["Mass"] = "mass";
    SensorType["Power"] = "power";
    SensorType["Acceleration"] = "acceleration";
    SensorType["Gyroscope"] = "gyrocope";
    SensorType["Length"] = "length";
    SensorType["Volume"] = "volume";
    SensorType["Acoustic"] = "acoustic";
    SensorType["LightIntensity"] = "light intensity";
    SensorType["Magnetic"] = "magnetic";
    SensorType["Position"] = "position";
    SensorType["Force"] = "force";
    SensorType["Flow"] = "flow";
})(SensorType || (SensorType = {}));
var ActuatorType;
(function (ActuatorType) {
    ActuatorType["Switch"] = "switch";
    ActuatorType["Dimmer"] = "dimmer";
    ActuatorType["Color"] = "color";
    ActuatorType["Command"] = "command";
})(ActuatorType || (ActuatorType = {}));
var Calculation;
(function (Calculation) {
    Calculation["Avg"] = "average";
    Calculation["Min"] = "minimum";
    Calculation["Max"] = "maximum";
})(Calculation || (Calculation = {}));


/***/ }),

/***/ "./src/app/models/frontend/project.ts":
/*!********************************************!*\
  !*** ./src/app/models/frontend/project.ts ***!
  \********************************************/
/*! exports provided: Project */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Project", function() { return Project; });
var Project = /** @class */ (function () {
    /**
     * Constructor to initialize all paramters.
     * @param id The unique identifier for a project
     * @param name The name of a project
     * @param theme The theme of a project
     * @param dashboards One or multiple {@link Dashboard}
     */
    function Project(id, name, theme, dashboards) {
        this.id = id;
        this.name = name;
        this.theme = theme;
        this.dashboards = dashboards;
    }
    return Project;
}());



/***/ }),

/***/ "./src/app/models/frontend/realtimeanomalywidget.ts":
/*!**********************************************************!*\
  !*** ./src/app/models/frontend/realtimeanomalywidget.ts ***!
  \**********************************************************/
/*! exports provided: RealtimeAnomalyWidget, AnomalyEntity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RealtimeAnomalyWidget", function() { return RealtimeAnomalyWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnomalyEntity", function() { return AnomalyEntity; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var RealtimeAnomalyWidget = /** @class */ (function (_super) {
    __extends(RealtimeAnomalyWidget, _super);
    function RealtimeAnomalyWidget(id, name, additionalInfo, position, isDeveloped, type, deviceEntities, chartType, axesOptions, numberOfValues) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.axesOptions = axesOptions;
        _this.deviceEntities = deviceEntities;
        _this.chartType = chartType;
        _this.numberOfValues = numberOfValues;
        return _this;
    }
    return RealtimeAnomalyWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));

var AnomalyEntity = /** @class */ (function () {
    function AnomalyEntity(deviceId, entityId, label, unit, axis) {
        this.deviceId = deviceId;
        this.entityId = entityId;
        this.label = label;
        this.unit = unit;
        this.axis = axis;
    }
    return AnomalyEntity;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/condition.ts":
/*!**********************************************************!*\
  !*** ./src/app/models/frontend/rule_module/condition.ts ***!
  \**********************************************************/
/*! exports provided: Condition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Condition", function() { return Condition; });
var Condition = /** @class */ (function () {
    function Condition() {
        this.ID = 0;
        this.command = '';
        this.state = ''; // ON or OFF
        this.time = '';
        // for example: ["", "TUE", "", "", "FRI", "SAT", "SUN"] for save value is needed
        this.days = ['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'];
        this.location = '';
        this.weather = '';
        this.activity = '';
        this.trafficsituation = '';
        this.temperature = 0;
        this.operator = '';
        this.telephonenumber = 0;
        this.email = '';
        this.communicationtype = '';
        this.notification = '';
        this.physical = false;
        this.servicetype = '';
        this.entry = '';
        this.living = false;
        this.human = false;
        this.itemtype = '';
        this.place = '';
    }
    return Condition;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/datanotification.ts":
/*!*****************************************************************!*\
  !*** ./src/app/models/frontend/rule_module/datanotification.ts ***!
  \*****************************************************************/
/*! exports provided: DataNotification */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataNotification", function() { return DataNotification; });
var DataNotification = /** @class */ (function () {
    function DataNotification() {
        this.ID = 0;
    }
    return DataNotification;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/rule.ts":
/*!*****************************************************!*\
  !*** ./src/app/models/frontend/rule_module/rule.ts ***!
  \*****************************************************/
/*! exports provided: Rule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Rule", function() { return Rule; });
// Rule module for matching with JSON Object  from frontend received by backend
var Rule = /** @class */ (function () {
    function Rule() {
        this.ID = 0;
        this.userId = '';
        this.platformID = ''; // for save value is needed
        this.projectID = ''; // for save value is needed
    }
    Rule.prototype.setRuleData = function (rule) {
        this.ID = rule.ID;
        this.name = rule.name;
        this.description = rule.description;
        this.notify = rule.notify;
        this.active = rule.active;
        this.rootTGID = rule.rootTGID;
        this.ruleActions = rule.ruleActions;
        this.platformID = rule.platformID;
        this.projectID = rule.projectID;
        this.userId = rule.userId;
    };
    return Rule;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/ruleaction.ts":
/*!***********************************************************!*\
  !*** ./src/app/models/frontend/rule_module/ruleaction.ts ***!
  \***********************************************************/
/*! exports provided: RuleAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleAction", function() { return RuleAction; });
/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./condition */ "./src/app/models/frontend/rule_module/condition.ts");

// Action template for matching with JSON Object  from frontend received by backend
var RuleAction = /** @class */ (function () {
    function RuleAction() {
        this.ID = 0;
        // for save value is needed
        this.deviceID = '7_openHabknx:device:38d73ce2';
        // for save value is needed
        this.sensorID = 'knx:device:38d73ce2:schlafzimmerlicht_switch';
        this.condition = new _condition__WEBPACK_IMPORTED_MODULE_0__["Condition"]();
    }
    return RuleAction;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/trigger.ts":
/*!********************************************************!*\
  !*** ./src/app/models/frontend/rule_module/trigger.ts ***!
  \********************************************************/
/*! exports provided: Trigger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Trigger", function() { return Trigger; });
/* harmony import */ var _condition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./condition */ "./src/app/models/frontend/rule_module/condition.ts");

// Trigger template for matching with JSON Object  from frontend received by backend
var Trigger = /** @class */ (function () {
    function Trigger() {
        this.ID = 0;
        this.name = ''; // to save trigger this value has not to be null or ''
        this.triggerclass = '';
        this.deviceID = ''; // to save trigger this value has not to be null or ''
        this.sensorID = ''; // to save trigger this value has not to be null or ''
        this.condition = new _condition__WEBPACK_IMPORTED_MODULE_0__["Condition"]();
    }
    return Trigger;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/triggergroup.ts":
/*!*************************************************************!*\
  !*** ./src/app/models/frontend/rule_module/triggergroup.ts ***!
  \*************************************************************/
/*! exports provided: Triggergroup */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Triggergroup", function() { return Triggergroup; });
/* harmony import */ var _trigger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./trigger */ "./src/app/models/frontend/rule_module/trigger.ts");

// Triggergroup template for matching with JSON Object  from frontend received by backend
var Triggergroup = /** @class */ (function () {
    function Triggergroup() {
        this.name = 'default-name'; // for save value is needed
        this.operator = ''; // OR or AND
        this.leftchild = 0;
        this.rightchild = 0;
        this.trigger = new _trigger__WEBPACK_IMPORTED_MODULE_0__["Trigger"]();
    }
    Triggergroup.prototype.getTriggerGroup = function () {
        return this;
    };
    return Triggergroup;
}());



/***/ }),

/***/ "./src/app/models/frontend/rule_module/weekdays.ts":
/*!*********************************************************!*\
  !*** ./src/app/models/frontend/rule_module/weekdays.ts ***!
  \*********************************************************/
/*! exports provided: weekdays */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "weekdays", function() { return weekdays; });
var weekdays = [
    {
        pos: 0,
        value: 'MON',
        label: 'Monday'
    }, {
        pos: 1,
        value: 'TUE',
        label: 'Tuesday'
    }, {
        pos: 2,
        value: 'WED',
        label: 'Wednesday'
    }, {
        pos: 3,
        value: 'THU',
        label: 'Thursday'
    }, {
        pos: 4,
        value: 'FRI',
        label: 'Friday'
    }, {
        pos: 5,
        value: 'SAT',
        label: 'Saturday'
    }, {
        pos: 6,
        value: 'SUN',
        label: 'Sunday'
    }
];


/***/ }),

/***/ "./src/app/models/frontend/rulemanagementwidget.ts":
/*!*********************************************************!*\
  !*** ./src/app/models/frontend/rulemanagementwidget.ts ***!
  \*********************************************************/
/*! exports provided: RuleManagementWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleManagementWidget", function() { return RuleManagementWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var RuleManagementWidget = /** @class */ (function (_super) {
    __extends(RuleManagementWidget, _super);
    function RuleManagementWidget(id, name, additionalInfo, position, isDeveloped, type) {
        return _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
    }
    return RuleManagementWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/rulenotificationwidget.ts":
/*!***********************************************************!*\
  !*** ./src/app/models/frontend/rulenotificationwidget.ts ***!
  \***********************************************************/
/*! exports provided: RuleNotificationWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleNotificationWidget", function() { return RuleNotificationWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var RuleNotificationWidget = /** @class */ (function (_super) {
    __extends(RuleNotificationWidget, _super);
    function RuleNotificationWidget(id, name, additionalInfo, position, isDeveloped, type) {
        return _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
    }
    return RuleNotificationWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/rulesharingwidget.ts":
/*!******************************************************!*\
  !*** ./src/app/models/frontend/rulesharingwidget.ts ***!
  \******************************************************/
/*! exports provided: RuleSharingWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleSharingWidget", function() { return RuleSharingWidget; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var RuleSharingWidget = /** @class */ (function (_super) {
    __extends(RuleSharingWidget, _super);
    function RuleSharingWidget(id, name, additionalInfo, position, isDeveloped, type) {
        return _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
    }
    return RuleSharingWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));



/***/ }),

/***/ "./src/app/models/frontend/sheet.ts":
/*!******************************************!*\
  !*** ./src/app/models/frontend/sheet.ts ***!
  \******************************************/
/*! exports provided: Sheet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sheet", function() { return Sheet; });
var Sheet = /** @class */ (function () {
    /**
     * Constructor to initialize all parameters.
     * @param id A unique id to identify a sheet
     * @param name The name of a sheet
     * @param widgetIds An array with the {@link Widget} (s)
     * @param widgets An array with the {@link Widget#id} of the inherited widgets
     */
    function Sheet(id, name, widgets) {
        this.id = id;
        this.name = name;
        this.widgets = widgets;
    }
    return Sheet;
}());



/***/ }),

/***/ "./src/app/models/frontend/sliderwidget.ts":
/*!*************************************************!*\
  !*** ./src/app/models/frontend/sliderwidget.ts ***!
  \*************************************************/
/*! exports provided: SliderWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliderWidget", function() { return SliderWidget; });
/* harmony import */ var _devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./devicecontrolwidget */ "./src/app/models/frontend/devicecontrolwidget.ts");
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a toggle widget.
 * It can control a the status of device (e.g. light to 70%) by a slider.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var SliderWidget = /** @class */ (function (_super) {
    __extends(SliderWidget, _super);
    function SliderWidget(id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon, value, minValue, maxValue) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon) || this;
        _this.value = value;
        _this.minValue = minValue;
        _this.maxValue = maxValue;
        return _this;
    }
    return SliderWidget;
}(_devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__["DeviceControlWidget"]));



/***/ }),

/***/ "./src/app/models/frontend/statewidget.ts":
/*!************************************************!*\
  !*** ./src/app/models/frontend/statewidget.ts ***!
  \************************************************/
/*! exports provided: StateWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateWidget", function() { return StateWidget; });
/* harmony import */ var _devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./devicecontrolwidget */ "./src/app/models/frontend/devicecontrolwidget.ts");
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a state widget.
 * It can control the status of an entity (e.g. light color to green or blue or pink) by a selector.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var StateWidget = /** @class */ (function (_super) {
    __extends(StateWidget, _super);
    function StateWidget(id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon, value) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon) || this;
        _this.value = value;
        return _this;
    }
    return StateWidget;
}(_devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__["DeviceControlWidget"]));



/***/ }),

/***/ "./src/app/models/frontend/togglewidget.ts":
/*!*************************************************!*\
  !*** ./src/app/models/frontend/togglewidget.ts ***!
  \*************************************************/
/*! exports provided: ToggleWidget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleWidget", function() { return ToggleWidget; });
/* harmony import */ var _devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./devicecontrolwidget */ "./src/app/models/frontend/devicecontrolwidget.ts");
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a toggle widget.
 * It can control a the status of device (e.g. light ON or OFF) by a switch.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

var ToggleWidget = /** @class */ (function (_super) {
    __extends(ToggleWidget, _super);
    function ToggleWidget(id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon, value, toggleLabelOn, toggleLabelOff) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, controlPosition, fontSize, icon) || this;
        _this.value = value;
        _this.toggleLabelOn = toggleLabelOn;
        _this.toggleLabelOff = toggleLabelOff;
        return _this;
    }
    return ToggleWidget;
}(_devicecontrolwidget__WEBPACK_IMPORTED_MODULE_0__["DeviceControlWidget"]));



/***/ }),

/***/ "./src/app/models/frontend/user.ts":
/*!*****************************************!*\
  !*** ./src/app/models/frontend/user.ts ***!
  \*****************************************/
/*! exports provided: User */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "User", function() { return User; });
/**
 * This class represents a user
 */
var User = /** @class */ (function () {
    function User(id, role, projectId) {
        /**
         * Ids of the user's {@link Project} (s)
         */
        this.projects = [];
        this.id = id;
        this.role = role;
        this.projects.push(projectId);
    }
    return User;
}());



/***/ }),

/***/ "./src/app/models/frontend/valueviewwidget.ts":
/*!****************************************************!*\
  !*** ./src/app/models/frontend/valueviewwidget.ts ***!
  \****************************************************/
/*! exports provided: ValueViewWidget, EntityType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValueViewWidget", function() { return ValueViewWidget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EntityType", function() { return EntityType; });
/* harmony import */ var _widget__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./widget */ "./src/app/models/frontend/widget.ts");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This class models a base device control widget.
 * It can control a the status of device (e.g. light ON or OFF)
 */

var ValueViewWidget = /** @class */ (function (_super) {
    __extends(ValueViewWidget, _super);
    function ValueViewWidget(id, name, additionalInfo, position, isDeveloped, type, deviceId, entityId, fontSize, entityType, controlPosition) {
        var _this = _super.call(this, id, name, additionalInfo, position, isDeveloped, type) || this;
        _this.deviceId = deviceId;
        _this.entityId = entityId;
        _this.fontSize = fontSize;
        _this.entityType = entityType;
        _this.controlPosition = controlPosition;
        return _this;
    }
    return ValueViewWidget;
}(_widget__WEBPACK_IMPORTED_MODULE_0__["Widget"]));

/**
 * This enum represents what type of entity should be represented.
 */
var EntityType;
(function (EntityType) {
    EntityType["action"] = "action";
    EntityType["sensor"] = "sensor";
})(EntityType || (EntityType = {}));


/***/ }),

/***/ "./src/app/models/frontend/widget.ts":
/*!*******************************************!*\
  !*** ./src/app/models/frontend/widget.ts ***!
  \*******************************************/
/*! exports provided: Widget, WidgetType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Widget", function() { return Widget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WidgetType", function() { return WidgetType; });
var Widget = /** @class */ (function () {
    function Widget(id, name, additionalInfo, position, isDeveloped, type) {
        this.id = id;
        this.name = name;
        this.additionalInfo = additionalInfo;
        this.position = position;
        this.isDeveloped = isDeveloped;
        this.type = type;
    }
    return Widget;
}());

/**
 * This class lists all available types of widgets ClickDigital offers.
 */
var WidgetType;
(function (WidgetType) {
    WidgetType["ruleView"] = "RuleViewWidget";
    WidgetType["tableView"] = "TableViewWidget";
    WidgetType["toggleDeviceControl"] = "ToggleControlWidget";
    WidgetType["sliderDeviceControl"] = "SliderControlWidget";
    WidgetType["stateDeviceControl"] = "StateWidget";
    WidgetType["lineChartVisualization"] = "LineChartWidget";
    WidgetType["barChartVisualization"] = "BarChartWidget";
    WidgetType["bubbleChartVisualization"] = "BubbleChartWidget";
    WidgetType["doughnutChartVisualization"] = "DoughnutChartWidget";
    WidgetType["polarAreaChartVisualization"] = "PolarAreaChartWidget";
    WidgetType["realtimeValueVisualization"] = "RealtimeValueWidget";
    WidgetType["deviceControl"] = "DeviceControlWidget";
    WidgetType["deleteDevice"] = "DeleteDeviceWidget";
    WidgetType["addDevice"] = "AddDeviceWidget";
    WidgetType["ruleManagementView"] = "RuleManagementViewWidget";
    WidgetType["ruleNotificationView"] = "RuleNotificationViewWidget";
    WidgetType["ruleSharingViewWidget"] = "RuleSharingViewWidget";
    WidgetType["realtimeAnomaly"] = "RealtimeAnomalyWidget";
    WidgetType["historyAnomaly"] = "HistoryAnomalyWidget";
})(WidgetType || (WidgetType = {}));


/***/ }),

/***/ "./src/app/models/shared.module.ts":
/*!*****************************************!*\
  !*** ./src/app/models/shared.module.ts ***!
  \*****************************************/
/*! exports provided: SharedModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharedModule", function() { return SharedModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../services/anomalymanager.service */ "./src/app/services/anomalymanager.service.ts");
/* harmony import */ var _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../services/dataprivacymanager.service */ "./src/app/services/dataprivacymanager.service.ts");
/* harmony import */ var _services_session_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../services/session.service */ "./src/app/services/session.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};











/* Module to share Services between the modules, because it wouldn't work if you just
put the services in both of the providers arrays in the modules.. */
var SharedModule = /** @class */ (function () {
    function SharedModule() {
    }
    SharedModule_1 = SharedModule;
    SharedModule.forRoot = function () {
        return {
            ngModule: SharedModule_1,
            providers: [_services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"], _services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"], _services_usermanager_service__WEBPACK_IMPORTED_MODULE_5__["UserManagerService"],
                _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"], _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_4__["RuleManagerService"], _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_6__["VisualManagerService"], _services_project_service__WEBPACK_IMPORTED_MODULE_7__["ProjectService"], _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_8__["AnomalyManagerService"], _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_9__["DataPrivacyManagerService"], _services_session_service__WEBPACK_IMPORTED_MODULE_10__["SessionService"]]
        };
    };
    var SharedModule_1;
    SharedModule = SharedModule_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            declarations: [],
            exports: []
        })
    ], SharedModule);
    return SharedModule;
}());



/***/ }),

/***/ "./src/app/services/acp.service.ts":
/*!*****************************************!*\
  !*** ./src/app/services/acp.service.ts ***!
  \*****************************************/
/*! exports provided: ACPService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ACPService", function() { return ACPService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
/**
 * @ author Hamza Al Haddouchi
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URL_ACP_MANAGER = BACKENDURL + "/acp/";
var USER = URL_ACP_MANAGER + 'user/';
var USER_GET_SINGLE = USER + '';
var USER_ADD = USER + 'add/';
var USER_GET_ALL = USER + 'all/';
var USER_UPDATE = '/update';
var USER_RESET_PASSWORD = '/resetPassword';
var USER_REMOVE = '/remove';
var PRIVACY = URL_ACP_MANAGER + 'privacy/';
var PRIVACY_GET_SINGLE = PRIVACY + '';
var PRIVACY_ADD = PRIVACY + 'add/';
var PRIVACY_GET_ALL = PRIVACY + 'all/';
var PRIVACY_REMOVE_ALL = PRIVACY + 'removeAll/';
var PRIVACY_UPDATE = '/update';
var PRIVACY_REMOVE = '/remove';
var PRIVACY_BACKUP = URL_ACP_MANAGER + 'privacyBackup/';
var PRIVACY_BACKUP_GET_ALL = PRIVACY_BACKUP + 'all/';
var PRIVACY_BACKUP_UPDATE = '/update';
var PRIVACY_BACKUP_REMOVE = '/remove';
var PRIVACY_BACKUP_IMPORT = '/import/';
var URL_LOG_MANAGER = URL_ACP_MANAGER + 'logs/';
var URL_GET_LOGS_NO_FILTER = URL_LOG_MANAGER + 'getLogsNoFilter/';
var URL_GET_LOGS_USERNAME_FILTER = URL_LOG_MANAGER + 'getLogsUsernameFilter/';
var URL_GET_LOGS_DATERANGE_FILTER = URL_LOG_MANAGER + 'getLogsDaterangeFilter/';
var URL_GET_LOGS_USERNAME_DATERANGE_FILTER = URL_LOG_MANAGER + 'getLogsUsernameDaterangeFilter/';
var ACPService = /** @class */ (function () {
    function ACPService(http) {
        this.http = http;
    }
    /* ---------------------------- USER ----------------------------*/
    /**
      Path: /acp/user/add/
    */
    ACPService.prototype.addUser = function (user) {
        return this.http.post(USER_ADD, user, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/user/{id}/update
    */
    ACPService.prototype.updateUser = function (id, newObj) {
        return this.http.post(USER + id + USER_UPDATE, newObj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/user/{id}
    */
    ACPService.prototype.getUser = function (id) {
        return this.http.get(USER_GET_SINGLE + id, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/user/all/{fromType}
    */
    ACPService.prototype.getAllUsers = function (fromType) {
        if (fromType === void 0) { fromType = 'default'; }
        return this.http.get(USER_GET_ALL + fromType, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/user/{id}/resetPassword
    */
    ACPService.prototype.resetUserPassword = function (id) {
        return this.http.get(USER + id + USER_RESET_PASSWORD, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/user/{id}/remove
    */
    ACPService.prototype.removeUser = function (id) {
        return this.http.get(USER + id + USER_REMOVE, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* ---------------------------- PRIVACY ----------------------------*/
    /**
      Path: /acp/privacy/add/
    */
    ACPService.prototype.addPrivacyElement = function (obj) {
        return this.http.post(PRIVACY_ADD, obj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacy/{id}/update
    */
    ACPService.prototype.updatePrivacyElement = function (id, newObj) {
        return this.http.post(PRIVACY + id + PRIVACY_UPDATE, newObj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacy/{id}
    */
    ACPService.prototype.getPrivacyElement = function (id) {
        return this.http.get(PRIVACY_GET_SINGLE + id, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacy/all/{fromType}
    */
    ACPService.prototype.getAllPrivacyElements = function (fromType) {
        if (fromType === void 0) { fromType = 'default'; }
        return this.http.get(PRIVACY_GET_ALL + fromType, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacy/{id}/remove
    */
    ACPService.prototype.removePrivacyElement = function (id) {
        return this.http.get(PRIVACY + id + PRIVACY_REMOVE, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacy/removeAll/{fromType}
    */
    ACPService.prototype.removeAllPrivacyElements = function (fromType) {
        if (fromType === void 0) { fromType = 'default'; }
        return this.http.get(PRIVACY_REMOVE_ALL + fromType, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* ---------------------------- PRIVACY_BACKUP ----------------------------*/
    /**
     Path: /acp/privacyBackup/{id}/update
   */
    ACPService.prototype.updatePrivacyBackup = function (id, newObj) {
        return this.http.post(PRIVACY_BACKUP + id + PRIVACY_BACKUP_UPDATE, newObj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacyBackup/all/{fromType}
    */
    ACPService.prototype.getAllPrivacyBackups = function (fromType) {
        if (fromType === void 0) { fromType = 'default'; }
        return this.http.get(PRIVACY_BACKUP_GET_ALL + fromType, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacyBackup/{id}/remove
    */
    ACPService.prototype.removePrivacyBackup = function (id) {
        return this.http.get(PRIVACY_BACKUP + id + PRIVACY_BACKUP_REMOVE, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /**
      Path: /acp/privacyBackup/{id}/import/{mode}
    */
    ACPService.prototype.importPrivacyBackup = function (id, mode) {
        return this.http.get(PRIVACY_BACKUP + id + PRIVACY_BACKUP_IMPORT + mode, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* ---------------------------- LOGS ----------------------------*/
    ACPService.prototype.getLogs = function (offset, rows) {
        return this.http.get(URL_GET_LOGS_NO_FILTER + offset + '/' + rows, { headers: { Authorization: AUTH } })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    ACPService.prototype.getLogsDaterangeFilter = function (from, till, offset, rows) {
        return this.http.get(URL_GET_LOGS_DATERANGE_FILTER + from.getTime() + '/' + till.getTime() + '/'
            + offset + '/' + rows, { headers: { Authorization: AUTH } })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    ACPService.prototype.getLogsUsernameDaterangeFilter = function (from, till, username, offset, rows) {
        return this.http.get(URL_GET_LOGS_USERNAME_DATERANGE_FILTER + from.getTime() + '/' + till.getTime() + '/' + username + '/'
            + offset + '/' + rows, { headers: { Authorization: AUTH } })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    ACPService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], ACPService);
    return ACPService;
}());



/***/ }),

/***/ "./src/app/services/anomalymanager.service.ts":
/*!****************************************************!*\
  !*** ./src/app/services/anomalymanager.service.ts ***!
  \****************************************************/
/*! exports provided: AnomalyManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnomalyManagerService", function() { return AnomalyManagerService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLANOMALYMANAGER = BACKENDURL + "/anomalyManager/";
var nowData = '/getSensorWithAnomalyScoreDataNow?deviceId=';
var timeData = '/getSensorWithAnomalyScoreDataOverTime?deviceId=';
var socketData = '/getSensorWithAnomalyScoreDataSocket?deviceId=';
var startNetwork = '/startAnomalyNetworkRealtime?deviceId=';
var deleteNetwork = '/deleteNetwork?deviceId=';
var sensor = '&sensorId=';
var trainingstart = '&startTrainingTime=';
var start = '&startTime=';
var end = '&endTime=';
var interval = '&interval=';
var value = '&result=';
var nowDate = '&dateTime=';
var AnomalyManagerService = /** @class */ (function () {
    function AnomalyManagerService(http) {
        this.http = http;
    }
    /* Requests to start a new HTM Network with training*/
    AnomalyManagerService.prototype.startAnomalyNetworkRealtime = function (deviceId, sensorId, userId, projectId, startTrainingTime, dateTime, intervalId) {
        return this.http.get(URLANOMALYMANAGER + userId + "/" + projectId + startNetwork + deviceId + sensor + sensorId + trainingstart + startTrainingTime + nowDate + dateTime + interval + intervalId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* Requests to start a new HTM Network with training*/
    AnomalyManagerService.prototype.deleteNetwork = function (deviceId, sensorId, userId, projectId) {
        return this.http.get(URLANOMALYMANAGER + userId + "/" + projectId + deleteNetwork + deviceId + sensor + sensorId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* Requests sensor data just for this moment */
    AnomalyManagerService.prototype.getSensorWithAnomalyScoreDataNow = function (deviceId, sensorId, userId, projectId) {
        return this.http.get(URLANOMALYMANAGER + userId + "/" + projectId + nowData + deviceId + sensor + sensorId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    // TODO Backend sends json, change so that Backend sends Modells so this request no need
    /* Requests sensor data just for this moment */
    AnomalyManagerService.prototype.getSensorWithAnomalyScoreDataSocket = function (deviceId, sensorId, userId, projectId, result, dateTime) {
        return this.http.get(URLANOMALYMANAGER + userId + "/" + projectId + socketData + deviceId + sensor + sensorId + value + result + nowDate + dateTime, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* Requests sensor data over time */
    AnomalyManagerService.prototype.getSensorWithAnomalyScoreDataOverTime = function (deviceId, sensorId, startTrainingTime, startTime, endTime, intervalId, userId, projectId) {
        return this.http.get(URLANOMALYMANAGER + userId + "/" + projectId + timeData + deviceId + sensor + sensorId + trainingstart + startTrainingTime + start + startTime + end + endTime + interval + intervalId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    AnomalyManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], AnomalyManagerService);
    return AnomalyManagerService;
}());



/***/ }),

/***/ "./src/app/services/data.service.ts":
/*!******************************************!*\
  !*** ./src/app/services/data.service.ts ***!
  \******************************************/
/*! exports provided: DataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataService", function() { return DataService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var angular_gridster2__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! angular-gridster2 */ "./node_modules/angular-gridster2/fesm5/angular-gridster2.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var DataService = /** @class */ (function () {
    function DataService() {
        this.userDataBS = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.projectDataBS = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.dashboardIdBS = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.sheetIdBS = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.refreshMenuBS = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.refreshChart = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.refreshAnomaly = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.dashboardID = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](1);
        this.deletedWidgetID = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](-1);
        this.theme = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.loginObject = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.loginStatus = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](0);
        this.loginUUID = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.projectID = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](1);
        this.currentPage = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](1);
        this.compactTyp = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](angular_gridster2__WEBPACK_IMPORTED_MODULE_2__["CompactType"].None);
        this.visualizationData = new rxjs__WEBPACK_IMPORTED_MODULE_1__["BehaviorSubject"](undefined);
        this.currentCompactTyp = this.compactTyp.asObservable();
        this.currentDashboardID = this.dashboardID.asObservable();
        this.currentDeletedWidgetID = this.deletedWidgetID.asObservable();
        this.currentProjectID = this.projectID.asObservable();
        this.currentSheet = this.currentPage.asObservable();
        this.currentLoginObject = this.loginObject.asObservable();
        this.currentLoginUUID = this.loginUUID.asObservable();
        this.currentTheme = this.theme.asObservable();
        this.refreshChartNow = this.refreshChart.asObservable();
        this.refreshAnomalyNow = this.refreshAnomaly.asObservable();
        /**
         * current project
         */
        this.projectData = this.projectDataBS.asObservable();
        /**
         * current user
         */
        this.userData = this.userDataBS.asObservable();
        this.currentDashboardId = this.dashboardIdBS.asObservable();
        this.currentSheetId = this.sheetIdBS.asObservable();
        this.refreshMenu = this.refreshMenuBS.asObservable();
        this.currentLoginStatus = this.loginStatus.asObservable();
    }
    DataService.prototype.refreshRealtimeChart = function (label, value, widgetId, deviceId, entityId) {
        this.refreshChart.next({ label: label, value: value, widgetId: widgetId, deviceId: deviceId, entityId: entityId });
    };
    DataService.prototype.refreshAnomalyRealtimeChart = function (label, value, anomalyscore, widgetId, deviceId, entityId) {
        this.refreshAnomaly.next({ label: label, value: value, anomalyscore: anomalyscore, widgetId: widgetId, deviceId: deviceId, entityId: entityId });
    };
    DataService.prototype.changeRefreshMenu = function (message) {
        this.refreshMenuBS.next(message);
    };
    DataService.prototype.changeCurrentSheetId = function (message) {
        this.sheetIdBS.next(message);
    };
    DataService.prototype.changeProjectData = function (message) {
        this.projectDataBS.next(message);
    };
    DataService.prototype.changeUserData = function (message) {
        this.userDataBS.next(message);
    };
    DataService.prototype.changeCurrentDashboardId = function (message) {
        this.dashboardIdBS.next(message);
    };
    DataService.prototype.changeCompactTyp = function (message) {
        this.compactTyp.next(message);
    };
    DataService.prototype.changeDeletedWidgetID = function (message) {
        this.deletedWidgetID.next(message);
    };
    DataService.prototype.changeLoginStatus = function (message) {
        this.loginStatus.next(message);
    };
    DataService.prototype.changeLoginObject = function (message) {
        this.loginObject.next(message);
    };
    DataService.prototype.changeLoginUUID = function (message) {
        this.loginUUID.next(message);
    };
    DataService.prototype.changeTheme = function (message) {
        this.theme.next(message);
    };
    DataService.prototype.changeVisualizationData = function (message) {
        this.visualizationData.next(message);
    };
    DataService.prototype.refreshRealtimeAnomaly = function (label, value, anomalyscore, widgetId, deviceId, entityId) {
        this.refreshAnomaly.next({ label: label, value: value, anomalyscore: anomalyscore, widgetId: widgetId, deviceId: deviceId, entityId: entityId });
    };
    DataService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])()
        /* Makes it possible to communicate between not related components */
        ,
        __metadata("design:paramtypes", [])
    ], DataService);
    return DataService;
}());



/***/ }),

/***/ "./src/app/services/database.service.ts":
/*!**********************************************!*\
  !*** ./src/app/services/database.service.ts ***!
  \**********************************************/
/*! exports provided: DatabaseService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatabaseService", function() { return DatabaseService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var newLink = BACKENDURL + "/database/";
var find = '_find';
var uuid = '/_uuids';
var IDTAG = '&id=';
/**
 * @author Chinaedu Onwukwe
 * This class is an interface to the MongoDatabase backend REST interface
 */
var DatabaseService = /** @class */ (function () {
    function DatabaseService(dataService, http) {
        this.dataService = dataService;
        this.http = http;
        this.USERSCOLLECTION = 'Users';
        this.PROJECTSCOLLECTION = 'Projects';
        this.DASHBOARDSCOLLECTION = 'Dashboards';
        this.SHEETSSCOLLECTION = 'Sheets';
        this.WIDGETSCOLLECTION = 'Widgets';
    }
    // -------------------------------------------------------------------------------------------------
    // -----------------------NEW MONGO DB PART : TODO replace above-----------------------------
    DatabaseService.prototype.insertDocument = function (collection, document) {
        return this.http.post("" + newLink + collection + "/insert", document, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.getDocument = function (collection, documentIdentifier) {
        return this.http.get("" + newLink + collection + "/" + documentIdentifier, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.getDocuments = function (collection, documentIdentifiers) {
        var link = "" + newLink + collection + "?id=";
        for (var i = 0; i < documentIdentifiers.length; i++) {
            if (i + 1 === documentIdentifiers.length) {
                link += (documentIdentifiers[i]);
            }
            else {
                link += (documentIdentifiers[i] + IDTAG);
            }
        }
        return this.http.get(link, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.updateDocument = function (collection, documentIdentifier, fieldvalue) {
        return this.http.put("" + newLink + collection + "/" + documentIdentifier + "/update", fieldvalue, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.pushToDocumentsList = function (collection, documentIdentifier, fieldvalue) {
        return this.http.put("" + newLink + collection + "/" + documentIdentifier + "/push", fieldvalue, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.popFromDocumentsList = function (collection, documentIdentifier, fieldvalue) {
        return this.http.put("" + newLink + collection + "/" + documentIdentifier + "/pop", fieldvalue, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService.prototype.deleteDocument = function (collection, documentIdentifier) {
        return this.http.delete("" + newLink + collection + "/" + documentIdentifier + "/delete", { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DatabaseService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], DatabaseService);
    return DatabaseService;
}());



/***/ }),

/***/ "./src/app/services/dataprivacymanager.service.ts":
/*!********************************************************!*\
  !*** ./src/app/services/dataprivacymanager.service.ts ***!
  \********************************************************/
/*! exports provided: DataPrivacyManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataPrivacyManagerService", function() { return DataPrivacyManagerService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLPRIVACYMANAGER = BACKENDURL + "/dataprivacy/";
var editSettings = '/edit';
var addPrivacyElement = 'add/';
var addPrivacyElements = 'addAll/';
var getAllElements = 'getAllElements/';
var getAllRootElements = 'getAllRootElements/';
var getAllLeafElements = 'getAllLeafElements/';
var getPrivacySettings = 'userSettings/';
var DataPrivacyManagerService = /** @class */ (function () {
    function DataPrivacyManagerService(http) {
        this.http = http;
    }
    DataPrivacyManagerService.prototype.addPrivacyElement = function (obj) {
        return this.http.post(URLPRIVACYMANAGER + addPrivacyElement, obj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.addPrivacyElements = function (obj) {
        return this.http.post(URLPRIVACYMANAGER + addPrivacyElements, obj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.getPrivacySettings = function (id) {
        return this.http.get(URLPRIVACYMANAGER + getPrivacySettings + id, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.editPrivacySettings = function (id, settings) {
        return this.http.put(URLPRIVACYMANAGER + getPrivacySettings + id + editSettings, settings, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.getAllElements = function (type) {
        if (type === void 0) { type = ''; }
        return this.http.get(URLPRIVACYMANAGER + getAllElements + type, { headers: { Authorization: AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.getElement = function (id) {
        return this.http.get(URLPRIVACYMANAGER + id, { headers: { Authorization: AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.getAllRootElements = function () {
        return this.http.get(URLPRIVACYMANAGER + getAllRootElements, { headers: { Authorization: AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService.prototype.getAllLeafElements = function () {
        return this.http.get(URLPRIVACYMANAGER + getAllLeafElements, { headers: { Authorization: AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DataPrivacyManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], DataPrivacyManagerService);
    return DataPrivacyManagerService;
}());



/***/ }),

/***/ "./src/app/services/devicemanager.service.ts":
/*!***************************************************!*\
  !*** ./src/app/services/devicemanager.service.ts ***!
  \***************************************************/
/*! exports provided: DeviceManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeviceManagerService", function() { return DeviceManagerService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
// const AUTH = `${environment.Authorization}`;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLDEVICEMANAGER = BACKENDURL + "/devicemanager/";
var URLSYSTEMMANAGER = BACKENDURL + "/system/";
var ADDDEVICE = '/addDevice';
var DELETEDEVICE = '/deleteDevice?internalDeviceId=';
var UPDATEDEVICE = '/updateDevice?internalDeviceId=';
var GETALLDEVICES = '/getAllDevices';
var GETAllDEVICESBYPLATFORM = '/getAllDevicesByPlatform';
var CHANGEACTIONSTATE = '/changeActionState?valueState=';
var GETDEVICEBYID = '/getDeviceById?internalDeviceId=';
var GETDEVICEBYTAG = '/getDeviceByTag?tags=';
var TAGLINK = '&tags=';
var SEARCHFORPLATFORMS = '/searchForDevices?platformId=';
var GETAVAILABLEPLATFORMS = '/getAvailablePlatforms';
var DELETEPLATFORM = '/deletePlatform?platformId=';
var GETALLPLATFORMS = '/getConnectedPlatforms';
var GETALLPLATFORMSFROMALLPROJECTS = '/getConnectedPlatformsFromAllProjects';
var CONNECTPLATFORM = '/connectPlatform';
var GETACTIONVALUEORSTATE = '/getActionValueOrState';
var ENTITYTYPE = '/getDevicesByEntityType?type=';
var LOCATION = '/getDevicesByLocation?location=';
var DeviceManagerService = /** @class */ (function () {
    function DeviceManagerService(http) {
        this.http = http;
    }
    DeviceManagerService.prototype.connectPlatform = function (platform) {
        return this.http.post(URLSYSTEMMANAGER + platform.userId + "/" + platform.projectId + CONNECTPLATFORM, platform, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.deletePlatform = function (id, userId, projectId) {
        return this.http.delete(URLSYSTEMMANAGER + userId + "/" + projectId + DELETEPLATFORM + id, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.searchForPlatforms = function (userId, projectId) {
        return this.http.get(URLSYSTEMMANAGER + userId + "/" + projectId + GETAVAILABLEPLATFORMS, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllPlatforms = function (userId, projectId) {
        return this.http.get(URLSYSTEMMANAGER + userId + "/" + projectId + GETALLPLATFORMS, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.changeAiotesBridge = function (ipAdress, port, systemIp, clickdigitalPort, userId, projectId) {
        return this.http.get(URLSYSTEMMANAGER + userId + "/" + projectId + "/changeAiotesAddress?ip=" + ipAdress + "&port=" + port + "&systemIp=" + systemIp + "&cdPort=" + clickdigitalPort, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.addDevice = function (name, platformId, deviceInfo, serialNumber, tags, location, userId, projectId, externalDeviceId) {
        var obj = { name: name, platformId: platformId, deviceInfo: deviceInfo, serialNumber: serialNumber, tags: tags, location: location, externalDeviceId: externalDeviceId };
        return this.http.post(URLDEVICEMANAGER + userId + "/" + projectId + ADDDEVICE, obj, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllDevices = function (userId, projectid) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectid + GETALLDEVICES, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllDevicesByPlatform = function (platformId, userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + GETAllDEVICESBYPLATFORM + "?platformId=" + platformId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.searchForDevices = function (platformId, userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + SEARCHFORPLATFORMS + platformId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getDeviceById = function (id, userId, projectId) {
        var newId = id.replace("#", "%23");
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + GETDEVICEBYID + newId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllPlatformsFromAllProjects = function (userId) {
        return this.http.get("" + (URLSYSTEMMANAGER + userId) + GETALLPLATFORMSFROMALLPROJECTS, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllLocations = function (userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + "getAllLocations", { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllSensorTypes = function (userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + "getSensorTypes", { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllActuatorTypes = function (userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + "getActuatorTypes", { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getAllDeviceTypes = function (userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + "/getAllEntityTypes", { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getDevicesByEntityType = function (type, userId, projectid) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectid + ENTITYTYPE + type, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.getDevicesByLocation = function (location, userId, projectid) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectid + LOCATION + location, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.DeleteDevice = function (id, userId, projectId) {
        return this.http.delete(URLDEVICEMANAGER + userId + "/" + projectId + DELETEDEVICE + id, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.UpdateDevice = function (id, userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + UPDATEDEVICE + id, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.ChangeActionState = function (userId, projectId, deviceId, actionId, valueState) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + "/" + deviceId + "/" + actionId + CHANGEACTIONSTATE + valueState, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.GetActionValueOrState = function (actionId, deviceId, userId, projectId) {
        return this.http.get(URLDEVICEMANAGER + userId + "/" + projectId + GETACTIONVALUEORSTATE + "?actionId=" + actionId + "&deviceId=" + deviceId, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.SetSensorType = function (deviceId, sensorId, type, userId, projectId) {
        return this.http.post(URLDEVICEMANAGER + userId + "/" + projectId + "/setSensorType?sensorId=" + sensorId + "&deviceId=" + deviceId + "&type=" + type, null, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService.prototype.SetActuatorType = function (deviceId, actuatorId, type, userId, projectId) {
        return this.http.post(URLDEVICEMANAGER + userId + "/" + projectId + "/setSensorType?actuatorId=" + actuatorId + "&deviceId=" + deviceId + "&type=" + type, null, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    DeviceManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], DeviceManagerService);
    return DeviceManagerService;
}());



/***/ }),

/***/ "./src/app/services/project.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/project.service.ts ***!
  \*********************************************/
/*! exports provided: ProjectService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProjectService", function() { return ProjectService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _models_frontend_project__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/frontend/project */ "./src/app/models/frontend/project.ts");
/* harmony import */ var _models_database_dashboard__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/database/dashboard */ "./src/app/models/database/dashboard.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _models_database_project__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/database/project */ "./src/app/models/database/project.ts");
/* harmony import */ var _models_database_sheet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/database/sheet */ "./src/app/models/database/sheet.ts");
/* harmony import */ var _models_frontend_dashboard__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/frontend/dashboard */ "./src/app/models/frontend/dashboard.ts");
/* harmony import */ var _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/frontend/sheet */ "./src/app/models/frontend/sheet.ts");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _database_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _usermanager_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _devicemanager_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./dataprivacymanager.service */ "./src/app/services/dataprivacymanager.service.ts");
/* harmony import */ var _models_frontend_togglewidget__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../models/frontend/togglewidget */ "./src/app/models/frontend/togglewidget.ts");
/* harmony import */ var _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../models/frontend/barchartwidget */ "./src/app/models/frontend/barchartwidget.ts");
/* harmony import */ var _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../models/frontend/linechartwidget */ "./src/app/models/frontend/linechartwidget.ts");
/* harmony import */ var _models_frontend_sliderwidget__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../models/frontend/sliderwidget */ "./src/app/models/frontend/sliderwidget.ts");
/* harmony import */ var _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../models/frontend/doughnutchartwidget */ "./src/app/models/frontend/doughnutchartwidget.ts");
/* harmony import */ var _models_frontend_bubblechartwidget__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../models/frontend/bubblechartwidget */ "./src/app/models/frontend/bubblechartwidget.ts");
/* harmony import */ var _models_frontend_chartDeviceEntity__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../models/frontend/chartDeviceEntity */ "./src/app/models/frontend/chartDeviceEntity.ts");
/* harmony import */ var _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../models/frontend/valueviewwidget */ "./src/app/models/frontend/valueviewwidget.ts");
/* harmony import */ var _models_frontend_statewidget__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../models/frontend/statewidget */ "./src/app/models/frontend/statewidget.ts");
/* harmony import */ var _models_frontend_rulemanagementwidget__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../models/frontend/rulemanagementwidget */ "./src/app/models/frontend/rulemanagementwidget.ts");
/* harmony import */ var _models_frontend_rulenotificationwidget__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../models/frontend/rulenotificationwidget */ "./src/app/models/frontend/rulenotificationwidget.ts");
/* harmony import */ var _models_frontend_rulesharingwidget__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../models/frontend/rulesharingwidget */ "./src/app/models/frontend/rulesharingwidget.ts");
/* harmony import */ var _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../models/frontend/realtimeanomalywidget */ "./src/app/models/frontend/realtimeanomalywidget.ts");
/* harmony import */ var _models_frontend_historyanomalywidget__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../models/frontend/historyanomalywidget */ "./src/app/models/frontend/historyanomalywidget.ts");
/* harmony import */ var _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../models/frontend/polarareachartwidget */ "./src/app/models/frontend/polarareachartwidget.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
































var ProjectService = /** @class */ (function () {
    function ProjectService(dataService, databaseService, router, usermanager, devicemanager, dataprivacymanager) {
        var _this = this;
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.router = router;
        this.usermanager = usermanager;
        this.devicemanager = devicemanager;
        this.dataprivacymanager = dataprivacymanager;
        this.dataService.userData.subscribe(function (user) { return _this.user = user; });
        this.dataService.projectData
            .subscribe(function (project) { return _this.project = project; });
        this.dataService.currentDashboardId
            .subscribe(function (dashboardId) { return _this.currentDashboardId = dashboardId; });
        this.dataService.currentSheetId
            .subscribe(function (sheetId) { return _this.currentSheetId = sheetId; });
    }
    /**
     * This method changes the current project
     * @param id the id of the project to change to
     */
    ProjectService.prototype.loadNewProject = function (id, isRouted) {
        var _this = this;
        var project;
        this.databaseService.getDocument(this.databaseService.PROJECTSCOLLECTION, id)
            .subscribe(function (projectDB) {
            project = new _models_frontend_project__WEBPACK_IMPORTED_MODULE_3__["Project"](projectDB.id, projectDB.name, projectDB.theme, []);
            for (var _i = 0, _a = projectDB.dashboards; _i < _a.length; _i++) {
                var dashboardId = _a[_i];
                _this.databaseService.getDocument(_this.databaseService.DASHBOARDSCOLLECTION, dashboardId)
                    .subscribe(function (dashboardDB) {
                    var dashboard = new _models_frontend_dashboard__WEBPACK_IMPORTED_MODULE_8__["Dashboard"](dashboardDB.id, dashboardDB.name, []);
                    for (var _i = 0, _a = dashboardDB.sheets; _i < _a.length; _i++) {
                        var sheetId = _a[_i];
                        _this.databaseService.getDocument(_this.databaseService.SHEETSSCOLLECTION, sheetId)
                            .subscribe(function (sheetDB) {
                            var sheet = new _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_9__["Sheet"](sheetDB.id, sheetDB.name, []);
                            for (var _i = 0, _a = sheetDB.widgets; _i < _a.length; _i++) {
                                var widgetId = _a[_i];
                                _this.databaseService.getDocument(_this.databaseService.WIDGETSCOLLECTION, widgetId)
                                    .subscribe(function (widget) {
                                    //check widget type
                                    switch (widget.type) {
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleManagementView:
                                            sheet.widgets.push(new _models_frontend_rulemanagementwidget__WEBPACK_IMPORTED_MODULE_25__["RuleManagementWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleNotificationView:
                                            sheet.widgets.push(new _models_frontend_rulenotificationwidget__WEBPACK_IMPORTED_MODULE_26__["RuleNotificationWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleSharingViewWidget:
                                            sheet.widgets.push(new _models_frontend_rulesharingwidget__WEBPACK_IMPORTED_MODULE_27__["RuleSharingWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].toggleDeviceControl:
                                            sheet.widgets.push(new _models_frontend_togglewidget__WEBPACK_IMPORTED_MODULE_16__["ToggleWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceId, widget.entityId, widget.controlPosition, widget.fontSize, widget.icon, widget.value, widget.toggleLabelOn, widget.toggleLabelOff));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].stateDeviceControl:
                                            sheet.widgets.push(new _models_frontend_statewidget__WEBPACK_IMPORTED_MODULE_24__["StateWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceId, widget.entityId, widget.controlPosition, widget.fontSize, widget.icon, widget.value));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].sliderDeviceControl:
                                            sheet.widgets.push(new _models_frontend_sliderwidget__WEBPACK_IMPORTED_MODULE_19__["SliderWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceId, widget.entityId, widget.controlPosition, widget.fontSize, widget.icon, widget.value, widget.minValue, widget.maxValue));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].lineChartVisualization:
                                            sheet.widgets.push(new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["LineChartWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.isMonoVis, widget.isRealtime, widget.isTimeBased, widget.axesOptions, widget.numberOfValues, widget.startDate, widget.endDate, widget.interval));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].barChartVisualization:
                                            sheet.widgets.push(new _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__["BarChartWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.isMonoVis, widget.isNumerical, widget.calculationType, widget.frequencyType, widget.axesOptions, widget.numberOfValues, widget.startDate, widget.endDate, widget.interval));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].bubbleChartVisualization:
                                            sheet.widgets.push(new _models_frontend_bubblechartwidget__WEBPACK_IMPORTED_MODULE_21__["BubbleChartWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.startDate, widget.endDate, widget.locations, widget.colorPalette));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].doughnutChartVisualization:
                                            sheet.widgets.push(new _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_20__["Doughnutchartwidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.isCircleFull, widget.distribution, widget.colorPalette, widget.startDate, widget.endDate));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].polarAreaChartVisualization:
                                            sheet.widgets.push(new _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_30__["PolarAreaChartWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.startDate, widget.endDate, widget.calculationType, widget.deviceType, widget.distribution, widget.colorPalette));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeValueVisualization:
                                            sheet.widgets.push(new _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_23__["ValueViewWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceId, widget.entityId, widget.fontSize, widget.entityType, widget.controlPosition));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeAnomaly:
                                            sheet.widgets.push(new _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_28__["RealtimeAnomalyWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.axesOptions, widget.numberOfValues));
                                            break;
                                        case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].historyAnomaly:
                                            sheet.widgets.push(new _models_frontend_historyanomalywidget__WEBPACK_IMPORTED_MODULE_29__["HistoryAnomalyWidget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type, widget.deviceEntities, widget.chartType, widget.axesOptions, widget.startDate, widget.endDate, widget.interval));
                                            break;
                                        default:
                                            sheet.widgets.push(new _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["Widget"](widget.id, widget.name, widget.additionalInfo, widget.position, widget.isDeveloped, widget.type));
                                            break;
                                    }
                                });
                            }
                            console.log("sheet: ", sheet);
                            dashboard.sheets.push(sheet);
                        });
                    }
                    project.dashboards.push(dashboard);
                });
            }
            setTimeout(function () {
                _this.dataService.changeCurrentDashboardId(project.dashboards[0].id);
                _this.dataService.changeCurrentSheetId(project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets[0].id);
                _this.dataService.changeProjectData(project);
                console.log('Changed', project);
                _this.dataService.changeRefreshMenu(Math.random().toString());
                if (isRouted) {
                    console.log("routed in loadNewPorject");
                    _this.router.navigate(['dashboard']);
                }
            }, 500);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error loading project data from database ', err);
        });
    };
    ProjectService.prototype.generateProject = function () {
        var _this = this;
        var newSheet = new _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_9__["Sheet"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), 'Sheet 1', []);
        var newDashboard = new _models_frontend_dashboard__WEBPACK_IMPORTED_MODULE_8__["Dashboard"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), 'Dashboard 1', [newSheet]);
        var newProject = new _models_frontend_project__WEBPACK_IMPORTED_MODULE_3__["Project"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), "Project " + (this.user.projects.length + 1), 'omega', [newDashboard]);
        this.databaseService.insertDocument(this.databaseService.SHEETSSCOLLECTION, new _models_database_sheet__WEBPACK_IMPORTED_MODULE_7__["SheetDB"](newSheet.id, newSheet.name, []))
            .subscribe(function (result) {
            _this.databaseService.insertDocument(_this.databaseService.DASHBOARDSCOLLECTION, new _models_database_dashboard__WEBPACK_IMPORTED_MODULE_4__["DashboardDB"](newDashboard.id, newDashboard.name, [newDashboard.sheets[0].id]))
                .subscribe(function (result) {
                _this.databaseService.insertDocument(_this.databaseService.PROJECTSCOLLECTION, new _models_database_project__WEBPACK_IMPORTED_MODULE_6__["ProjectDB"](newProject.id, newProject.name, newProject.theme, [newProject.dashboards[0].id]))
                    .subscribe(function (result) {
                    _this.databaseService.pushToDocumentsList(_this.databaseService.USERSCOLLECTION, _this.user.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('projects', newProject.id))
                        .subscribe(function (result) {
                        console.log(_this.user);
                        console.log(_this.user.id);
                        _this.databaseService.getDocument(_this.databaseService.USERSCOLLECTION, _this.user.id)
                            .subscribe(function (user) {
                            _this.dataService.changeUserData(user);
                            _this.dataService.changeCurrentDashboardId(newDashboard.id);
                            _this.dataService.changeCurrentSheetId(newSheet.id);
                            _this.dataService.changeProjectData(newProject);
                            _this.dataService.changeRefreshMenu(Math.random().toString());
                        }, function (err) {
                            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                                _this.router.navigate(['unauthorized']);
                            }
                            console.log('Error while getting document from database ', err);
                        });
                    }, function (err) {
                        if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                            _this.router.navigate(['unauthorized']);
                        }
                        console.log('Error while inserting into database ', err);
                    });
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error while inserting into database ', err);
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error while inserting into database ', err);
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while inserting into database ', err);
        });
    };
    ProjectService.prototype.deleteProject = function () {
        var _this = this;
        // if it is the last project, create a new one and focus this one
        // TODO delete project id from the project ids of collection User
        // TODO delete from database collections: Projects, all Dashboards, all Sheets, all widgets and change observable project data to the new first project of the user
        // deleting all dashboards which are part of the project
        for (var _i = 0, _a = this.project.dashboards; _i < _a.length; _i++) {
            var dashboard = _a[_i];
            this.deleteDashboard(dashboard.id);
        }
        // delete project from user
        this.databaseService.popFromDocumentsList(this.databaseService.USERSCOLLECTION, this.user.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('projects', this.project.id))
            .subscribe(function (result) {
            //then delete project and its content
            _this.databaseService.deleteDocument(_this.databaseService.PROJECTSCOLLECTION, _this.project.id)
                .subscribe(function (result) {
                //delete all platforms
                _this.devicemanager.getAllPlatforms(_this.user.id, _this.project.id)
                    .subscribe(function (platforms) {
                    platforms.forEach(function (platform) {
                        _this.devicemanager.deletePlatform(platform.platformId, _this.user.id, _this.project.id).subscribe(function (result) {
                        }, function (err) {
                            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                                _this.router.navigate(['unauthorized']);
                            }
                            console.log('DeleteDevice could not been sent to backend server');
                            console.log(err);
                        });
                    });
                }, function (error) {
                    if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error deleting Dashboard', error);
                });
                if (_this.user.projects.length === 0) {
                    _this.generateProject();
                }
                else {
                    _this.dataService.changeUserData(_this.user);
                    _this.loadNewProject(_this.user.projects[0], false);
                }
            }, function (error) {
                if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error deleting Dashboard', error);
            });
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error deleting Dashboard', error);
        });
    };
    ProjectService.prototype.deleteDashboard = function (dashId) {
        var _this = this;
        // delete all sheets from dashboard
        for (var _i = 0, _a = this.project.dashboards.find(function (x) { return x.id === dashId; }).sheets; _i < _a.length; _i++) {
            var sheet = _a[_i];
            this.deleteSheet(sheet.id);
        }
        // delete dashboard id from project
        this.databaseService.popFromDocumentsList(this.databaseService.PROJECTSCOLLECTION, this.project.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('dashboards', dashId))
            .subscribe(function (result) {
            //then delete dashboard and its content
            _this.databaseService.deleteDocument(_this.databaseService.DASHBOARDSCOLLECTION, dashId)
                .subscribe(function (result) {
                var index = _this.project.dashboards.findIndex(function (x) { return x.id === dashId; });
                if (index !== undefined) {
                    _this.project.dashboards.splice(index, 1);
                    _this.dataService.changeCurrentDashboardId(_this.project.dashboards[0].id);
                    _this.dataService.changeCurrentSheetId(_this.project.dashboards[0].sheets[0].id);
                    _this.dataService.changeRefreshMenu(uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()());
                }
                else {
                    console.log('Error deleting Dashboard. Dashboard not found');
                }
            }, function (error) {
                if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error deleting Dashboard', error);
            });
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error deleting Dashboard', error);
        });
    };
    ProjectService.prototype.deleteSheet = function (sheetId) {
        var _this = this;
        // deleting all widgets which are part of the sheet
        var widgets = this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) { return x.id === sheetId; }).widgets;
        if (widgets != undefined) {
            for (var _i = 0, widgets_1 = widgets; _i < widgets_1.length; _i++) {
                var widget = widgets_1[_i];
                this.deleteWidget(widget.id);
            }
        }
        else {
            console.log('no widgets in sheet.');
        }
        // delete sheet id from dashboard
        this.databaseService.popFromDocumentsList(this.databaseService.DASHBOARDSCOLLECTION, this.currentDashboardId, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('sheets', sheetId))
            .subscribe(function (result) {
            // then delete sheet and its content
            _this.databaseService.deleteDocument(_this.databaseService.SHEETSSCOLLECTION, sheetId)
                .subscribe(function (result) {
                var index = _this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.findIndex(function (x) { return x.id === sheetId; });
                if (index !== undefined) {
                    _this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.splice(index, 1);
                    if (_this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.length === 0) {
                        _this.generateSheet();
                    }
                    _this.dataService.changeCurrentSheetId(_this.project.dashboards[0].sheets[0].id);
                    _this.dataService.changeRefreshMenu(uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()());
                    _this.dataService.changeProjectData(_this.project);
                }
                else {
                    console.log('Error deleting Sheet. Sheet not found');
                }
            }, function (error) {
                if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error deleting Sheet', error);
            });
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error deleting Sheet', error);
        });
    };
    /**
     * This method adds a new sheet to the current {@link Dashboard} and saves it to the database
     * as a new entity as well as an id in the corresponding dashboard entity
     */
    ProjectService.prototype.generateSheet = function () {
        var _this = this;
        var d = this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; });
        if (d !== undefined) {
            var newSheet_1 = new _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_9__["Sheet"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), "Sheet " + (d.sheets.length + 1), []);
            this.databaseService.insertDocument(this.databaseService.SHEETSSCOLLECTION, new _models_database_sheet__WEBPACK_IMPORTED_MODULE_7__["SheetDB"](newSheet_1.id, newSheet_1.name, []))
                .subscribe(function (result) {
                _this.databaseService.pushToDocumentsList(_this.databaseService.DASHBOARDSCOLLECTION, _this.currentDashboardId, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('sheets', newSheet_1.id))
                    .subscribe(function (result) {
                    d.sheets.push(newSheet_1);
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error while inserting into database ', err);
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error while inserting into database ', err);
            });
        }
        else {
            console.log('Error adding sheet. No corresponding dashboard found');
        }
    };
    /**
     * This method deletes a widget from the project data and from the database
     * @param {string} id
     */
    ProjectService.prototype.deleteWidget = function (id) {
        var _this = this;
        var s = this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) { return x.id === _this.currentSheetId; });
        if (s !== undefined) {
            // delete Widget in Widget Datatable
            this.databaseService.deleteDocument(this.databaseService.WIDGETSCOLLECTION, id).subscribe(function (result) {
                // delete WidgetId in Sheet Datatable
                _this.databaseService.popFromDocumentsList(_this.databaseService.SHEETSSCOLLECTION, _this.currentSheetId, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('widgets', id))
                    .subscribe(function (result) {
                    // delete Widget from Sheet in Projectobject
                    var index = _this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) {
                        return x.id === _this.currentSheetId;
                    }).widgets.findIndex(function (w) { return w.id === id; });
                    if (index !== undefined) {
                        _this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) {
                            return x.id === _this.currentSheetId;
                        }).widgets.splice(index, 1);
                    }
                    _this.dataService.changeProjectData(_this.project);
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error while inserting into database ', err);
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error while inserting into database ', err);
            });
        }
        else {
            console.log('Error adding sheet. No corresponding dashboard found');
        }
    };
    // New Widget Generator Method to replace redundant methods
    // consumes widget types as strings
    ProjectService.prototype.generateWidget = function (widgetType) {
        var _this = this;
        var widget;
        var s = this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) { return x.id === _this.currentSheetId; });
        var EMPTYID = '';
        var DEFAULTFONTSIZE = 20;
        var BOTTOMCONTROLPOSITION = 'bottom';
        var RIGHTCONTROLPOSITION = 'right';
        var EMPTYSTRING = '';
        if (s !== undefined) {
            switch (widgetType) {
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleManagementView:
                    widget = new _models_frontend_rulemanagementwidget__WEBPACK_IMPORTED_MODULE_25__["RuleManagementWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleNotificationView:
                    widget = new _models_frontend_rulenotificationwidget__WEBPACK_IMPORTED_MODULE_26__["RuleNotificationWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleSharingViewWidget:
                    widget = new _models_frontend_rulesharingwidget__WEBPACK_IMPORTED_MODULE_27__["RuleSharingWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].toggleDeviceControl:
                    widget = new _models_frontend_togglewidget__WEBPACK_IMPORTED_MODULE_16__["ToggleWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, undefined, undefined, RIGHTCONTROLPOSITION, DEFAULTFONTSIZE, undefined, true, 'On', 'Off');
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].stateDeviceControl:
                    widget = new _models_frontend_statewidget__WEBPACK_IMPORTED_MODULE_24__["StateWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, undefined, undefined, RIGHTCONTROLPOSITION, DEFAULTFONTSIZE, undefined, undefined);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].sliderDeviceControl:
                    widget = new _models_frontend_sliderwidget__WEBPACK_IMPORTED_MODULE_19__["SliderWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, undefined, undefined, RIGHTCONTROLPOSITION, DEFAULTFONTSIZE, undefined, 50, 0, 100);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].lineChartVisualization:
                    widget = new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["LineChartWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [new _models_frontend_chartDeviceEntity__WEBPACK_IMPORTED_MODULE_22__["ChartDeviceEntity"]('', '', 'solid', true, true, '#1976D2', '', '', '')], 'line', true, true, true, new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["AxesOptions"]('x', 'y', true, true), 5, undefined, undefined, undefined);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].barChartVisualization:
                    widget = new _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__["BarChartWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [new _models_frontend_chartDeviceEntity__WEBPACK_IMPORTED_MODULE_22__["ChartDeviceEntity"]('', '', 'solid', true, true, '#1976D2', '', '', '')], 'line', true, true, _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__["Calculation"].Avg, _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__["Frequency"].Count, new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["AxesOptions"]('x', 'y', true, true), 5, undefined, undefined, "day");
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].bubbleChartVisualization:
                    widget = new _models_frontend_bubblechartwidget__WEBPACK_IMPORTED_MODULE_21__["BubbleChartWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [], 'bubble', undefined, undefined, [], "cold");
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].polarAreaChartVisualization:
                    widget = new _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_30__["PolarAreaChartWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [], 'polarArea', undefined, undefined, _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_17__["Calculation"].Avg, _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_30__["SensorType"].Motion, _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_30__["Distribution"].Occupant, "cold");
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].doughnutChartVisualization:
                    widget = new _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_20__["Doughnutchartwidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [new _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_20__["DoughnutChartDeviceEntity"]('', '', '', '')], 'doughnut', "true", undefined, "cold", undefined, undefined);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeValueVisualization:
                    widget = new _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_23__["ValueViewWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, EMPTYID, EMPTYID, DEFAULTFONTSIZE, '', BOTTOMCONTROLPOSITION);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeAnomaly:
                    widget = new _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_28__["RealtimeAnomalyWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [new _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_28__["AnomalyEntity"]('', '', '', '', '')], 'line', new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["AxesOptions"]('time', 'y', true, true), 5);
                    break;
                case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].historyAnomaly:
                    widget = new _models_frontend_historyanomalywidget__WEBPACK_IMPORTED_MODULE_29__["HistoryAnomalyWidget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType, [new _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_28__["AnomalyEntity"]('', '', '', '', '')], 'line', new _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_18__["AxesOptions"]('time', 'y', true, true), undefined, undefined, 'P5D');
                    break;
                // default Widget class
                default:
                    widget = new _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["Widget"](uuid_v4__WEBPACK_IMPORTED_MODULE_10___default()(), widgetType, EMPTYSTRING, this.setPosition(widgetType), true, widgetType);
                    break;
            }
            console.log("widget: ", widget);
            // insert Widget in Widget Datatable
            this.databaseService.pushToDocumentsList(this.databaseService.SHEETSSCOLLECTION, this.currentSheetId, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_2__["Fieldvalue"]('widgets', widget.id)).subscribe(function (result) {
                // insert WidgetId in Sheet Datatable
                _this.databaseService.insertDocument(_this.databaseService.WIDGETSCOLLECTION, widget)
                    .subscribe(function (result) {
                    // add Widget to Sheet in Projectobject
                    console.log('sheet: ', _this.currentSheetId);
                    _this.project.dashboards.find(function (x) { return x.id === _this.currentDashboardId; }).sheets.find(function (x) { return x.id === _this.currentSheetId; }).widgets.push(widget);
                    _this.dataService.changeProjectData(_this.project);
                    console.log('project', _this.project);
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error while inserting into database ', err);
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error while inserting into database ', err);
            });
        }
        else {
            console.log('Error adding sheet. No corresponding dashboard found');
        }
    };
    /**
     * This method sets the minimum size in the grid of a widget.
     * @param {string} widgetType the type of widget
     * @returns {GridsterItem}
     */
    ProjectService.prototype.setPosition = function (widgetType) {
        switch (widgetType) {
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].addDevice:
                return { minItemRows: 12, minItemCols: 10, x: 0, y: 0, rows: 30, cols: 16 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].deleteDevice:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].toggleDeviceControl:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].stateDeviceControl:
                return { minItemRows: 3, minItemCols: 10, x: 0, y: 0, rows: 10, cols: 30 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].sliderDeviceControl:
                return { minItemRows: 3, minItemCols: 10, x: 0, y: 0, rows: 13, cols: 35 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].lineChartVisualization:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].barChartVisualization:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].doughnutChartVisualization:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].polarAreaChartVisualization:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].bubbleChartVisualization:
                return { minItemRows: 12, minItemCols: 12, x: 0, y: 0, rows: 24, cols: 24 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].historyAnomaly:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeAnomaly:
                return { minItemRows: 12, minItemCols: 12, x: 0, y: 0, rows: 28, cols: 28 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].realtimeValueVisualization:
                return { minItemRows: 6, minItemCols: 6, x: 0, y: 0, rows: 20, cols: 16 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleManagementView:
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleNotificationView:
                return { minItemRows: 6, minItemCols: 25, x: 0, y: 0, rows: 25, cols: 44 };
            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleSharingViewWidget:
                return { minItemRows: 12, minItemCols: 12, x: 0, y: 0, rows: 28, cols: 38 };
            //return {minItemRows: 20, minItemCols: 20, x: 0, y: 0, rows: 25, cols: 25, truemaxItemCols : 100 , maxItemRows:100};
            // default Widget class
            default:
                return { minItemRows: 10, minItemCols: 10, x: 0, y: 0, rows: 10, cols: 10 };
        }
    };
    ProjectService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"], _database_service__WEBPACK_IMPORTED_MODULE_11__["DatabaseService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_12__["Router"], _usermanager_service__WEBPACK_IMPORTED_MODULE_13__["UserManagerService"],
            _devicemanager_service__WEBPACK_IMPORTED_MODULE_14__["DeviceManagerService"], _dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_15__["DataPrivacyManagerService"]])
    ], ProjectService);
    return ProjectService;
}());



/***/ }),

/***/ "./src/app/services/rulemanager.service.ts":
/*!*************************************************!*\
  !*** ./src/app/services/rulemanager.service.ts ***!
  \*************************************************/
/*! exports provided: RuleManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleManagerService", function() { return RuleManagerService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/frontend/rule_module/rule */ "./src/app/models/frontend/rule_module/rule.ts");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");
/* harmony import */ var _data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
// Strings for dynamic URL generating
var URLRULEMANAGER = BACKENDURL + "/ruleManagement/";
var createRule = 'createRule';
var updateRule = 'updateRule/';
var deleteRule = 'deleteRule/';
var rule = 'getRule?ID=';
var allRules = 'getAllRules';
var ruleStatus = 'getRuleStatus?ID=';
var activate = 'activateRule/';
var deactivate = 'deactivateRule/';
var createGroup = 'createTriggergroup';
var allGroups = 'getAllTriggergroups';
var byCategory = 'getAllTriggerByCategory';
var triggersByTGID = 'getTriggersByTGID/';
var deleteTriggergroups = 'deleteTriggergroups/';
var shareAllTriggergroup = 'shareAllTriggergroup/';
var createNotification = 'createNotification';
var allNotifications = 'getAllNotifications';
var deleteNotification = 'deleteNotification/';
var updateNotifications = 'updateNotifications/';
var RuleManagerService = /** @class */ (function () {
    function RuleManagerService(http, dataService, router) {
        var _this = this;
        this.http = http;
        this.dataService = dataService;
        this.router = router;
        if (!this.project) {
            this.dataService.projectData
                .subscribe(function (project) {
                _this.project = project;
            });
        }
    }
    RuleManagerService.prototype.addNewTriggerLeaf = function (userID, triggerLeaf) {
        triggerLeaf.projectID = this.project.id;
        return this.http.post("" + URLRULEMANAGER + createGroup + "/" + userID, triggerLeaf.getTriggerGroup(), { headers: { 'Authorization': AUTH }, withCredentials: true })
            .map(function (response) {
            return response;
        });
    };
    RuleManagerService.prototype.getTriggersByTGID = function (userID, TGID) {
        var _this = this;
        return this.http.get("" + URLRULEMANAGER + triggersByTGID + TGID + "?userID=" + userID, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .map(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        });
    };
    RuleManagerService.prototype.shareAllTriggergroup = function (userID, rootTGID, triggers) {
        var _this = this;
        return this.http.post("" + URLRULEMANAGER + shareAllTriggergroup + userID + "/" + rootTGID, triggers, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.saveRule = function (userID, ruleValue) {
        var _this = this;
        return this.http.post("" + URLRULEMANAGER + createRule + "/" + userID, ruleValue, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.saveNotification = function (userID, notification) {
        var _this = this;
        return this.http.post("" + URLRULEMANAGER + createNotification + "/" + userID, notification, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.updateRule = function (userID, ruleData) {
        var _this = this;
        var ruleValue = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_4__["Rule"]();
        ruleValue.setRuleData(ruleData);
        return this.http.put("" + URLRULEMANAGER + updateRule + userID, ruleValue, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.updateNotifications = function (userID, notifications) {
        var _this = this;
        return this.http.put("" + URLRULEMANAGER + updateNotifications + userID, notifications, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.activateRule = function (userID, ruleValue) {
        var _this = this;
        return this.http.get("" + (URLRULEMANAGER + activate + ruleValue.ID + this.getQueryParameters(userID, ruleValue)), { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.deactivateRule = function (userID, ruleValue) {
        var _this = this;
        return this.http.get("" + (URLRULEMANAGER + deactivate + ruleValue.ID + this.getQueryParameters(userID, ruleValue)), { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.deleteTriggers = function (userID, triggers) {
        var _this = this;
        return this.http.put(URLRULEMANAGER + deleteTriggergroups + userID, triggers, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .subscribe(function (response) {
            console.log('deleteTriggers response', response);
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        });
    };
    RuleManagerService.prototype.getQueryParameters = function (userID, data) {
        return "?userID=" + userID + "&platformID=" + data.platformID + "&projectID=" + data.projectID;
    };
    RuleManagerService.prototype.deleteRule = function (userID, ruleValue) {
        var _this = this;
        return this.http.delete("" + URLRULEMANAGER + deleteRule + ruleValue.ID + this.getQueryParameters(userID, ruleValue), { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.deleteNotification = function (userID, notification) {
        var _this = this;
        return this.http.delete("" + URLRULEMANAGER + deleteNotification + userID + "/" + notification.ID, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.getTriggergroupByCategory = function (userID, category) {
        var _this = this;
        return this.http.get("" + URLRULEMANAGER + byCategory + "/" + userID + "?category=" + category, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.getAllTriggergroups = function (userID) {
        var _this = this;
        return this.http.get("" + URLRULEMANAGER + allGroups + "/" + userID + "?projectID=" + this.project.id, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.getAllRules = function (userID) {
        var _this = this;
        console.log('getAllRules this.project', this.project);
        return this.http.get("" + URLRULEMANAGER + allRules + "/" + userID + "?projectID=" + this.project.id, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService.prototype.getAllNotifications = function (userID) {
        var _this = this;
        return this.http.get("" + URLRULEMANAGER + allNotifications + "/" + userID, { headers: { 'Authorization': AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (response) {
            return response;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            alert('There was an error during creating the trigger. Please talk to your system admin.');
            return {};
        }));
    };
    RuleManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"],
            _data_service__WEBPACK_IMPORTED_MODULE_6__["DataService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])
    ], RuleManagerService);
    return RuleManagerService;
}());



/***/ }),

/***/ "./src/app/services/session.service.ts":
/*!*********************************************!*\
  !*** ./src/app/services/session.service.ts ***!
  \*********************************************/
/*! exports provided: SessionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionService", function() { return SessionService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLUSERSESSIONMANAGER = BACKENDURL + "/session/";
var restore = 'restore';
/**
 * @author Philipp Grenz
 * This class is responsible for restoring sessions on page reload
 */
var SessionService = /** @class */ (function () {
    function SessionService(http) {
        this.http = http;
    }
    SessionService.prototype.restoreSession = function () {
        return this.http.get(URLUSERSESSIONMANAGER, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    SessionService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], SessionService);
    return SessionService;
}());



/***/ }),

/***/ "./src/app/services/usermanager.service.ts":
/*!*************************************************!*\
  !*** ./src/app/services/usermanager.service.ts ***!
  \*************************************************/
/*! exports provided: UserManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserManagerService", function() { return UserManagerService; });
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLUSERMANAGER = BACKENDURL + "/user/";
var create = 'create';
var get = '/get';
var deleteUser = '/delete';
var logout = '/logout';
var login = 'login';
var editMail = '/editMailAddress';
var editUsername = '/editUsername';
var editFirstname = '/editFirstname';
var editSurname = '/editSurname';
var editPassword = '/editPassword';
var forgotPassword = 'forgotPassword';
var resetPassword = 'resetPassword';
var confirmEmail = 'confirm';
var getAllUsers = 'getAllUsers';
/**
 * This class is responsible for sending REST Requests to the backend
 */
var UserManagerService = /** @class */ (function () {
    function UserManagerService(http) {
        this.http = http;
    }
    UserManagerService.prototype.logoutUser = function (id) {
        return this.http.get(URLUSERMANAGER + id + logout, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.loginUser = function (username, password) {
        return this.http.get(URLUSERMANAGER + login + "?username=" + username + "&password=" + password, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.getAllUsers = function () {
        return this.http.get(URLUSERMANAGER + getAllUsers, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.deleteUser = function (id, password) {
        return this.http.delete(URLUSERMANAGER + id + deleteUser + "?password=" + password, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.editUserMail = function (id, email, password) {
        console.log('e', email);
        return this.http.put(URLUSERMANAGER + id + editMail + "?password=" + password, email, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.editUserPassword = function (id, password, oldpassword) {
        return this.http.put(URLUSERMANAGER + id + editPassword + "?oldpassword=" + oldpassword, password, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.editUsername = function (id, username, password) {
        console.log('u', username);
        return this.http.put(URLUSERMANAGER + id + editUsername + "?password=" + password, username, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.editFirstname = function (id, firstname, password) {
        console.log('f', firstname);
        return this.http.put(URLUSERMANAGER + id + editFirstname + "?password=" + password, firstname, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.editSurname = function (id, surname, password) {
        console.log('s', surname);
        return this.http.put(URLUSERMANAGER + id + editSurname + "?password=" + password, surname, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.createUser = function (role, username, email, firstname, lastname, password, checkedSettings) {
        var obj = { role: role, username: username, email: email, firstname: firstname, lastname: lastname, password: password, checkedSettings: checkedSettings };
        return this.http.post(URLUSERMANAGER + create, obj, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.getUser = function (id) {
        return this.http.get(URLUSERMANAGER + id, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.requestResetLinkUser = function (email) {
        return this.http.put(URLUSERMANAGER + forgotPassword, email, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.resetPassword = function (password, token) {
        return this.http.put(URLUSERMANAGER + resetPassword + "?token=" + token, password, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService.prototype.confirmEmail = function (token) {
        return this.http.get(URLUSERMANAGER + confirmEmail + "?token=" + token, { headers: { Authorization: AUTH }, withCredentials: true })
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }));
    };
    UserManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_0__["HttpClient"]])
    ], UserManagerService);
    return UserManagerService;
}());



/***/ }),

/***/ "./src/app/services/visualmanager.service.ts":
/*!***************************************************!*\
  !*** ./src/app/services/visualmanager.service.ts ***!
  \***************************************************/
/*! exports provided: VisualManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VisualManagerService", function() { return VisualManagerService; });
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var BACKENDURL = "" + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].httpMode + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].contextRoot;
var AUTH = 'Bearer '.concat(localStorage.getItem('ang-token'));
var URLVISUALMANAGER = BACKENDURL + "/visualManager/";
var nowData = '/getSensorDataNow?deviceId=';
var timeData = '/getSensorDataOverTime?deviceId=';
var sensor = '&sensorId=';
var start = '&startTime=';
var end = '&endTime=';
var interval = '&interval=';
var VisualManagerService = /** @class */ (function () {
    function VisualManagerService(http) {
        this.http = http;
    }
    /* Requests device/sensor data just for this moment */
    VisualManagerService.prototype.getNowData = function (deviceId, sensorId, userId, projectId) {
        // deviceId = '4_testdevice';
        // sensorId = '4_testsensor';
        return this.http.get(URLVISUALMANAGER + userId + "/" + projectId + nowData + deviceId + sensor + sensorId, { headers: { 'Authorization': AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    /* Requests device/sensor data over time */
    VisualManagerService.prototype.getTimeData = function (deviceId, sensorId, startTime, endTime, intervalId, userId, projectId) {
        return this.http.get(URLVISUALMANAGER + userId + "/" + projectId + timeData + deviceId + sensor + sensorId + start + startTime + end + endTime + interval + intervalId, { headers: { 'Authorization': AUTH }, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_0__["map"])(function (res) { return res; }));
    };
    VisualManagerService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])(),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"]])
    ], VisualManagerService);
    return VisualManagerService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/dashboard.component.css":
/*!************************************************************!*\
  !*** ./src/app/skeleton/dashboard/dashboard.component.css ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#siteWrapper {\r\nheight: 100%;\r\n}\r\n\r\n#siteContainer {\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 47px;\r\n}\r\n\r\n#sidebar {\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 50px;\r\n}\r\n\r\n#mainContent {\r\n  position: absolute;\r\n  left: 50px;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n#tabView {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  height: 100%;\r\n}\r\n\r\n.middlecardSheet {\r\n  left: 0;\r\n  right: 0;\r\n  height: 100%;\r\n}\r\n\r\n::ng-deep .ui-tabview {\r\n  height: 100%;\r\n}\r\n\r\n::ng-deep .ui-tabview-panels {\r\n  height: calc(100% - 45px);\r\n}\r\n\r\n::ng-deep .ui-tabview-panel {\r\n  height: 100%;\r\n}\r\n\r\n::ng-deep .ui-tabview-nav {\r\n  position: absolute;\r\n  bottom: 0;\r\n  overflow-x: auto;\r\n  left: 0;\r\n  display: inline-flex;\r\n  right: 50px;\r\n}\r\n\r\n#elseBlock {\r\n  align-content: center;\r\n}\r\n\r\n::ng-deep .ui-dropdown-label{\r\n  white-space: normal !important;\r\n}\r\n\r\n::ng-deep .ui-dropdown-item{\r\n  word-break: normal !important;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/dashboard.component.html":
/*!*************************************************************!*\
  !*** ./src/app/skeleton/dashboard/dashboard.component.html ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"siteWrapper\" *ngIf=\"loginStatus > 0; else elseBlock\">\r\n  <div id=\"menuContainer\">\r\n    <main-menu (messageEvent)=\"notifyOfEvent($event)\"></main-menu>\r\n  </div>\r\n\r\n  <div *ngIf=\"dataloaded\" id=\"siteContainer\">\r\n    <!-- Notifications-->\r\n    <p-growl [sticky]=\"false\" [(value)]=\"msgs\"></p-growl>\r\n    <!-- Dialog for confirmation messages-->\r\n    <p-confirmDialog></p-confirmDialog>\r\n\r\n    <div id=\"sidebar\">\r\n      <app-sidebar-content></app-sidebar-content>\r\n    </div>\r\n    <p-dialog *ngIf=\"displayRuleCreationDialog && !displayRuleEditDialog\"\r\n              header=\"Rule Creation\" [(visible)]=\"displayRuleCreationDialog\" [modal]=\"true\" [responsive]=\"true\"\r\n              [width]=\"window.innerWidth-200\" [height]=\"window.innerHeight-600\"\r\n              [contentStyle]=\"{'width':'100%','height':'100%'}\" [minHeight]=\"window.innerHeight\" [closable]=\"false\">\r\n      <app-rule-creation rule_function=\"create\"></app-rule-creation>\r\n    </p-dialog>\r\n    <p-dialog *ngIf=\"displayRuleEditDialog\"\r\n              header=\"Rule Update\" [(visible)]=\"displayRuleEditDialog\" [modal]=\"true\" [responsive]=\"true\"\r\n              [width]=\"window.innerWidth-200\"  [height]=\"window.innerHeight-600\"\r\n\r\n              [contentStyle]=\"{'width':'100%','height':'100%'}\" [minHeight]=\"window.innerHeight\">\r\n      <app-rule-creation rule_function=\"edit\" [rule]=\"editRule\"></app-rule-creation>\r\n    </p-dialog>\r\n    <div *ngIf=\"dataloaded\" id=\"mainContent\">\r\n\r\n\r\n      <ng-container *ngFor=\"let dashboard of project.dashboards; trackBy: dashboardTrack()\">\r\n        <ng-container *ngIf=\"dashboard.id === currentDashboardId\">\r\n\r\n          <p-tabView id=\"tabView\" [controlClose]=\"true\" (onChange)=\"setActiveTab()\"\r\n                     (onClose)=\"deleteConfirmation(currentSheetId)\" orientation=\"bottom\">\r\n\r\n            <ng-container id=\"tabPanelContainer\"\r\n                          *ngFor=\"let sheet of dashboard.sheets; trackBy: trackSheet(); let i= index\">\r\n\r\n              <p-tabPanel id={{sheet.id}} [header]=\"sheet.name\"  [selected]=\"i == 0\"> <!--[closable]=\"true\"-->\r\n                <!--tabbody-->\r\n                <div class=\"middlecardSheet\">\r\n                  <sheet-content style=\"{border: #7A7A7A 2em solid;}\"\r\n                                 *ngIf=\"sheet.id === currentSheetId\" (messageEvent)=\"notifyOfEvent($event)\"></sheet-content>\r\n                </div>\r\n              </p-tabPanel>\r\n            </ng-container>\r\n          </p-tabView>\r\n          <!--\r\n          <p-button (click)=\"this.projectService.generateSheet()\" style=\"position: fixed; right: 0.5em; bottom: 0.5em\"\r\n                    icon=\"fa fa-plus\"></p-button> -->\r\n\r\n        </ng-container>\r\n      </ng-container>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n<!-- in case the user is not authorized to be here-->\r\n<ng-template #elseBlock>\r\n  <p-card title=\"Error!\" [style]=\"{width: '360px'}\" styleClass=\"ui-card-shadow\">\r\n    <p>You're not authorized to be here. Maybe you just need to login? </p>\r\n    <p-footer>\r\n      <button pButton [routerLink]=\"['']\">Login</button>\r\n    </p-footer>\r\n  </p-card>\r\n</ng-template>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/dashboard.component.ts":
/*!***********************************************************!*\
  !*** ./src/app/skeleton/dashboard/dashboard.component.ts ***!
  \***********************************************************/
/*! exports provided: DashboardComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DashboardComponent", function() { return DashboardComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./rules/service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _rules_service_rule_management_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rules/service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var DashboardComponent = /** @class */ (function () {
    function DashboardComponent(dataService, projectService, overlayContainer, confirmationService, ruleCreationService, ruleManagementService, router) {
        this.dataService = dataService;
        this.projectService = projectService;
        this.overlayContainer = overlayContainer;
        this.confirmationService = confirmationService;
        this.ruleCreationService = ruleCreationService;
        this.ruleManagementService = ruleManagementService;
        this.router = router;
        this.dataloaded = false;
        this.displayRuleCreationDialog = false;
        this.displayRuleManagement = false;
        this.displayRuleEditDialog = false;
        this.window = window;
    }
    DashboardComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.msgs = [];
        this.dataService.userData.subscribe(function (value) { return _this.user = value; });
        this.dataService.currentLoginStatus
            .subscribe(function (value) {
            _this.loginStatus = value;
            if (value < 1) {
                _this.router.navigate(['unauthorized']);
            }
        });
        this.dataService.projectData
            .subscribe(function (project) {
            _this.project = project;
            _this.dataloaded = true;
        });
        this.dataService.currentDashboardId
            .subscribe(function (dashboardId) { return _this.currentDashboardId = dashboardId; });
        this.dataService.currentSheetId
            .subscribe(function (sheetId) { return _this.currentSheetId = sheetId; });
        this.dataService.currentTheme.subscribe(function (value) { return _this.changeTheme(value); });
        this.ruleCreationService.displayManagementStatusUpdated.subscribe(function (display) {
            _this.displayRuleManagement = display;
        });
        this.ruleCreationService.displayStatusUpdated.subscribe(function (display) {
            _this.displayRuleCreationDialog = display;
        });
        this.ruleManagementService.editRuleStatusUpdated.subscribe(function (rule) {
            if (rule) {
                _this.editRule = rule;
            }
        });
        this.ruleManagementService.displayRuleUpdateComponent.subscribe(function (display) {
            _this.displayRuleEditDialog = display;
        });
    };
    /**
     * This method sets the active tab closeable to offer the opportunity to delete a sheet.
     * Furthermore it set the id of the active tab for global access.
     */
    DashboardComponent.prototype.setActiveTab = function () {
        var tabPanel = this.tabView.findSelectedTab();
        this.currentSheetId = tabPanel.viewContainer.element.nativeElement.id;
        this.dataService.changeCurrentSheetId(this.currentSheetId);
        var lastTabPanel;
        for (var i = 0; i < this.tabView.tabs.length; i++) {
            if (this.tabView.tabs[i].id === this.lastTabId) {
                lastTabPanel = this.tabView.tabs[i];
            }
        }
        tabPanel.closable = true;
        if (lastTabPanel !== undefined) {
            lastTabPanel.closable = false;
        }
        this.lastTabId = tabPanel.id;
    };
    DashboardComponent.prototype.changeTheme = function (theme) {
        if (theme !== undefined) {
            this.overlayContainer.getContainerElement().classList.add(theme);
            this.componentCssClass = theme;
        }
    };
    /**
     * This method displays a confirmation window for deleting a sheet. By accepting
     * the method {@link DashboardComponent#deleteSheet} gets called
     * @param sheetid -the id of the sheet
     */
    DashboardComponent.prototype.deleteConfirmation = function (sheetid) {
        var _this = this;
        var tabPanel = this.tabView.tabs.find(function (i) { return i.viewContainer.element.nativeElement.id === sheetid; });
        this.confirmationService.confirm({
            message: "Do you want to delete the sheet " + tabPanel.header + " ?",
            header: 'Delete Sheet',
            icon: 'fa fa-trash',
            accept: function () {
                // delete sheet
                console.log('sheetid: ', sheetid);
                _this.projectService.deleteSheet(sheetid);
            },
            reject: function () {
                _this.msgs = [];
                _this.msgs = [{ severity: 'info', summary: 'Canceled', detail: 'Canceled deletion.' }];
            }
        });
    };
    /*Tracking functions for ngFor Directive in dashboard.component.html*/
    DashboardComponent.prototype.trackSheet = function (index, sheet) {
        return sheet ? sheet[index] : undefined;
    };
    DashboardComponent.prototype.dashboardTrack = function (index, item) {
        return item;
    };
    DashboardComponent.prototype.notifyOfEvent = function (event) {
        this.msgs = [];
        this.msgs.push(event);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], DashboardComponent.prototype, "componentCssClass", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])(primeng_primeng__WEBPACK_IMPORTED_MODULE_5__["TabView"]),
        __metadata("design:type", primeng_primeng__WEBPACK_IMPORTED_MODULE_5__["TabView"])
    ], DashboardComponent.prototype, "tabView", void 0);
    DashboardComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-dashboard',
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"]],
            template: __webpack_require__(/*! ./dashboard.component.html */ "./src/app/skeleton/dashboard/dashboard.component.html"),
            styles: [__webpack_require__(/*! ./dashboard.component.css */ "./src/app/skeleton/dashboard/dashboard.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_project_service__WEBPACK_IMPORTED_MODULE_6__["ProjectService"],
            _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__["OverlayContainer"],
            primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"],
            _rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__["RuleCreationService"],
            _rules_service_rule_management_service__WEBPACK_IMPORTED_MODULE_8__["RuleManagementService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])
    ], DashboardComponent);
    return DashboardComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/actions-schema.ts":
/*!************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/actions-schema.ts ***!
  \************************************************************/
/*! exports provided: ActionsFilterSchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionsFilterSchema", function() { return ActionsFilterSchema; });
var ActionsFilterSchema = {
    children: [
        {
            id: 1,
            name: 'Entity Situation',
            icon: 'universal-access',
            children: [
                {
                    name: 'All Devices',
                    children: []
                },
                {
                    name: 'Living',
                    children: [
                        {
                            name: 'Temperature',
                            condition_attribute: 'temperature',
                            living: true,
                            properties: [
                                {
                                    text: 'Then change temperature to (°C)',
                                    type: 'checkbox',
                                    type_options: 'slider',
                                    min: 0,
                                    max: 100
                                }
                            ],
                            children: []
                        }
                    ]
                },
                {
                    name: 'Non Living',
                    children: [
                        {
                            name: 'Device',
                            children: [
                                {
                                    name: 'Light',
                                    living: false,
                                    condition_attribute: 'state',
                                    itemtype: 'Light',
                                    properties: [
                                        {
                                            text: 'Then change brightness to(%)',
                                            type: 'number',
                                            type_options: 'slider',
                                            min: 0,
                                            max: 100
                                        },
                                        {
                                            text: 'Then switch to',
                                            type: 'text',
                                            type_options: 'inputSwitch'
                                        }
                                    ],
                                    children: []
                                },
                                {
                                    name: 'Movement',
                                    condition_attribute: 'state',
                                    living: false,
                                    itemtype: 'Movement',
                                    properties: [
                                        {
                                            text: 'Then change movement detection',
                                            type: 'text',
                                            type_options: 'inputSwitch'
                                        }
                                    ],
                                    children: []
                                },
                                {
                                    name: 'Place',
                                    living: false,
                                    state: 'place',
                                    condition_attribute: 'place',
                                    properties: [
                                        {
                                            text: 'Then change device located',
                                            type: 'text',
                                            type_options: 'dropdown',
                                            selects: [
                                                { label: 'Apartment', value: 'Apartment' },
                                                { label: 'City', value: 'City' }
                                            ]
                                        }
                                    ],
                                    children: []
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            id: 2,
            name: 'Communication',
            icon: 'wechat',
            children: [
                {
                    name: 'E-Mail',
                    condition_attribute: 'email',
                    properties: [
                        {
                            text: 'Then send E-Mail to',
                            type: 'text',
                            type_options: 'input'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Telephone number',
                    condition_attribute: 'telephonenumber',
                    properties: [
                        {
                            text: 'Then dial telephone number',
                            type: 'number',
                            type_options: 'input'
                        }
                    ],
                    children: []
                }
            ]
        },
        {
            id: 3,
            name: 'Situation',
            icon: 'automobile',
            children: [
                {
                    name: 'Activity',
                    condition_attribute: 'activity',
                    properties: [
                        {
                            text: 'Then activity is',
                            type: 'text',
                            type_options: 'input'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Traffic Situation',
                    condition_attribute: 'trafficsituation',
                    properties: [
                        {
                            text: 'Then traffic situation is',
                            type: 'text',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Traffic High', value: 'high' },
                                { label: 'Traffic Middle', value: 'middle' },
                                { label: 'Traffic Low', value: 'low' }
                            ]
                        }
                    ],
                    children: []
                }
            ]
        },
        {
            id: 4,
            name: 'Service',
            icon: 'cloud',
            children: [
                {
                    name: 'Physical Service',
                    condition_attribute: 'servicetype',
                    physical: true,
                    properties: [
                        {
                            text: 'Then physical service is',
                            type: 'text',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Post', value: 'Post' },
                                { label: 'Package', value: 'Package' }
                            ]
                        }
                    ],
                    children: []
                },
                {
                    name: 'Non Physical service',
                    condition_attribute: 'entry',
                    physical: false,
                    properties: [
                        {
                            text: 'Then non physical service is',
                            type: 'text',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Entry in Database', value: 'Entry in database' },
                                { label: 'Entry in Logs', value: 'Entry in logs' },
                                { label: 'Data from Web Service', value: 'Data from web service' }
                            ]
                        }
                    ],
                    children: []
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.css":
/*!***********************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.css ***!
  \***********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.html":
/*!************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.html ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g\">\r\n  <div class=\"ui-lg-12 ui-md-12\">\r\n    <p-autoComplete [(ngModel)]=\"existingAction\"\r\n                    [suggestions]=\"actions\"\r\n                    field=\"name\"\r\n                    (completeMethod)=\"searchAction($event)\"\r\n                    [dropdown]=\"true\"\r\n                    [size]=\"73\"\r\n                    placeholder=\"Select action\"\r\n                    (onSelect)=\"addSelectedAction(existingAction);\">\r\n    </p-autoComplete>\r\n  </div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.ts":
/*!**********************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.ts ***!
  \**********************************************************************************************/
/*! exports provided: ActionCombineComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionCombineComponent", function() { return ActionCombineComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var ActionCombineComponent = /** @class */ (function () {
    function ActionCombineComponent(ruleCreationService, ruleManagerService) {
        this.ruleCreationService = ruleCreationService;
        this.ruleManagerService = ruleManagerService;
        this.actions = [];
    }
    /**
     * This function loads at the beginning all rules
     * and sets all its related actions to the local action array list.
     */
    ActionCombineComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ruleManagerService.getAllRules(this.ruleCreationService.loggedUserId)
            .subscribe(function (response) {
            for (var _i = 0, response_1 = response; _i < response_1.length; _i++) {
                var rule = response_1[_i];
                _this.actions = _this.actions = _this.actions.concat(rule.ruleActions);
            }
            _this.actions = _this.actions.concat(_this.ruleCreationService.getAllLocalActions());
            var Ids = [];
            var actionsResult = [];
            for (var _a = 0, _b = _this.actions; _a < _b.length; _a++) {
                var action = _b[_a];
                if (!Ids[action.ID]) {
                    Ids[action.ID] = action;
                    actionsResult.push(action);
                }
            }
            _this.actions = actionsResult;
            _this.ruleCreationService.allActionList = _this.actions;
        });
    };
    /**
     * This function is for existing actions filter
     * @param event is selected component event
     */
    ActionCombineComponent.prototype.searchAction = function (event) {
        this.actions = this.ruleCreationService.filterAutocomplete(event.query, this.ruleCreationService.allActionList, 'name');
    };
    /**
     * Selected action will be added to the action array
     * In order to combine with different action, "AND" default operator value will be defined
     * for every actions.
     *
     * @param selectedAction is selected existing action parameter
     */
    ActionCombineComponent.prototype.addSelectedAction = function (selectedAction) {
        this.ruleCreationService.actionList.push(selectedAction);
        this.actions.push(selectedAction);
        if (this.ruleCreationService.actionList.length > 0) {
            this.ruleCreationService.selectActionOperatorList.push({ id: 0, operator: 'AND' });
        }
        this.existingAction = undefined;
        this.ruleCreationService.actionOverlay.hide();
    };
    ActionCombineComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-action-combine',
            template: __webpack_require__(/*! ./action-combine.component.html */ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.html"),
            styles: [__webpack_require__(/*! ./action-combine.component.css */ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.css")]
        }),
        __metadata("design:paramtypes", [_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_1__["RuleCreationService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__["RuleManagerService"]])
    ], ActionCombineComponent);
    return ActionCombineComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action/action.component.css":
/*!*******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action/action.component.css ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".new_action_button_size{\r\n  width:177px;\r\n}\r\n.save_action{\r\n  padding-left: 0px;\r\n}\r\n.type_option_elements{\r\n  padding-left: 9px;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action/action.component.html":
/*!********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action/action.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div style=\"font-size: 14px;\">\r\n  <p-messages [(value)]=\"messeges\"></p-messages>\r\n</div>\r\n<div class=\"ui-g\">\r\n  <div class=\"ui-g-4\" style=\"margin-top: 13px\">\r\n    <div *ngFor=\"let action of actionsFilterSchema.children; let actionIndex = index;\"><br *ngIf=\"actionIndex !== 0\">\r\n      <i class=\"fa fa-{{action.icon}}\" style=\"width:20px;vertical-align:middle\"></i>\r\n      <p-checkbox name=\"name\" value=\"{{action.name}}\" label=\"{{action.name}}\"\r\n                  [(ngModel)]=\"actionCheckboxSelectedValues[action.id]\"\r\n                  (click)=\"changeSelectedValues(actionCheckboxSelectedValues)\"></p-checkbox>\r\n    </div>\r\n  </div>\r\n  <div class=\"ui-g-8\">\r\n    <div class=\"ui-g-12\">\r\n      <p-autoComplete [(ngModel)]=\"filterValue\" field=\"leafChild.name\"\r\n                      [suggestions]=\"filterResultData | toItem\" (completeMethod)=\"filterAction($event)\"\r\n                      (onDropdownClick)=\"clearFilterValue();\"\r\n                      [size]=\"42\"\r\n                      [minLength]=\"1\" [dropdown]=\"true\">\r\n        <ng-template let-action pTemplate=\"item\">\r\n          <div class=\"ui-helper-clearfix\" style=\"border-bottom:1px solid #D5D5D5\">\r\n            <div style=\"font-size:16px;margin:10px 10px 0 0\">\r\n              <i class=\"fa fa-{{action.first_parent_icon}}\" style=\"width:20px;vertical-align:middle\"></i>\r\n              <span *ngIf=\"action.parents.length > 0\">\r\n              <span *ngFor=\"let parent of action.parents\">{{ parent.name }} - </span></span>\r\n              <span>{{ action.leafChild.name }}</span>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </p-autoComplete>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div *ngIf=\"filterValue.leafChild && filterValue.leafChild.name\">\r\n        <p-autoComplete [(ngModel)]=\"selectedCondition\"\r\n                        [suggestions]=\"filterValue.leafChild.properties\"\r\n                        field=\"text\"\r\n                        (completeMethod)=\"searchCondition($event)\"\r\n                        [dropdown]=\"true\"\r\n                        [size]=\"42\"\r\n                        placeholder=\"Select Condition\">\r\n        </p-autoComplete>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12\" *ngIf=\"selectedCondition.text\">\r\n      <strong>{{ selectedCondition.text }}</strong>\r\n    </div>\r\n    <div class=\"ui-g-12 type_option_elements\">\r\n      <div *ngIf=\"selectedCondition.type_options === 'input'\">\r\n        <input type=\"{{selectedCondition.type}}\" pInputText [(ngModel)]=\"filterValue.leafChild.conditionValue\"/>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'multiselect'\">\r\n        <p-multiSelect [options]=\"selectedCondition.selects\" [(ngModel)]=\"filterValue.leafChild.conditionValue\">\r\n        </p-multiSelect>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'inputSwitch'\">\r\n        <p-inputSwitch [(ngModel)]=\"filterValue.leafChild.conditionValue\"></p-inputSwitch>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'calender'\">\r\n        <p-calendar [(ngModel)]=\"filterValue.leafChild.conditionValue\" dateFormat=\"dd.mm.yy\"></p-calendar>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'time'\">\r\n        <p-calendar [(ngModel)]=\"filterValue.leafChild.conditionValue\" [timeOnly]=\"true\"\r\n                    showTime=\"true\"></p-calendar>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'dropdown'\">\r\n        <p-dropdown [options]=\"selectedCondition.selects\" placeholder=\"Select\"\r\n                    [(ngModel)]=\"filterValue.leafChild.conditionValue\"></p-dropdown>\r\n      </div>\r\n      <div style=\"padding-left:50px;\">\r\n        <div *ngIf=\"selectedCondition.type_options === 'checkbox'\">\r\n          <p-checkbox [(ngModel)]=\"filterValue.leafChild.conditionValue\" binary=\"true\"></p-checkbox>\r\n        </div>\r\n      </div>\r\n      <div *ngIf=\"selectedCondition.type_options === 'slider'\">\r\n        <div class=\"ui-lg-5\">\r\n          <span style=\"padding: 48%\">{{ filterValue.leafChild.conditionValue }}</span>\r\n          <p-slider [(ngModel)]=\"filterValue.leafChild.conditionValue\" [min]=\"selectedCondition.min\"\r\n                    [max]=\"selectedCondition.max\"></p-slider>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12\" *ngIf=\"filterValue.leafChild !== undefined && filterValue.leafChild.conditionValue !== undefined\">\r\n      <div class=\"ui-g-12 ui-md-12 ui-lg-6 save_action\">\r\n        <button pButton *ngIf=\"action_function !== 'edit'\" type=\"button\" label=\"Save action\"\r\n                (click)=\"saveNewAction(filterValue)\" class=\"new_action_button_size\"></button>\r\n        <button pButton *ngIf=\"action_function === 'edit'\" type=\"button\" label=\"Update action\"\r\n                (click)=\"updateAction(filterValue)\" class=\"new_action_button_size\"></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/action/action.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/action/action.component.ts ***!
  \******************************************************************************/
/*! exports provided: ActionComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActionComponent", function() { return ActionComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/condition */ "./src/app/models/frontend/rule_module/condition.ts");
/* harmony import */ var _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/ruleaction */ "./src/app/models/frontend/rule_module/ruleaction.ts");
/* harmony import */ var _actions_schema__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../actions-schema */ "./src/app/skeleton/dashboard/rules/actions-schema.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _service_search_device_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../service/search-device.service */ "./src/app/skeleton/dashboard/rules/service/search-device.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../service/platform-device-management.service */ "./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var ActionComponent = /** @class */ (function () {
    function ActionComponent(ruleCreationService, searchDeviceService, ruleManagementService, platformDeviceManagement) {
        this.ruleCreationService = ruleCreationService;
        this.searchDeviceService = searchDeviceService;
        this.ruleManagementService = ruleManagementService;
        this.platformDeviceManagement = platformDeviceManagement;
        this.filterParents = [];
        this.filterValue = {
            parents: [],
            leafChild: {}
        };
        this.messeges = [];
        this.actionsFilterSchema = _actions_schema__WEBPACK_IMPORTED_MODULE_3__["ActionsFilterSchema"];
        this.actionCheckboxSelectedValues = [];
        this.selectedCondition = {};
        this.filterData = [];
    }
    /**
     * Changes checkbox category value
     *
     * @param selectedValues after checkbox is clicked
     */
    ActionComponent.prototype.changeSelectedValues = function (selectedValues) {
        this.actionCheckboxSelectedValues = selectedValues;
    };
    /**
     * This function sets end results of action Json  Schema.
     * After recrusive search sets parents and last child values of all children.
     *
     * @param leafChild last child object
     * @param parents all parents of this child
     */
    ActionComponent.prototype.setElementByActionFilter = function (leafChild, parents) {
        var element = { leafChild: {}, parents: [] };
        var parent = { name: undefined, icon: undefined };
        for (var _i = 0, parents_1 = parents; _i < parents_1.length; _i++) {
            var parentValue = parents_1[_i];
            if (parentValue.name) {
                parent.name = parentValue.name;
                parent.icon = parentValue.icon;
                element.parents.push(parent);
                parent = { name: undefined, icon: undefined };
            }
        }
        element.leafChild = leafChild;
        this.filterData.push(element);
        this.filterResultData = this.filterData;
    };
    /**
     * Here will be all action related data loaded for creating the rule as well as for updating the rule.
     * If action_function has value ‘edit,’  then this component will be used for updating the rule.
     */
    ActionComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setActionFilter(this.actionsFilterSchema);
        this.ruleCreationService.actionsFilterObservable.subscribe(function (filter) {
            _this.actionsFilterSchema = filter;
            _this.filterParents = [];
            _this.filterData = [];
            _this.setActionFilter(_this.actionsFilterSchema);
        });
        if (this.action_function === 'edit') {
            this.ruleManagementService.editActionStatusUpdated
                .subscribe(function (respondAction) {
                var respond = respondAction;
                if (_this.inputEditAction.ID === respond.action.ID && _this.editActionIndex === respond.actionIndex) {
                    _this.filterData = [];
                    var filterShema_1 = { children: [] };
                    _this.actionsFilterSchema.children.forEach(function (child) {
                        filterShema_1.children.push(child);
                    });
                    _this.setActionFilter(filterShema_1);
                    _this.filterResultData.forEach(function (data) {
                        if (data.leafChild && data.leafChild.properties) {
                            data.leafChild.properties.forEach(function (property) {
                                if (respond.action.name.indexOf(property.text) !== -1) {
                                    if (respond.action.condition[data.leafChild.condition_attribute]) {
                                        _this.filterValue = data;
                                        _this.selectedCondition = property;
                                        _this.addFilteredValue(_this.filterValue);
                                        _this.filterValue.leafChild.conditionValue = respond.action.condition[data.leafChild.condition_attribute];
                                    }
                                }
                            });
                        }
                    });
                }
                var r = _this.ruleCreationService.creationRule;
                _this.setActionFilter(_this.actionsFilterSchema);
                _this.platformDeviceManagement
                    .addAllDevices(r.projectID, r.userId, r.platformID);
            });
        }
    };
    /**
     * This function sets actions form Action Json Scheme
     *
     * @param parent. Each recursive setActionFilter function gets old child as a parent parameter.
     */
    ActionComponent.prototype.setActionFilter = function (parent) {
        this.filterParents.push(parent);
        if (parent.children.length > 0) {
            for (var _i = 0, _a = parent.children; _i < _a.length; _i++) {
                var child = _a[_i];
                this.setActionFilter(child);
            }
            var size = this.filterParents.length;
            this.filterParents = this.filterParents.slice(0, size - 1);
        }
        else {
            var size = this.filterParents.length;
            this.filterParents = this.filterParents.slice(0, size - 1);
            var lastParentIsChild = parent;
            this.setElementByActionFilter(lastParentIsChild, this.filterParents);
        }
    };
    /**
     * Clears all selected values for action
     */
    ActionComponent.prototype.clearFilterValue = function () {
        this.filterValue.leafChild = {};
        this.selectedCondition = {};
    };
    /**
     * This filter function is for selected checkbox.
     * Search the action for selected checkbox category
     *
     * @param event is clicked component event
     */
    ActionComponent.prototype.filterAction = function (event) {
        var _this = this;
        this.filterResultData = [];
        var isSet;
        this.filterData.forEach(function (value) {
            var action = value;
            var countCheckbox = 0;
            for (var Id in _this.actionCheckboxSelectedValues) {
                if (Id && _this.actionCheckboxSelectedValues[Id].length > 0) {
                    var actionName = _this.actionCheckboxSelectedValues[Id][0];
                    if (action.parents.length > 0) {
                        if (action.parents[0].name === actionName) {
                            countCheckbox++;
                        }
                    }
                    else {
                        if (action.leafChild.name === actionName) {
                            countCheckbox++;
                        }
                    }
                }
            }
            if (countCheckbox > 0 || _this.actionCheckboxSelectedValues.length === 0) {
                isSet = false;
                for (var _i = 0, _a = action.parents; _i < _a.length; _i++) {
                    var parent_1 = _a[_i];
                    if (parent_1 && parent_1.name && parent_1.name.toLowerCase()
                        .indexOf(event.query.toLowerCase()) === 0) {
                        if (!isSet) {
                            _this.filterResultData.push(action);
                            isSet = true;
                        }
                    }
                }
                if (!isSet && action.leafChild.name.toLowerCase()
                    .indexOf(event.query.toLowerCase()) === 0) {
                    _this.filterResultData.push(action);
                    isSet = true;
                }
            }
        });
    };
    /**
     * After category and condition is selected, then
     * condition values will be added
     *
     * @param actionConditionValues is user selected action condition values
     */
    ActionComponent.prototype.addFilteredValue = function (actionConditionValues) {
        this.filteredActionConditionValues = actionConditionValues;
    };
    /**
     * After action condition is selected,
     * this function sets all attributes for back-end rule model.
     *
     * @param filterValue user selected value
     * @returns RuleAction This class is for send rule request function
     */
    ActionComponent.prototype.getAction = function (filterValue) {
        var leafChild = filterValue.leafChild;
        var value = leafChild.conditionValue;
        var condition = new _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_1__["Condition"]();
        var action = new _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_2__["RuleAction"]();
        if (value !== undefined) {
            condition.days = undefined;
            condition[leafChild.condition_attribute] = value;
            action.condition = condition;
            if (filterValue.parents[0] && filterValue.parents[0].name === 'Communication') {
                condition.communicationtype = leafChild.name;
                condition.notification = leafChild.name;
            }
            if (leafChild.physical) {
                condition.physical = leafChild.physical;
            }
            if (leafChild.living) {
                condition.living = leafChild.living;
            }
            if (leafChild.state) {
                condition.state = leafChild.state;
            }
            if (leafChild.itemtype) {
                condition.itemtype = leafChild.itemtype;
            }
        }
        switch (condition.state) {
            case 0: {
                condition.state = 'OFF';
                value = condition.state;
                break;
            }
            case 1: {
                condition.state = 'ON';
                value = condition.state;
                break;
            }
            default: {
                break;
            }
        }
        action.name = " " + this.selectedCondition.text + "  " + value + " ";
        action.condition = condition;
        action = this.searchDeviceService.searchDeviceFromSelectedAction(action, leafChild, this.selectedCondition);
        return action;
    };
    /**
     * This function is filtering condition for each selected category
     * This is second autocomplete component from new condition selection overlay
     *
     * @param event is clicked component event
     */
    ActionComponent.prototype.searchCondition = function (event) {
        var _this = this;
        var allactions = this.filterValue.leafChild.properties;
        if (allactions.length > 0) {
            this.ruleCreationService.allactions = allactions;
        }
        else {
            allactions = this.ruleCreationService.allactions;
        }
        if (allactions && this.ruleCreationService.devices) {
            var properties = this.ruleCreationService.filterAutocomplete(event.query, allactions, 'text');
            this.filterValue.leafChild.properties = properties;
        }
        else {
            if (this.ruleCreationService.creationRule.projectID === '') {
                this.messeges.push({
                    severity: 'error',
                    summary: '',
                    detail: 'Project is not selected'
                });
                setTimeout(function () {
                    _this.messeges = [];
                }, 4000);
            }
            else {
                this.messeges.push({
                    severity: 'error',
                    summary: '',
                    detail: 'Platform devices, which are connected to the project, are not configured'
                });
                setTimeout(function () {
                    _this.messeges = [];
                }, 4000);
            }
        }
    };
    /**
     * After action is created, then add new action to actionList
     * @param RuleAction filterValue action value
     */
    ActionComponent.prototype.saveNewAction = function (filterValue) {
        this.ruleCreationService.addAction(this.getAction(filterValue));
        this.clearFilterValue();
        this.ruleCreationService.actionOverlay.hide();
    };
    /**
     * This function is for rule update component.
     * If user changes the old action, the new action will be combined
     * to the rule.
     * @param RuleAction filterValue is action value
     */
    ActionComponent.prototype.updateAction = function (filterValue) {
        var action = this.getAction(filterValue);
        action.ID = this.inputEditAction.ID;
        this.ruleCreationService.actionList.splice(this.editActionIndex, 1, action);
        var resendData = {
            action: action,
            oldActionIndex: this.editActionIndex
        };
        this.ruleManagementService.changeExistingActionStatus.emit(resendData);
        this.clearFilterValue();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], ActionComponent.prototype, "action_function", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_2__["RuleAction"])
    ], ActionComponent.prototype, "inputEditAction", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], ActionComponent.prototype, "editActionIndex", void 0);
    ActionComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-action',
            template: __webpack_require__(/*! ./action.component.html */ "./src/app/skeleton/dashboard/rules/creation/action/action.component.html"),
            styles: [__webpack_require__(/*! ./action.component.css */ "./src/app/skeleton/dashboard/rules/creation/action/action.component.css")],
            providers: [_models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_1__["Condition"], _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_2__["RuleAction"], _service_search_device_service__WEBPACK_IMPORTED_MODULE_5__["SearchDeviceService"]]
        }),
        __metadata("design:paramtypes", [_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__["RuleCreationService"],
            _service_search_device_service__WEBPACK_IMPORTED_MODULE_5__["SearchDeviceService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_6__["RuleManagementService"],
            _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_7__["PlatformDeviceManagementService"]])
    ], ActionComponent);
    return ActionComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.css":
/*!*******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/rule-creation.component.css ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".rule_creation {\r\n  background-color: #cccccc;\r\n}\r\n.description-border {\r\n  border-style: solid;\r\n  border-color: #00a6dd;\r\n  border-top: none;\r\n  border-left: none;\r\n  border-right: none;\r\n  border-width: 2px;\r\n}\r\n.rule_create_button {\r\n  width: 110px !important;\r\n}\r\n.rule_creation_padding {\r\n  padding-top: 10px;\r\n  padding-left: 20px;\r\n  padding-right: 20px;\r\n}\r\n.rule_name {\r\n  padding-left: 12px;\r\n}\r\n.activation {\r\n  padding-left: 20px !important;\r\n}\r\n.rule_creation_label{\r\n  margin-bottom: 10px;\r\n}\r\n.condition_action_title {\r\n  background-color: #eff1f4;\r\n  padding-left: 24px;\r\n\r\n}\r\n.conditions, .actions {\r\n  border: solid;\r\n  border-top: none;\r\n  border-bottom: none;\r\n  border-left: none;\r\n  border-color: #cccccc;\r\n}\r\n.operator-box {\r\n  padding: 5px;\r\n}\r\n.operator-plus-box{\r\n  padding: 5px;\r\n}\r\n.remove-button {\r\n  border-color: white !important;\r\n  float: right;\r\n  color: black;\r\n  background-color: transparent;\r\n}\r\n.last_distance {\r\n  padding-bottom: 70px;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.html":
/*!********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/rule-creation.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-growl [(value)]=\"messeges\" life=\"4000\"></p-growl>\r\n<div class=\"ui-g rule_creation\">\r\n  <div class=\"ui-lg-12 ui-md-12\">\r\n        <span class=\"ui-float-label rule_name\">\r\n        <div class=\"first rule_creation_label\">Name</div>\r\n        <input id=\"float-input-name\" type=\"text\" [(ngModel)]=\"creationRule.name\" pInputText\r\n               >\r\n       </span>\r\n  </div>\r\n  <div class=\"ui-lg-12 ui-md-12\">\r\n      <span class=\"ui-float-label rule_name\" size=\"200\">\r\n        <div class=\"first rule_creation_label\">Description</div>\r\n        <input id=\"float-input-description\" type=\"text\" [(ngModel)]=\"creationRule.description\" pInputText>\r\n       </span>\r\n  </div>\r\n  <div class=\"ui-lg-12 ui-md-12 activation\">\r\n    <div class=\"first rule_creation_label\">\r\n      <span>Rule Notification</span>\r\n    </div>\r\n    <p-inputSwitch [(ngModel)]=\"creationRule.notify\"></p-inputSwitch>\r\n  </div>\r\n  <div class=\"ui-lg-12 ui-md-12 activation\">\r\n    <div class=\"first rule_creation_label\">\r\n      <span>Rule Activation</span>\r\n    </div>\r\n    <p-inputSwitch [(ngModel)]=\"creationRule.active\"></p-inputSwitch>\r\n\r\n  </div>\r\n  <div class=\"ui-lg-10 ui-md-10 description-border rule_creation_padding\">\r\n    <p-dropdown [options]=\"projects\"\r\n                [(ngModel)]=\"creationRule.projectID\"\r\n                (onClick)=\"projectSelected(creationRule.projectID);\"\r\n                placeholder=\"Select Project\"   [style]=\"{'width':'250px', 'margin-right':'10px'}\"></p-dropdown>\r\n    <p-dropdown [options]=\"platforms\"\r\n                [(ngModel)]=\"creationRule.platformID\"\r\n                (onClick)=\"addAllDevices(creationRule.platformID)\"\r\n                placeholder=\"Select platform\" [style]=\"{'width':'250px'}\"></p-dropdown>\r\n  </div>\r\n  <div class=\"ui-lg-2 ui-md-2 description-border\">\r\n    <button pButton type=\"button\" *ngIf=\"rule_function !== 'edit'\" class=\"rule_create_button ui-button-secondary\" label=\"Cancel\"\r\n            (click)=\"closeRuleCreationDisplay()\"></button>\r\n    <button pButton type=\"button\" *ngIf=\"rule_function === 'edit'\" class=\"rule_create_button ui-button-secondary\" label=\"Cancel\"\r\n            (click)=\"closeRuleUpdateDisplay()\"></button>\r\n\r\n\r\n    <p-splitButton label=\"Save\" *ngIf=\"rule_function === 'create'\"\r\n                   menuStyleClass=\"operatorMenu\"\r\n                   class=\"rule_create_button\"\r\n                   (onClick)=\"saveTriggerAndRule(true);\"\r\n                   [model]=\"saveRuleLables\">\r\n    </p-splitButton>\r\n    <p-splitButton label=\"Update\" *ngIf=\"rule_function === 'edit'\"\r\n                   menuStyleClass=\"operatorMenu\"\r\n                   class=\"rule_create_button\"\r\n                   (onClick)=\"updateTriggerAndRule(true);\"\r\n                   [model]=\"updateRuleLables\">\r\n    </p-splitButton>\r\n  </div>\r\n  <div class=\"ui-lg-6 ui-md-6 condition_action_title conditions\">\r\n    <strong>If: add one or more conditions</strong>\r\n    <br>\r\n    <p-scrollPanel [style]=\"{height: '90%', backgroundColor:'transparent', borderColor:'transparent'}\">\r\n      <div class=\"ui-lg-12 ui-md-12 conditions-body\" id=\"conditions\">\r\n        <div *ngFor=\"let trigger of triggerList; let triggerIndex = index\"  [ngClass]=\"{'last_distance': triggerIndex === triggerList.length - 1}\"\r\n             (drop)=\"drop($event,triggerIndex)\"\r\n             draggable=\"true\"\r\n             (dragstart)=\"drag($event,triggerList[triggerIndex],selectedOperatorList[triggerIndex-1],triggerIndex)\"\r\n             (dragover)=\"allowDrop($event)\">\r\n          <p-card [style]=\"{width:'96%'}\">\r\n            <div>{{ trigger.name }}</div>\r\n            <p-header>\r\n\r\n              <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"remove-button ui-button-secondary\" iconPos=\"right\"\r\n                      (click)=\"removeTriggerOnlyThisRule(trigger,triggerIndex,removeTriggerOverlay,$event);\"></button>\r\n              <p-overlayPanel #removeTriggerOverlay [appendTo]=\"'body'\">\r\n                <h4> This condition can be used in another rule. </h4>\r\n                <h4> Do you want to remove for all rules ? </h4>\r\n                <button pButton type=\"button\" label=\"Remove all\" (click)=\"removeTriggerForAllRules(trigger,triggerIndex,removeTriggerOverlay,$event);\"></button>\r\n                <button pButton type=\"button\" label=\"Remove only this rule\" (click)=\"removeTriggerOnlyThisRule(trigger,triggerIndex,removeTriggerOverlay,$event);\" ></button>\r\n              </p-overlayPanel>\r\n              <button *ngIf=\"rule_function === 'edit'\" pButton type=\"button\" icon=\"fa fa-edit\" class=\"remove-button ui-button-secondary\" iconPos=\"right\"\r\n                      (click)=\"editTriggerOnlyThisRule(trigger,triggerIndex,editIconOverlay,updateTriggerOverlay,$event);\"></button>\r\n              <p-overlayPanel #editIconOverlay [appendTo]=\"'body'\">\r\n                <h4> This condition can be used in another rule. </h4>\r\n                <h4> Do you want to edit for all rules ? </h4>\r\n                <button pButton type=\"button\" label=\"Edit all\" (click)=\"editTriggerForAllRules(trigger,triggerIndex,editIconOverlay,updateTriggerOverlay,$event);\"></button>\r\n                <button pButton type=\"button\" label=\"Edit only this rule\" (click)=\"editTriggerOnlyThisRule(trigger,triggerIndex,editIconOverlay,updateTriggerOverlay,$event);\" ></button>\r\n              </p-overlayPanel>\r\n              <p-overlayPanel #updateTriggerOverlay [appendTo]=\"'body'\"\r\n                              [style]=\"{ 'border': '2px solid rgb(35, 153, 229)','background-color' : 'rgb(224, 224, 224)', 'padding-top' :'8px','padding-bottom' :'8px'}\">\r\n                <p-accordion [multiple]=\"true\"  [style]=\"{width: '730px'}\"  >\r\n\r\n                  <p-accordionTab header=\"Update Condition\" >\r\n                    <app-trigger  trigger_function=\"edit\" [inputEditTrigger]=\"trigger\" [editTriggerIndex]=\"triggerIndex\"></app-trigger>\r\n                  </p-accordionTab>\r\n                </p-accordion>\r\n              </p-overlayPanel>\r\n            </p-header>\r\n          </p-card>\r\n          <div *ngIf=\"triggerIndex === triggerList.length - 1\" class=\"ui-lg-offset-5 operator-plus-box\">\r\n            <p-splitButton icon=\"fa fa-plus\" [menuStyle]=\"{ marginBottom :'20px'}\"\r\n                           menuStyleClass=\"operatorMenu\"\r\n                           (onClick)=\"changeOperator($event, operators[0],triggerIndex);\"\r\n                           (onDropdownClick)=\"saveOperationEventAndIndex($event,triggerIndex)\"\r\n                           [model]=\"operatorLables\">\r\n            </p-splitButton>\r\n          </div>\r\n          <div class=\"ui-lg-offset-5 operator-plus-box\" *ngIf=\"triggerIndex !== triggerList.length - 1\">\r\n            <p-dropdown [options]=\"operators\"\r\n                        [placeholder]=\"selectedOperatorList[triggerIndex].operator\"\r\n                        [(ngModel)]=\"selectedOperatorList[triggerIndex]\"\r\n\r\n                        (onChange)=\"changeOperatorSelect(selectedOperatorList[triggerIndex],triggerIndex);\"\r\n                        optionLabel=\"operator\">\r\n            </p-dropdown>\r\n          </div>\r\n        </div>\r\n        <div class=\"ui-lg-offset-5 operator-plus-box\">\r\n          <div *ngIf=\"triggerList === undefined || triggerList.length === 0\">\r\n            <button pButton type=\"button\" class=\"rule_create_button triggerOverlayButton\" class=\"plus-button\"\r\n                    icon=\"fa fa-plus\"\r\n                    (click)=\"addTriggerOverlay($event);\"></button>\r\n          </div>\r\n          <p-overlayPanel #triggerOverlay [appendTo]=\"'body'\"\r\n                          [style]=\"{ 'border': '2px solid rgb(35, 153, 229)','background-color' : 'rgb(224, 224, 224)', 'padding-top' :'8px','padding-bottom' :'8px'}\">\r\n            <p-accordion [multiple]=\"true\"  [style]=\"{width: '730px'}\"  >\r\n              <p-accordionTab   header=\"Existing Conditions\" >\r\n                <app-trigger-combine></app-trigger-combine>\r\n              </p-accordionTab>\r\n              <p-accordionTab header=\"New Condition\">\r\n                <app-trigger></app-trigger>\r\n\r\n              </p-accordionTab>\r\n            </p-accordion>\r\n          </p-overlayPanel>\r\n        </div>\r\n      </div>\r\n    </p-scrollPanel>\r\n  </div>\r\n  <div class=\"ui-lg-6 ui-md-6 condition_action_title actions\">\r\n    <strong>Then: add one or more actions</strong>\r\n    <br>\r\n    <p-scrollPanel [style]=\"{height: '90%', backgroundColor:'transparent', borderColor:'transparent'}\">\r\n      <div class=\"ui-lg-12 ui-md-12 actions-body\" id=\"actions\">\r\n        <div *ngFor=\"let action of actionList; let actionIndex = index\" >\r\n          <p-card [style]=\"{width:'96%'}\">\r\n            <div>{{ action.name }}</div>\r\n            <p-header>\r\n              <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"remove-button ui-button-secondary\" iconPos=\"right\"\r\n                      (click)=\"removeAction(actionIndex);\"></button>\r\n              <button *ngIf=\"rule_function === 'edit'\" pButton type=\"button\" icon=\"fa fa-edit\" class=\"remove-button ui-button-secondary\" iconPos=\"right\"\r\n                      (click)=\"showEditActionOverlay(updateActionOverlay,$event,actionIndex,action)\"></button>\r\n              <p-overlayPanel #updateActionOverlay [appendTo]=\"'body'\"\r\n                              [style]=\"{ 'border': '2px solid rgb(35, 153, 229)','background-color' : 'rgb(224, 224, 224)', 'padding-top' :'8px','padding-bottom' :'8px'}\">\r\n                <p-accordion [multiple]=\"true\"  [style]=\"{width: '730px'}\"  >\r\n\r\n                  <p-accordionTab header=\"Update Action\" >\r\n                    <app-action  action_function=\"edit\" [inputEditAction]=\"action\" [editActionIndex]=\"actionIndex\"></app-action>\r\n                  </p-accordionTab>\r\n                </p-accordion>\r\n              </p-overlayPanel>\r\n            </p-header>\r\n          </p-card>\r\n          <div class=\"ui-lg-offset-5 operator-box\" *ngIf=\"actionIndex !== actionList.length - 1\">\r\n            <span>AND</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"ui-lg-offset-5 operator-plus-box last_distance\" >\r\n          <button pButton type=\"button\" class=\"rule_create_button\" class=\"plus-button\" icon=\"fa fa-plus\"\r\n                  (click)=\"addActionOverlay($event,actionOverlay);\"></button>\r\n        </div>\r\n        <p-overlayPanel #actionOverlay [appendTo]=\"'body'\"\r\n                        [style]=\"{ 'border': '2px solid rgb(35, 153, 229)','background-color' : 'rgb(224, 224, 224)', 'padding-top' :'8px','padding-bottom' :'8px'}\">\r\n          <p-accordion [multiple]=\"true\"  [style]=\"{width: '730px'}\"  >\r\n            <p-accordionTab   header=\"Existing Actions\" >\r\n              <app-action-combine></app-action-combine>\r\n            </p-accordionTab>\r\n            <p-accordionTab header=\"New Action\">\r\n              <app-action></app-action>\r\n            </p-accordionTab>\r\n          </p-accordion>\r\n        </p-overlayPanel>\r\n      </div>\r\n    </p-scrollPanel>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/rule-creation.component.ts ***!
  \******************************************************************************/
/*! exports provided: CreateRuleComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateRuleComponent", function() { return CreateRuleComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/condition */ "./src/app/models/frontend/rule_module/condition.ts");
/* harmony import */ var _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/triggergroup */ "./src/app/models/frontend/rule_module/triggergroup.ts");
/* harmony import */ var _models_frontend_rule_module_trigger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/trigger */ "./src/app/models/frontend/rule_module/trigger.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/rule */ "./src/app/models/frontend/rule_module/rule.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/ruleaction */ "./src/app/models/frontend/rule_module/ruleaction.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/datanotification */ "./src/app/models/frontend/rule_module/datanotification.ts");
/* harmony import */ var _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
/* harmony import */ var _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../service/platform-device-management.service */ "./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














var CreateRuleComponent = /** @class */ (function () {
    function CreateRuleComponent(ruleCreationService, ruleManagerService, ruleManagementService, dataService, ruleNotificationService, devicemanager, platformDeviceManagement) {
        var _this = this;
        this.ruleCreationService = ruleCreationService;
        this.ruleManagerService = ruleManagerService;
        this.ruleManagementService = ruleManagementService;
        this.dataService = dataService;
        this.ruleNotificationService = ruleNotificationService;
        this.devicemanager = devicemanager;
        this.platformDeviceManagement = platformDeviceManagement;
        this.messeges = [];
        this.selectedOperatorList = [];
        this.operators = [{ triggerId: 0, operator: 'AND' }, { triggerId: 0, operator: 'OR' }];
        this.indexedTriggerList = [];
        this.indexedOperatorList = [];
        this.platforms = [];
        this.projects = [];
        this.displayRuleCreationDialog = false;
        this.triggerEventEmitter = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.generateNewTriggerTree = false;
        this.operatorLables = [
            {
                label: 'AND', command: function () {
                    _this.changeOperator(undefined, _this.operators[0], _this.operatorIndex);
                }
            },
            {
                label: 'OR', command: function () {
                    _this.changeOperator(undefined, _this.operators[1], _this.operatorIndex);
                }
            }
        ];
        this.updateRuleLables = [{
                label: 'Update', command: function () {
                    _this.updateTriggerAndRule(false);
                }
            },
            {
                label: 'Update and close ', command: function () {
                    _this.updateTriggerAndRule(true);
                }
            }];
        this.saveRuleLables = [{
                label: 'Save and create new', command: function () {
                    _this.saveTriggerAndRule(false);
                }
            },
            {
                label: 'Save and close ', command: function () {
                    _this.saveTriggerAndRule(true);
                }
            }];
        this.sendRequest = false;
        this.creationRule = this.ruleCreationService.creationRule;
        this.selectedOperatorList = this.ruleCreationService.selectedOperatorList;
        this.triggerList = this.ruleCreationService.triggerList;
        this.actionList = this.ruleCreationService.actionList;
        this.creationRule.active = false;
        this.displayRuleCreationDialog = ruleCreationService.displayRuleCreationDialog;
        this.updateTriggerList = this.ruleManagementService.updateTriggerList;
        this.platforms = this.ruleCreationService.platforms;
    }
    CreateRuleComponent.prototype.ngOnInit = function () {
        var _this = this;
        // Here checks if it is update rule component
        if (this.rule_function === 'edit' && this.rule) {
            this.editRuleValue = this.rule;
            this.creationRule = this.editRuleValue;
            this.ruleCreationService.creationRule = this.rule;
            this.actionList = this.creationRule.ruleActions;
            this.ruleCreationService.actionList = this.actionList;
            var userId = this.rule.userId;
            // Here gets all platforms dependent on user and projectID
            if (userId && this.creationRule.projectID) {
                this.devicemanager.getAllPlatforms(userId, this.creationRule.projectID)
                    .subscribe(function (platforms) {
                    _this.platforms = [];
                    platforms.forEach(function (platform) {
                        _this.platforms.push({ label: platform.name, value: platform.platformId });
                        _this.ruleCreationService.indexedPlatforms[platform.platformId] = platform;
                        _this.ruleCreationService.platforms = _this.platforms;
                    });
                });
            }
            // Here will be defined all projects
            this.ruleCreationService.projects.forEach(function (project) {
                _this.projects.push({ label: project.name, value: project.id });
            });
            this.triggerList = [];
            this.ruleCreationService.triggerList = [];
            this.selectedOperatorList = [];
            this.ruleCreationService.selectedOperatorList = [];
            /**
             * Update rule component needs to order trigger tree as a list.
             * This function orderEditTriggers oders the triggers
             */
            this.ruleManagerService.getTriggersByTGID(userId, this.creationRule.rootTGID)
                .subscribe(function (responseTriggers) {
                _this.orderEditTriggers(_this.creationRule.rootTGID, responseTriggers);
            });
            // gets all devices dependent on project, plaform and user id.
            this.platformDeviceManagement.addAllDevices(this.rule.projectID, this.rule.userId, this.rule.platformID);
        }
        else {
            this.ruleCreationService.projects.forEach(function (project) {
                _this.projects.push({ label: project.name, value: project.id });
            });
            this.creationRule = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__["Rule"]();
            this.ruleCreationService.triggerList = [];
            this.ruleCreationService.actionList = [];
            this.triggerList = this.ruleCreationService.triggerList;
            this.actionList = this.ruleCreationService.actionList;
        }
        this.ruleCreationService.triggerOverlay = this.triggerOverlayRef;
        // sets logged user id
        this.dataService.userData.subscribe(function (resultUserData) {
            _this.ruleCreationService.loggedUserId = resultUserData.id;
            _this.userId = _this.ruleCreationService.loggedUserId;
        });
    };
    /**
     * This function orders trigger binary tree as a list.
     * This function is called only for Rule Update component.
     * @param Triggergroup rootTriggerGroup is last/root triggergroup.
     * @param Array<Triggergroup> indexedTriggerList is all triggergroups indexed by the triggergroup id.
     */
    CreateRuleComponent.prototype.orderTriggerOperator = function (rootTriggerGroup, indexedTriggerList) {
        if (rootTriggerGroup.rightchild !== 0 && rootTriggerGroup.leftchild !== 0) {
            this.orderTriggerOperator(indexedTriggerList[rootTriggerGroup.leftchild], indexedTriggerList);
            this.triggerList.push(indexedTriggerList[rootTriggerGroup.rightchild]);
            this.selectedOperatorList.push({
                triggerId: indexedTriggerList[rootTriggerGroup.ID].ID,
                operator: indexedTriggerList[rootTriggerGroup.ID].operator
            });
            this.indexedOperatorList.push({
                triggerId: indexedTriggerList[rootTriggerGroup.ID].ID,
                operator: indexedTriggerList[rootTriggerGroup.ID].operator
            });
            this.ruleCreationService.selectedOperatorList = this.selectedOperatorList;
        }
        else {
            this.triggerList.push(rootTriggerGroup);
            this.ruleCreationService.triggerList = this.triggerList;
        }
    };
    /**
     * This function gets project connected platforms and adds all devices.
     * @param string projectId
     */
    CreateRuleComponent.prototype.projectSelected = function (projectId) {
        var _this = this;
        if (projectId) {
            this.ruleManagerService.project = this.findProject(projectId);
            if (projectId && this.ruleCreationService.loggedUserId) {
                this.devicemanager.getAllPlatforms(this.ruleCreationService.loggedUserId, this.creationRule.projectID)
                    .subscribe(function (platforms) {
                    _this.creationRule.platformID = '';
                    _this.ruleManagementService.updateTriggerListStatus.emit(true);
                    _this.platforms = [];
                    platforms.forEach(function (platform) {
                        _this.platforms.push({ label: platform.name, value: platform.platformId });
                        _this.ruleCreationService.indexedPlatforms[platform.platformId] = platform;
                        _this.ruleCreationService.platforms = _this.platforms;
                    });
                });
            }
        }
    };
    /**
     * Add devices connected to the project, user, platform
     * @param String platformID is Platform Id
     */
    CreateRuleComponent.prototype.addAllDevices = function (platformID) {
        if (platformID) {
            var r = this.creationRule;
            var userId = this.ruleCreationService.loggedUserId;
            this.platformDeviceManagement.addAllDevices(r.projectID, userId, r.platformID);
        }
    };
    /**
     * Serach project by project Id
     *
     * @param string projectId is filter parameter
     * @returns any is Project Object
     */
    CreateRuleComponent.prototype.findProject = function (projectId) {
        for (var _i = 0, _a = this.ruleCreationService.projects; _i < _a.length; _i++) {
            var project = _a[_i];
            if (project.id === projectId) {
                return project;
            }
        }
    };
    /**
     * Indexes trigger list by trigger Id
     * @param number rootTGID is id of root triggergroup
     * @param Array<Triggergroup> triggers is list of related triggers
     */
    CreateRuleComponent.prototype.orderEditTriggers = function (rootTGID, triggers) {
        var _this = this;
        triggers.forEach(function (value) {
            _this.indexedTriggerList[value.ID] = value;
        });
        var rootTriggerGroup = this.indexedTriggerList[rootTGID];
        this.orderTriggerOperator(rootTriggerGroup, this.indexedTriggerList);
    };
    /**
     * Drop function from Angular docu
     * @param ev is clicked component.
     */
    CreateRuleComponent.prototype.allowDrop = function (ev) {
        ev.preventDefault();
    };
    /**
     * Clears all rule values, triggers and actions.
     */
    CreateRuleComponent.prototype.clearRuleData = function () {
        this.creationRule = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__["Rule"]();
        this.triggerList = [];
        this.actionList = [];
        this.ruleCreationService.creationRule = this.creationRule;
        this.ruleCreationService.triggerList = this.triggerList;
        this.ruleCreationService.actionList = this.actionList;
    };
    /**
     * Close Rule Creation Component Pop-up
     * and clear all Rule values
     */
    CreateRuleComponent.prototype.closeRuleCreationDisplay = function () {
        this.displayRuleCreationDialog = false;
        this.ruleCreationService.displayStatusUpdated.emit(this.displayRuleCreationDialog);
        this.clearRuleData();
    };
    /**
     * Close Rule Update Component Pop-up
     * and clear all Rule values
     */
    CreateRuleComponent.prototype.closeRuleUpdateDisplay = function () {
        this.displayRuleCreationDialog = false;
        this.ruleCreationService.displayStatusUpdated.emit(false);
        this.ruleManagementService.displayStatusUpdated.emit(false);
        this.ruleManagementService.displayRuleUpdateComponent.emit(false);
        this.clearRuleData();
    };
    /**
     * Checks if element is Empty
     * @param element value
     * @returns boolean is true is Empty
     */
    CreateRuleComponent.prototype.isEmptyArray = function (element) {
        return element === undefined;
    };
    /**
     * Clears modified trigger(conditions).
     * Dependent of the parameters will be the triggers data cleared.
     *
     * @param string functionType edit,remove
     * @param string functionOptions new, old
     * @param string nextoption all, only
     * @param number triggerID is Trigger Id
     */
    CreateRuleComponent.prototype.clearUpdateTriggers = function (functionType, functionOptions, nextoption, triggerID) {
        for (var _i = 0, _a = Object.keys(this.updateTriggerList); _i < _a.length; _i++) {
            var index = _a[_i];
            var functionValue = this.updateTriggerList[index];
            if (index !== 'addNew') {
                for (var _b = 0, _c = Object.keys(functionValue); _b < _c.length; _b++) {
                    var optionIndex = _c[_b];
                    var optionValue = functionValue[optionIndex];
                    if (optionIndex === 'new') {
                        for (var _d = 0, _e = Object.keys(optionValue); _d < _e.length; _d++) {
                            var optionNextIndex = _e[_d];
                            var triggersList = optionValue[optionNextIndex];
                            if ((index !== functionType || optionIndex !== functionOptions || optionNextIndex !== nextoption)
                                && triggersList[triggerID]) {
                                triggersList.splice(triggerID, 1);
                                if (triggersList.every(this.isEmptyArray)) {
                                    this.updateTriggerList[index][optionIndex][optionNextIndex] = [];
                                }
                            }
                        }
                    }
                    else {
                        if ((index !== functionType || optionIndex !== functionOptions) && optionValue[triggerID]) {
                            optionValue.splice(triggerID, 1);
                            if (optionValue.every(this.isEmptyArray)) {
                                this.updateTriggerList[index][optionIndex] = [];
                            }
                        }
                    }
                }
            }
            else {
                if (functionType !== 'addNew' && this.updateTriggerList.addNew[triggerID]) {
                    this.updateTriggerList.addNew.splice(triggerID, 1);
                    if (this.updateTriggerList.addNew.every(this.isEmptyArray)) {
                        this.updateTriggerList.addNew = [];
                    }
                }
            }
        }
    };
    /**
     * This function edits the trigger
     *
     * @param number triggerIndex is idex of trigger
     * @param trigger is modified trigger
     * @param editIconOverlay is overlay of edit
     * @param string functionType are edit, remove
     * @param string functionOption are new, old
     */
    CreateRuleComponent.prototype.editTrigger = function (triggerIndex, trigger, editIconOverlay, functionType, functionOption) {
        var _this = this;
        var sendTrigger = {
            triggerIndex: triggerIndex,
            trigger: trigger,
            functionType: functionType,
            functionOption: functionOption
        };
        this.ruleManagementService.editTriggergroupStatusUpdated.emit(sendTrigger);
        this.ruleManagementService.changeExistingTriggerGroupStatus.subscribe(function (changedTrigger) {
            if (changedTrigger.oldTriggerIndex === triggerIndex) {
                editIconOverlay.hide(event);
                _this.indexedTriggerList[triggerIndex] = changedTrigger.trigger;
                _this.triggerList[triggerIndex] = _this.indexedTriggerList[triggerIndex];
                _this.ruleCreationService.triggerList = _this.triggerList;
                if (!_this.updateTriggerList.addNew[_this.triggerList[triggerIndex].ID]) {
                    _this.updateTriggerList[functionType][functionOption][_this.triggerList[triggerIndex].ID] = _this.triggerList[triggerIndex];
                    _this.clearUpdateTriggers(functionType, functionOption, undefined, _this.triggerList[triggerIndex].ID);
                }
                else {
                    _this.updateTriggerList[functionType]['new'][functionOption][_this.triggerList[triggerIndex].ID] = _this.triggerList[triggerIndex];
                    _this.clearUpdateTriggers(functionType, 'new', functionOption, _this.triggerList[triggerIndex].ID);
                }
            }
        });
    };
    /**
     * This function edits the action
     *
     * @param number actionIndex
     * @param action is modified action
     * @param editActionIconOverlay is overlay of action edit icon
     * @param string functionType  are edit, remove
     * @param string functionOption are new, old
     */
    CreateRuleComponent.prototype.editAction = function (actionIndex, action, editActionIconOverlay, functionType, functionOption) {
        var _this = this;
        var sendAction = {
            actionIndex: actionIndex,
            action: action,
            functionType: functionType,
            functionOption: functionOption
        };
        this.ruleManagementService.editActionStatusUpdated.emit(sendAction);
        this.ruleManagementService.changeExistingActionStatus.subscribe(function (changedAction) {
            if (changedAction.oldActionIndex === actionIndex) {
                editActionIconOverlay.hide(event);
                _this.ruleCreationService.actionList = _this.actionList;
            }
        });
    };
    /**
     * saves the operator for the triggers
     * @param event is clicked component event
     * @param number operatorIndex is trigger index
     */
    CreateRuleComponent.prototype.saveOperationEventAndIndex = function (event, operatorIndex) {
        this.triggerOperatorEvent = event;
        this.operatorIndex = operatorIndex;
    };
    /**
     * This function displays notification message
     *
     * @param severity is type error or success
     * @param summary is title Rule Error
     * @param message is notification message
     */
    CreateRuleComponent.prototype.showMessage = function (severity, summary, message) {
        this.messeges = [];
        this.messeges.push({ severity: severity, summary: summary, detail: message });
    };
    /**
     * This function saves all combined triggers
     *
     * @param number index is trigger index
     * @param Triggergroup triggergroup
     */
    CreateRuleComponent.prototype.saveCombineTriggers = function (index, triggergroup) {
        var _this = this;
        if ((index + 1) < this.triggerList.length) {
            var localTrigger = new _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_2__["Triggergroup"]();
            localTrigger.leftchild = triggergroup.ID;
            localTrigger.rightchild = this.triggerList[index + 1].ID;
            localTrigger.operator = this.selectedOperatorList[index].operator;
            localTrigger.name = "(" + triggergroup.name + " " + this.selectedOperatorList[index].operator + " " + this.triggerList[index + 1].name + ")";
            localTrigger.trigger = undefined;
            this.ruleManagerService.addNewTriggerLeaf(this.userId, localTrigger)
                .subscribe(function (response) {
                _this.saveCombineTriggers(index + 1, response);
            });
        }
        else {
            this.triggerEventEmitter.emit(triggergroup.ID);
        }
    };
    /**
     * This function checks if trigger length is one.
     * If not saved combined triggers.
     * If yes no combination is required and it saves one trigger.
     */
    CreateRuleComponent.prototype.saveTriggerTree = function () {
        if (this.triggerList.length === 1) {
            this.triggerEventEmitter.emit(this.triggerList[0].ID);
        }
        else {
            this.saveCombineTriggers(0, this.triggerList[0]);
        }
    };
    /**
     * This function saves the new notification
     *
     * @param string userId is logged user id
     * @param Rule rule notification relation is rule
     * @param string event is name of notification event
     */
    CreateRuleComponent.prototype.saveNotification = function (userId, rule, event) {
        var _this = this;
        var notification = new _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_11__["DataNotification"]();
        notification.userId = userId;
        notification.name = rule.name;
        notification.event = event;
        notification.date = new Date();
        notification.relation = 'Rule';
        notification.relationID = rule.ID;
        this.ruleManagerService.saveNotification(userId, notification)
            .subscribe(function (notificationResponse) {
            _this.ruleNotificationService.add(notificationResponse);
        });
    };
    /**
     * This function saves the rule
     * @param rootTGID last/root triggergroup Id
     * @param boolean close: if close is true then close the popup window
     */
    CreateRuleComponent.prototype.saveRule = function (rootTGID, close) {
        var _this = this;
        var ruleValue = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__["Rule"]();
        var userId = this.ruleCreationService.loggedUserId;
        this.creationRule.rootTGID = rootTGID;
        this.creationRule.ruleActions = this.ruleCreationService.actionList;
        this.creationRule.userId = userId;
        ruleValue.setRuleData(this.creationRule);
        this.ruleManagerService.saveRule(userId, ruleValue)
            .subscribe(function (savedRule) {
            _this.creationRule = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__["Rule"]();
            _this.actionList = [];
            _this.triggerList = [];
            _this.saveNotification(userId, savedRule, 'created');
            _this.sendRequest = false;
            _this.showMessage('success', 'Rule Creation', "Rule has been created ");
            if (close) {
                setTimeout(function () {
                    _this.closeRuleCreationDisplay();
                }, 1000);
            }
        }, function (error) {
            _this.sendRequest = false;
            _this.showMessage('error', 'Rule Error', "Rule has not been created " + error.error + " ");
        });
    };
    /**
     * This function updates the existing rule
     *
     * @param rootTGID last/root triggergroup Id
     * @param boolean close: if close is true then close the popup window
     */
    CreateRuleComponent.prototype.updateRule = function (rootTGID, close) {
        var _this = this;
        var ruleValue = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_5__["Rule"]();
        var userId = this.ruleCreationService.loggedUserId;
        this.creationRule.rootTGID = rootTGID;
        this.creationRule.ruleActions = this.ruleCreationService.actionList;
        this.ruleCreationService.loadIndexedTriggers();
        ruleValue.setRuleData(this.creationRule);
        this.ruleManagerService.updateRule(userId, ruleValue)
            .subscribe(function (updatedRule) {
            _this.sendRequest = false;
            _this.showMessage('success', 'Rule Update', "Rule has been updated ");
            _this.saveNotification(userId, ruleValue, 'updated');
            if (close) {
                setTimeout(function () {
                    _this.closeRuleUpdateDisplay();
                }, 1000);
            }
        }, function (error) {
            _this.sendRequest = false;
            _this.showMessage('error', 'Rule Error', "Rule has not been updated " + error.error + " ");
        });
    };
    /**
     * This function validates the rule values.
     * If some value is missing or is not correct, then
     * notification message will show up.
     *
     * @param Rule creationRule main created rule
     * @param Array<Triggergroup> triggerList rule related trigger list
     * @param Array<RuleAction> actionList rule related action list
     * @returns boolean returns true if everything is right. If not return false.
     */
    CreateRuleComponent.prototype.checkRuleData = function (creationRule, triggerList, actionList) {
        if (!creationRule.name || !creationRule.description) {
            this.showMessage('info', 'Rule Name', 'Please write rule name and description');
            return false;
        }
        if (!creationRule.platformID) {
            this.showMessage('info', 'Rule Platform', 'Please select rule platform');
            return false;
        }
        if (!creationRule.projectID) {
            this.showMessage('info', 'Rule Project', 'Please select project');
            return false;
        }
        if (triggerList.length === 0) {
            this.showMessage('info', 'Rule Trigger', 'Please add rule condition/action');
            return false;
        }
        if (actionList.length === 0) {
            this.showMessage('info', 'Rule Action', 'Please add rule action');
            return false;
        }
        return true;
    };
    /**
     * Saves trigger tree and rule values
     *
     * @param boolean close: if close is true then close the popup window
     */
    CreateRuleComponent.prototype.saveTriggerAndRule = function (close) {
        var _this = this;
        if (this.checkRuleData(this.creationRule, this.triggerList, this.actionList)) {
            if (!this.sendRequest) {
                this.sendRequest = true;
                if (this.triggerList.length === 1) {
                    this.saveRule(this.triggerList[0].ID, close);
                }
                else {
                    this.saveTriggerTree();
                    this.triggerEventEmitter.subscribe(function (responseRootTGID) {
                        _this.saveRule(responseRootTGID, close);
                    });
                }
            }
        }
    };
    /**
     * Returns trigger index from trigger list
     *
     * @param Triggergroup trigger is search trigger
     * @returns number is index from trigger list
     */
    CreateRuleComponent.prototype.findIndexOfTrigger = function (trigger) {
        for (var index in this.triggerList) {
            if (this.triggerList[index].ID === trigger.ID) {
                return parseInt(index, 10);
            }
        }
    };
    /**
     * Updates trigger tree and return root id.
     *
     * @returns any : true, false or root trigger id.
     */
    CreateRuleComponent.prototype.updateTriggers = function () {
        var userId = this.ruleCreationService.loggedUserId;
        var upData = this.updateTriggerList;
        var sum = parseInt((upData.remove.all.length +
            upData.remove.only.length +
            upData.remove.new.all.length +
            upData.remove.new.only.length +
            upData.addNew.length +
            upData.edit.only +
            upData.edit.new.only), 10);
        if (upData.remove.all.length > 0
            || upData.remove.only.length > 0
            || upData.edit.only.length > 0) {
            if (upData.remove.all.length > 0) {
                this.ruleManagerService.deleteTriggers(userId, upData.remove.all);
            }
            if (this.triggerList.length === 1) {
                return this.triggerList[0].ID;
            }
            else {
                this.saveTriggerTree();
                return true;
            }
        }
        else {
            if (upData.edit.new.all.length > 0
                || upData.edit.new.only.length > 0
                || upData.addNew.length > 0) {
                if (this.indexedTriggerList[this.creationRule.rootTGID].rightchild === 0) {
                    this.saveCombineTriggers(0, this.indexedTriggerList[this.creationRule.rootTGID]);
                    return true;
                }
                else {
                    var righchildID = this.indexedTriggerList[this.creationRule.rootTGID].rightchild;
                    var index = this.findIndexOfTrigger(this.indexedTriggerList[righchildID]);
                    this.saveCombineTriggers(index, this.indexedTriggerList[this.creationRule.rootTGID]);
                    return true;
                }
            }
            else {
                return this.creationRule.rootTGID;
            }
        }
    };
    /**
     *  Updates triggers and rule values
     *
     * @param boolean close: if close is true then close the popup window
     */
    CreateRuleComponent.prototype.updateTriggerAndRule = function (close) {
        var _this = this;
        if (this.checkRuleData(this.creationRule, this.triggerList, this.actionList)) {
            this.creationRule.ruleActions = this.actionList;
            var isNewTree = this.updateTriggers();
            if (isNewTree === true) {
                this.triggerEventEmitter.subscribe(function (responseRootTGID) {
                    _this.updateRule(responseRootTGID, close);
                    _this.ruleManagementService.clearUpdateTriggerList();
                    _this.updateTriggerList = _this.ruleManagementService.updateTriggerList;
                    _this.ruleManagementService.updateTriggerListStatus.emit(true);
                });
            }
            else {
                this.updateRule(isNewTree, close);
                this.ruleManagementService.clearUpdateTriggerList();
                this.updateTriggerList = this.ruleManagementService.updateTriggerList;
                this.ruleManagementService.updateTriggerListStatus.emit(true);
            }
        }
    };
    /**
     * Show the trigger Overlay component
     *
     * @param event is clicked component event
     */
    CreateRuleComponent.prototype.addTriggerOverlay = function (event) {
        if (!this.creationRule.projectID || !this.creationRule.platformID) {
            this.showMessage('info', 'Rule Project/Platform', 'Please select rule project and platform');
        }
        else {
            if (event) {
                this.triggerOverlayRef.show(event);
            }
            else {
                this.triggerOverlayRef.show(this.triggerOperatorEvent);
            }
        }
    };
    /**
     * Change operator(AND,OR) for triggers.
     *
     * @param event is component element.
     * @param Operator selectedOperator selected operator.
     * @param number inputValue is index of changed operator list.
     */
    CreateRuleComponent.prototype.changeOperator = function (event, selectedOperator, inputValue) {
        if (event) {
            this.triggerOperatorEvent = event;
        }
        this.selectedOperatorList[inputValue] = selectedOperator;
        this.ruleCreationService.selectedOperatorList[inputValue] = selectedOperator;
        this.addTriggerOverlay(undefined);
    };
    /**
     * Changes the selected operator
     *
     * @param operator new Operator
     * @param number index is indexed operatorList
     */
    CreateRuleComponent.prototype.changeOperatorSelect = function (operator, index) {
        var trId = this.indexedOperatorList[index].triggerId;
        operator.triggerId = trId;
        if (this.indexedTriggerList[trId].operator !== operator.operator) {
            this.indexedTriggerList[trId].operator = operator.operator;
            this.updateTriggerList.edit.all[trId] = this.indexedTriggerList[trId];
            this.clearUpdateTriggers('edit', 'all', undefined, trId);
            this.ruleManagementService.updateTriggerList = this.updateTriggerList;
        }
    };
    /**
     * Show action ovlerlay
     *
     * @param event is clicked component
     * @param overlay of the action
     */
    CreateRuleComponent.prototype.addActionOverlay = function (event, overlay) {
        if (!this.creationRule.projectID || !this.creationRule.platformID) {
            this.showMessage('info', 'Rule Project/Platform', 'Please select rule project and platform');
        }
        else {
            overlay.show(event);
            this.ruleCreationService.actionOverlay = overlay;
        }
    };
    /**
     * Removes local trigger from trigger list by index.
     *
     * @param number index
     */
    CreateRuleComponent.prototype.removeTrigger = function (index) {
        this.triggerList.splice(index, 1);
        this.selectedOperatorList.splice(index, 1);
        this.ruleCreationService.triggerList = this.triggerList;
    };
    /**
     * Remove trigger by index
     *
     * @param Triggergroup trigger removed
     * @param number triggerIndex is trigger index
     * @param removeTriggerOverlay overlay of condition
     * @param event is component element
     */
    CreateRuleComponent.prototype.removeTriggerForAllRules = function (trigger, triggerIndex, removeTriggerOverlay, event) {
        this.generateNewTriggerTree = true;
        this.removeTrigger(triggerIndex);
        removeTriggerOverlay.hide(event);
        if (this.updateTriggerList.addNew[trigger.ID]) {
            this.updateTriggerList.remove.new.all[trigger.ID] = trigger;
            this.clearUpdateTriggers('remove', 'new', 'all', trigger.ID);
        }
        else {
            this.updateTriggerList.remove.all[trigger.ID] = trigger;
            this.clearUpdateTriggers('remove', 'all', undefined, trigger.ID);
        }
    };
    /**
     * Remove trigger from one rule
     *
     * @param Triggergroup trigger removed
     * @param number triggerIndex is trigger index
     * @param removeTriggerOverlay overlay of condition
     * @param event is component element
     */
    CreateRuleComponent.prototype.removeTriggerOnlyThisRule = function (trigger, triggerIndex, removeTriggerOverlay, event) {
        this.generateNewTriggerTree = true;
        this.removeTrigger(triggerIndex);
        removeTriggerOverlay.hide(event);
        if (this.updateTriggerList.addNew[trigger.ID]) {
            this.updateTriggerList.remove.new.only[trigger.ID] = trigger;
            this.clearUpdateTriggers('remove', 'new', 'only', trigger.ID);
        }
        else {
            this.updateTriggerList.remove.only[trigger.ID] = trigger;
            this.clearUpdateTriggers('remove', 'only', undefined, trigger.ID);
        }
    };
    /**
     * Shows action overlay and edits action
     *
     * @param editActionIconOverlay is overlay component
     * @param event is clicked component element
     * @param number actionIndex is index of list
     * @param RuleAction action is edit action
     */
    CreateRuleComponent.prototype.showEditActionOverlay = function (editActionIconOverlay, event, actionIndex, action) {
        editActionIconOverlay.show(event);
        this.editAction(actionIndex, action, editActionIconOverlay, 'edit', 'only');
    };
    /**
     * If trigger combines multiple triggers this function
     * devides it as two trigger parts.
     *
     * @param number triggerIndex index devided triggers
     * @param Triggergroup trigger clicked trigger
     * @returns boolean is true if trigger is devided
     */
    CreateRuleComponent.prototype.divideTrigger = function (triggerIndex, trigger) {
        if (trigger.leftchild !== 0 && trigger.rightchild !== 0) {
            this.triggerList.splice(triggerIndex, 1, this.indexedTriggerList[trigger.leftchild]);
            this.triggerList.splice(triggerIndex + 1, 0, this.indexedTriggerList[trigger.rightchild]);
            this.selectedOperatorList.splice(triggerIndex, 0, { triggerId: trigger.ID, operator: trigger.operator });
            this.ruleCreationService.triggerList = this.triggerList;
            return true;
        }
        return false;
    };
    /**
     * Edit trigger for all rules
     *
     * @param Triggergroup trigger changed trigger
     * @param number triggerIndex is index trigger
     * @param editIconOverlay is overlay component of trigger
     * @param upO upload Overlay
     * @param event is clicked component
     */
    CreateRuleComponent.prototype.editTriggerForAllRules = function (trigger, triggerIndex, editIconOverlay, upO, event) {
        upO.show(this.editOverlayEvent);
        editIconOverlay.hide(event);
        this.editTrigger(triggerIndex, trigger, upO, 'edit', 'all');
    };
    /**
     * Edits trigger only one rule
     *
     * @param Triggergroup trigger changed trigger
     * @param number triggerIndex is index trigger
     * @param editIconOverlay is overlay component of trigger
     * @param upO upload Overlay
     * @param event is clicked component
     */
    CreateRuleComponent.prototype.editTriggerOnlyThisRule = function (trigger, triggerIndex, editIconOverlay, upO, event) {
        if (!this.divideTrigger(triggerIndex, trigger)) {
            this.generateNewTriggerTree = true;
            upO.show(event);
            this.editTrigger(triggerIndex, trigger, upO, 'edit', 'only');
        }
    };
    /**
     * This function removes action locally
     *
     * @param number index of action list
     */
    CreateRuleComponent.prototype.removeAction = function (index) {
        this.actionList.splice(index, 1);
        this.ruleCreationService.actionList = this.actionList;
    };
    /**
     * Trigger can be dragged to another trigger
     *
     * @param ev grabbed trigger component
     * @param Triggergroup trigger combined trigger
     * @param selectedOperator dragged operator
     * @param number index if trigger
     */
    CreateRuleComponent.prototype.drag = function (ev, trigger, selectedOperator, index) {
        ev.dataTransfer.setData('text', ev.target.id);
        this.dragTrigger = trigger;
        this.dragOperator = selectedOperator;
        this.dragTriggerIndex = index;
    };
    /**
     * This function drops grabbed trigger
     *
     * @param ev droped trigger component event
     * @param number index  is droped trigger index
     */
    CreateRuleComponent.prototype.drop = function (ev, index) {
        var _this = this;
        ev.preventDefault();
        if (this.dragTrigger && this.dragOperator) {
            var localTrigger_1 = new _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_2__["Triggergroup"]();
            localTrigger_1.leftchild = this.triggerList[index].ID;
            localTrigger_1.rightchild = this.dragTrigger.ID;
            localTrigger_1.operator = this.dragOperator.operator;
            localTrigger_1.name = "(" + this.triggerList[index].name + " " + this.dragOperator.operator + " " + this.dragTrigger.name + ")";
            localTrigger_1.trigger = undefined;
            this.ruleManagerService.addNewTriggerLeaf(this.userId, localTrigger_1)
                .subscribe(function (response) {
                localTrigger_1.ID = response.ID;
                _this.removeTrigger(_this.dragTriggerIndex);
                _this.updateTriggerList.remove.only[_this.triggerList[index].ID] = _this.triggerList[index];
                _this.clearUpdateTriggers('remove', 'only', undefined, _this.triggerList[index].ID);
                _this.triggerList.splice(index, 1, localTrigger_1);
                _this.triggerList[index] = localTrigger_1;
                _this.ruleCreationService.triggerList = _this.triggerList;
            });
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('triggerOverlay'),
        __metadata("design:type", Object)
    ], CreateRuleComponent.prototype, "triggerOverlayRef", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], CreateRuleComponent.prototype, "rule_function", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Object)
    ], CreateRuleComponent.prototype, "rule", void 0);
    CreateRuleComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-rule-creation',
            template: __webpack_require__(/*! ./rule-creation.component.html */ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.html"),
            styles: [__webpack_require__(/*! ./rule-creation.component.css */ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.css")],
            providers: [_models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_2__["Triggergroup"], _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_1__["Condition"], _models_frontend_rule_module_trigger__WEBPACK_IMPORTED_MODULE_3__["Trigger"], _models_frontend_rule_module_ruleaction__WEBPACK_IMPORTED_MODULE_7__["RuleAction"]]
        }),
        __metadata("design:paramtypes", [_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__["RuleCreationService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_6__["RuleManagerService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_9__["RuleManagementService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_10__["DataService"],
            _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_12__["RuleNotificationService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_8__["DeviceManagerService"],
            _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_13__["PlatformDeviceManagementService"]])
    ], CreateRuleComponent);
    return CreateRuleComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.css":
/*!*************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.css ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.html":
/*!**************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.html ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g\">\r\n  <div class=\"ui-lg-12 ui-md-12 ui-sm-12\">\r\n    <p-autoComplete [(ngModel)]=\"existingTrigger\"\r\n                    [suggestions]=\"triggers\"\r\n                    field=\"name\"\r\n                    (completeMethod)=\"search($event)\"\r\n                    [dropdown]=\"true\"\r\n                    [size]=\"73\"\r\n                    placeholder=\"Select Condition\"\r\n                    (onSelect)=\"addSelectedTrigger(existingTrigger);\"\r\n    >\r\n    </p-autoComplete>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.ts ***!
  \************************************************************************************************/
/*! exports provided: TriggerCombineComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriggerCombineComponent", function() { return TriggerCombineComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _service_search_device_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../service/search-device.service */ "./src/app/skeleton/dashboard/rules/service/search-device.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var TriggerCombineComponent = /** @class */ (function () {
    function TriggerCombineComponent(ruleCreationService, ruleManagerService, ruleManagementService) {
        this.ruleCreationService = ruleCreationService;
        this.ruleManagerService = ruleManagerService;
        this.ruleManagementService = ruleManagementService;
        this.triggers = [];
        this.creationRule = this.ruleCreationService.creationRule;
    }
    /**
     * This function loads at the beginning
     * all triggers to the local trigger array list.
     */
    TriggerCombineComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.ruleManagerService.getAllTriggergroups(this.ruleCreationService.loggedUserId)
            .subscribe(function (response) {
            _this.triggers = response;
            _this.ruleCreationService.alltriggerList = _this.triggers;
        });
        this.ruleManagementService.updateTriggerListStatus
            .subscribe(function (setTriggers) {
            if (setTriggers) {
                _this.ruleManagerService.getAllTriggergroups(_this.ruleCreationService.loggedUserId)
                    .subscribe(function (response) {
                    _this.triggers = response;
                    _this.ruleCreationService.alltriggerList = _this.triggers;
                });
            }
        });
    };
    /**
     * This function is for existing triggers filter
     * @param event is selected component event
     */
    TriggerCombineComponent.prototype.search = function (event) {
        this.triggers = this.ruleCreationService.filterAutocomplete(event.query, this.ruleCreationService.alltriggerList, 'name');
    };
    /**
     * Selected trigger will be added to the trigger array.
     *
     * @param selectedTrigger is selected existing trigger parameter
     */
    TriggerCombineComponent.prototype.addSelectedTrigger = function (selectedTrigger) {
        this.ruleCreationService.triggerList.push(selectedTrigger);
        this.triggers.push(selectedTrigger);
        this.existingTrigger = undefined;
        this.ruleManagementService.updateTriggerList.addNew[selectedTrigger.ID] = selectedTrigger;
        this.ruleCreationService.triggerOverlay.hide();
    };
    TriggerCombineComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-trigger-combine',
            template: __webpack_require__(/*! ./trigger-combine.component.html */ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.html"),
            styles: [__webpack_require__(/*! ./trigger-combine.component.css */ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.css")],
            providers: [_service_search_device_service__WEBPACK_IMPORTED_MODULE_3__["SearchDeviceService"]]
        }),
        __metadata("design:paramtypes", [_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_1__["RuleCreationService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__["RuleManagerService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_4__["RuleManagementService"]])
    ], TriggerCombineComponent);
    return TriggerCombineComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.css":
/*!*********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.css ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".new_condition_button_size{\r\n  width:177px;\r\n}\r\n.save_condition{\r\n  padding-left: 0px;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.html":
/*!**********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div style=\"font-size: 14px;\">\r\n  <p-messages [(value)]=\"messeges\" ></p-messages>\r\n</div>\r\n<div class=\"ui-g\">\r\n  <div class=\"ui-g-4\" style=\"margin-top: 13px\">\r\n    <div *ngFor=\"let trigger of triggersFilterSchema.children; let filterIndex = index\"><br *ngIf=\"filterIndex !== 0\">\r\n      <i class=\"fa fa-{{trigger.icon}}\" style=\"width:20px;vertical-align:middle\"></i>\r\n      <p-checkbox name=\"name\" value=\"{{trigger.name}}\" label=\"{{trigger.name}}\"\r\n                  [(ngModel)]=\"triggerCheckboxSelectedValues[trigger.id]\"\r\n                  (click)=\"changeSelectedValues(triggerCheckboxSelectedValues)\"></p-checkbox>\r\n    </div>\r\n  </div>\r\n  <div class=\"ui-g-8\">\r\n    <div class=\"ui-g-12\">\r\n    <p-autoComplete [(ngModel)]=\"filterValue\" field=\"leafChild.name\"\r\n                    [suggestions]=\"filterResultData | toItem\" (completeMethod)=\"filterTrigger($event)\"\r\n                    (onDropdownClick)=\"clearFilterValue();\"\r\n                    (onSelect)=\"addFilteredValue(filterValue);\"\r\n                    [size]=\"42\"\r\n                    [minLength]=\"1\" [dropdown]=\"true\">\r\n      <ng-template let-trigger pTemplate=\"item\">\r\n        <div class=\"ui-helper-clearfix\" style=\"border-bottom:1px solid #D5D5D5\">\r\n          <div style=\"font-size:16px;margin:10px 10px 0 0\">\r\n            <i class=\"fa fa-{{trigger.first_parent_icon}}\" style=\"width:20px;vertical-align:middle;\"></i>\r\n            <span *ngIf=\"trigger.parents.length > 0\">\r\n              <span *ngFor=\"let parent of trigger.parents\">{{ parent.name }} - </span></span>\r\n            <span>{{ trigger.leafChild.name }}</span>\r\n          </div>\r\n        </div>\r\n      </ng-template>\r\n    </p-autoComplete>\r\n  </div>\r\n  <div class=\"ui-g-12\">\r\n    <div *ngIf=\"filterValue.leafChild && filterValue.leafChild.name\">\r\n      <p-autoComplete [(ngModel)]=\"selectedCondition\"\r\n                      [suggestions]=\"filterValue.leafChild.properties\"\r\n                      field=\"text\"\r\n                      (completeMethod)=\"searchCondition($event)\"\r\n                      [dropdown]=\"true\"\r\n                      [size]=\"42\"\r\n                      placeholder=\"Select Condition\">\r\n      </p-autoComplete>\r\n    </div>\r\n  </div>\r\n  <div class=\"ui-g-12\" *ngIf=\"selectedCondition.text\">\r\n      <strong>{{ selectedCondition.text }}</strong>\r\n  </div>\r\n  <div class=\"ui-g-12\" *ngIf=\"filterValue.leafChild\">\r\n    <div *ngIf=\"selectedCondition.type_options === 'input'\">\r\n      <input type=\"{{selectedCondition.type}}\" pInputText [(ngModel)]=\"filterValue.leafChild.conditionValue\"/>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'multiselect'\">\r\n      <p-multiSelect [options]=\"selectedCondition.selects\" [(ngModel)]=\"filterValue.leafChild.conditionValue\" [filter]=\"false\">\r\n      </p-multiSelect>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'inputSwitch'\">\r\n      <p-inputSwitch [(ngModel)]=\"filterValue.leafChild.conditionValue\" onLabel=\"Yes\" offLabel=\"No\"></p-inputSwitch>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'calendar'\">\r\n      <p-calendar [(ngModel)]=\"filterValue.leafChild.conditionValue\" dateFormat=\"dd.mm.yy\"></p-calendar>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'time'\">\r\n      <p-calendar [(ngModel)]=\"filterValue.leafChild.conditionValue\" [timeOnly]=\"true\"\r\n                  showTime=\"true\"></p-calendar>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'dropdown'\">\r\n      <p-dropdown [options]=\"selectedCondition.selects\" placeholder=\"Select\"\r\n                  [(ngModel)]=\"filterValue.leafChild.conditionValue\"></p-dropdown>\r\n    </div>\r\n    <div style=\"padding-left:50px;\">\r\n      <div *ngIf=\"selectedCondition.type_options === 'checkbox'\">\r\n        <p-checkbox [(ngModel)]=\"filterValue.leafChild.conditionValue\" binary=\"true\"></p-checkbox>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"selectedCondition.type_options === 'slider'\">\r\n      <div class=\"ui-lg-5\">\r\n        <span style=\"padding: 48%\">{{ filterValue.leafChild.conditionValue }}</span>\r\n        <p-slider [(ngModel)]=\"filterValue.leafChild.conditionValue\" [min]=\"selectedCondition.min\"\r\n                  [max]=\"selectedCondition.max\"></p-slider>\r\n      </div>\r\n    </div>\r\n  </div>\r\n    <div class=\"ui-g-12\" *ngIf=\"filterValue.leafChild !== undefined && filterValue.leafChild.conditionValue !== undefined\">\r\n      <div class=\"ui-g-12 ui-md-12 ui-lg-6 save_condition\">\r\n        <button pButton *ngIf=\"trigger_function !== 'edit'\" type=\"button\" label=\"Save condition\"\r\n                class=\"new_condition_button_size\" (click)=\"saveNewTrigger(filterValue);\"></button>\r\n        <button pButton *ngIf=\"trigger_function === 'edit'\" type=\"button\" label=\"Update condition\"\r\n                class=\"new_condition_button_size\" (click)=\"updateTrigger(filterValue)\"></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.ts ***!
  \********************************************************************************/
/*! exports provided: TriggerComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriggerComponent", function() { return TriggerComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _triggers_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../triggers-schema */ "./src/app/skeleton/dashboard/rules/triggers-schema.ts");
/* harmony import */ var _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/condition */ "./src/app/models/frontend/rule_module/condition.ts");
/* harmony import */ var _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/triggergroup */ "./src/app/models/frontend/rule_module/triggergroup.ts");
/* harmony import */ var _models_frontend_rule_module_trigger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/trigger */ "./src/app/models/frontend/rule_module/trigger.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _service_search_device_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../service/search-device.service */ "./src/app/skeleton/dashboard/rules/service/search-device.service.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _models_frontend_rule_module_weekdays__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../models/frontend/rule_module/weekdays */ "./src/app/models/frontend/rule_module/weekdays.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../service/platform-device-management.service */ "./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var TriggerComponent = /** @class */ (function () {
    function TriggerComponent(condition, ruleManagerService, ruleManagementService, ruleCreationService, searchDeviceService, platformDeviceManagement) {
        this.condition = condition;
        this.ruleManagerService = ruleManagerService;
        this.ruleManagementService = ruleManagementService;
        this.ruleCreationService = ruleCreationService;
        this.searchDeviceService = searchDeviceService;
        this.platformDeviceManagement = platformDeviceManagement;
        this.messeges = [];
        this.filterParents = [];
        this.filterValue = {
            parents: [],
            leafChild: {}
        };
        this.items = [];
        this.triggersFilterSchema = _triggers_schema__WEBPACK_IMPORTED_MODULE_1__["TriggersFilterSchema"];
        this.triggerCheckboxSelectedValues = [];
        this.selectedCondition = {};
        this.filterData = [];
        this.filterResultData = [];
        this.triggersFilterSchema = this.ruleCreationService.triggersFilterSchema;
    }
    /**
     * Here will be all triggers related data loaded for creating the rule as well as for updating the rule.
     * If trigger_function has value ‘edit,’  then this component will be used for updating the rule.
     */
    TriggerComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.setTriggerFilter(this.triggersFilterSchema);
        this.ruleCreationService.triggerFilterObservable.subscribe(function (filter) {
            _this.triggersFilterSchema = filter;
            _this.filterParents = [];
            _this.filterData = [];
            _this.setTriggerFilter(_this.triggersFilterSchema);
        });
        if (this.trigger_function === 'edit') {
            this.ruleManagementService.editTriggergroupStatusUpdated
                .subscribe(function (respondTrigger) {
                var respond = respondTrigger;
                if (_this.inputEditTrigger.ID === respond.trigger.ID && _this.editTriggerIndex === respond.triggerIndex) {
                    _this.filterData = [];
                    var filterShema_1 = { children: [] };
                    _this.triggersFilterSchema.children.forEach(function (child) {
                        if (child.triggerClass === respond.trigger.trigger.triggerclass) {
                            filterShema_1.children.push(child);
                        }
                    });
                    _this.setTriggerFilter(filterShema_1);
                    _this.filterResultData.forEach(function (data) {
                        if (data.leafChild && data.leafChild.properties) {
                            data.leafChild.properties.forEach(function (property) {
                                if (respond.trigger.name.indexOf(property.text) !== -1) {
                                    if (respond.trigger.trigger.condition[data.leafChild.condition_attribute]) {
                                        _this.filterValue = data;
                                        _this.selectedCondition = property;
                                        _this.addFilteredValue(_this.filterValue);
                                        _this.filterValue.leafChild.conditionValue = respond.trigger.trigger.condition[data.leafChild.condition_attribute];
                                    }
                                }
                            });
                        }
                    });
                    var r = _this.ruleCreationService.creationRule;
                    _this.setTriggerFilter(_this.triggersFilterSchema);
                    _this.platformDeviceManagement
                        .addAllDevices(r.projectID, r.userId, r.platformID);
                }
            });
        }
    };
    /**
     * Changes checkbox category value
     *
     * @param selectedValues after checkbox is clicked
     */
    TriggerComponent.prototype.changeSelectedValues = function (selectedValues) {
        this.triggerCheckboxSelectedValues = selectedValues;
    };
    /**
     * This function sets end results of trigger Json  Schema.
     * After recrusive search sets parents and last child values of all children.
     *
     * @param leafChild last child object
     * @param parents all parents of this child
     */
    TriggerComponent.prototype.setElementByTriggerFilter = function (leafChild, parents) {
        var element = { leafChild: {}, parents: [] };
        var parent = { name: undefined, icon: undefined, triggerClass: undefined };
        for (var _i = 0, parents_1 = parents; _i < parents_1.length; _i++) {
            var parentValue = parents_1[_i];
            if (parentValue.name) {
                parent.name = parentValue.name;
                parent.triggerClass = parentValue.triggerClass;
                parent.icon = parentValue.icon;
                element.parents.push(parent);
                parent = { name: undefined, icon: undefined, triggerClass: undefined };
            }
        }
        element.leafChild = leafChild;
        this.filterData.push(element);
        this.filterResultData = this.filterData;
    };
    /**
     * This function sets triggers form Trigger Json Scheme
     *
     * @param parent. Each recursive setTriggerFilter function gets old child as a parent parameter.
     */
    TriggerComponent.prototype.setTriggerFilter = function (parent) {
        this.filterParents.push(parent);
        if (parent.children.length > 0) {
            for (var _i = 0, _a = parent.children; _i < _a.length; _i++) {
                var child = _a[_i];
                this.setTriggerFilter(child);
            }
            var size = this.filterParents.length;
            this.filterParents = this.filterParents.slice(0, size - 1);
        }
        else {
            var size = this.filterParents.length;
            this.filterParents = this.filterParents.slice(0, size - 1);
            var lastParentIsChild = parent;
            this.setElementByTriggerFilter(lastParentIsChild, this.filterParents);
        }
    };
    /**
     * Clears all selected values for trigger
     */
    TriggerComponent.prototype.clearFilterValue = function () {
        this.filterValue.leafChild = {};
        this.selectedCondition = {};
    };
    TriggerComponent.prototype.addFilteredValue = function (triggerConditionValues) {
        this.filteredTriggerConditionValues = triggerConditionValues;
    };
    /**
     * This function is filtering condition for each selected category
     * This is second autocomplete component from new condition selection overlay
     *
     * @param event is clicked component event
     */
    TriggerComponent.prototype.searchCondition = function (event) {
        var _this = this;
        var allconditions = this.filteredTriggerConditionValues.leafChild.properties;
        if (allconditions.length > 0) {
            this.ruleCreationService.allconditions = allconditions;
        }
        else {
            allconditions = this.ruleCreationService.allconditions;
        }
        if (allconditions && this.ruleCreationService.devices) {
            var properties = this.ruleCreationService.filterAutocomplete(event.query, allconditions, 'text');
            this.filterValue.leafChild.properties = properties;
        }
        else {
            if (this.ruleCreationService.creationRule.projectID === '') {
                this.messeges.push({
                    severity: 'error',
                    summary: '',
                    detail: 'Project is not selected'
                });
                setTimeout(function () {
                    _this.messeges = [];
                }, 4000);
            }
            else {
                this.messeges.push({
                    severity: 'error',
                    summary: '',
                    detail: 'Platform devices, which are connected to the project, are not configured'
                });
                setTimeout(function () {
                    _this.messeges = [];
                }, 4000);
            }
        }
    };
    /**
     * This filter function is for selected checkbox.
     * Search the trigger for selected checkbox category
     *
     * @param event is clicked component event
     */
    TriggerComponent.prototype.filterTrigger = function (event) {
        var _this = this;
        this.filterResultData = [];
        var isSet;
        this.filterData.forEach(function (triggerValue) {
            var trigger = triggerValue;
            var countCheckbox = 0;
            for (var Id in _this.triggerCheckboxSelectedValues) {
                if (Id && _this.triggerCheckboxSelectedValues[Id].length > 0) {
                    var triggerName = _this.triggerCheckboxSelectedValues[Id][0];
                    if (trigger.parents.length > 0) {
                        if (trigger.parents[0].name === triggerName) {
                            countCheckbox++;
                        }
                    }
                    else {
                        if (trigger.leafChild.name === triggerName) {
                            countCheckbox++;
                        }
                    }
                }
            }
            if (countCheckbox > 0 || _this.triggerCheckboxSelectedValues.length === 0) {
                isSet = false;
                for (var _i = 0, _a = trigger.parents; _i < _a.length; _i++) {
                    var parent_1 = _a[_i];
                    if (parent_1 && parent_1.name && parent_1.name.toLowerCase()
                        .indexOf(event.query.toLowerCase()) === 0) {
                        if (!isSet) {
                            _this.filterResultData.push(trigger);
                            isSet = true;
                        }
                    }
                }
                if (!isSet && trigger.leafChild.name.toLowerCase()
                    .indexOf(event.query.toLowerCase()) === 0) {
                    _this.filterResultData.push(trigger);
                    isSet = true;
                }
            }
        });
    };
    /**
     * Returns week day as a index number
     *
     * @param day name of a week day
     * @returns any weekday index
     */
    TriggerComponent.prototype.getDayIndex = function (day) {
        for (var conddayIndex in this.condition.days) {
            if (this.condition.days[conddayIndex] === day) {
                return conddayIndex;
            }
        }
        return -1;
    };
    /**
     * Sets weekdays as indexed array
     * @param daysArray weekdays array
     * @returns any returns indexed weekdayes
     */
    TriggerComponent.prototype.setDaysOfWeek = function (daysArray) {
        var createDays = ['', '', '', '', '', '', ''];
        for (var _i = 0, daysArray_1 = daysArray; _i < daysArray_1.length; _i++) {
            var day = daysArray_1[_i];
            var index = this.getDayIndex(day);
            createDays[index] = day;
        }
        return createDays;
    };
    /**
     * Gets labels of the weekdays
     * @param daysArray weekdays
     * @returns any labels
     */
    TriggerComponent.prototype.setDaysOfWeekLabels = function (daysArray) {
        var labels = [];
        for (var _i = 0, daysArray_2 = daysArray; _i < daysArray_2.length; _i++) {
            var day = daysArray_2[_i];
            for (var _a = 0, weekdays_1 = _models_frontend_rule_module_weekdays__WEBPACK_IMPORTED_MODULE_8__["weekdays"]; _a < weekdays_1.length; _a++) {
                var weekday = weekdays_1[_a];
                if (day === weekday.value) {
                    labels.push(weekday.label);
                }
            }
        }
        return labels;
    };
    /**
     * After condition/trigger is selected
     * this function sets all attributes for back-end rule model.
     *
     * @param filterValue user selected value
     * @returns RuleAction This class is for send rule request function
     */
    TriggerComponent.prototype.getTriggergroup = function (filterValue) {
        var leafChild = filterValue.leafChild;
        var value = leafChild.conditionValue;
        var valueLabel;
        var condition = new _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_2__["Condition"]();
        var trigger = new _models_frontend_rule_module_trigger__WEBPACK_IMPORTED_MODULE_4__["Trigger"]();
        var triggergroup = new _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_3__["Triggergroup"]();
        if (value !== undefined) {
            if (value && value.length > 0 && leafChild.condition_attribute === 'days') {
                value = this.setDaysOfWeek(value);
                valueLabel = this.setDaysOfWeekLabels(value);
            }
            else {
                condition.days = undefined;
            }
            condition[leafChild.condition_attribute] = value;
            if (leafChild.condition_attribute === 'days') {
                value = valueLabel.join(',');
            }
            trigger.condition = condition;
            trigger.triggerclass = filterValue.parents[0] ? filterValue.parents[0].triggerClass : leafChild.name;
            if (filterValue.parents[0] && filterValue.parents[0].name === 'Communication') {
                condition.communicationtype = leafChild.name;
                condition.notification = leafChild.name;
            }
            if (leafChild.physical) {
                condition.physical = leafChild.physical;
            }
            if (leafChild.living) {
                condition.living = leafChild.living;
            }
            switch (condition.state) {
                case 0: {
                    condition.state = 'OFF';
                    value = condition.state;
                    break;
                }
                case 1: {
                    condition.state = 'ON';
                    value = condition.state;
                    break;
                }
                default: {
                    break;
                }
            }
            if (leafChild.itemtype) {
                condition.itemtype = leafChild.itemtype;
            }
            if (this.selectedCondition.operator) {
                condition.operator = this.selectedCondition.operator;
            }
            trigger.condition = condition;
            trigger = this.searchDeviceService.searchDeviceFromSelectedTrigger(trigger, leafChild, this.selectedCondition);
            triggergroup.name = this.selectedCondition.text + "  " + value;
            triggergroup.triggerclass = trigger.triggerclass;
            trigger.name = triggergroup.name;
            triggergroup.trigger = trigger;
        }
        return triggergroup;
    };
    /**
     * After trigger(condition) is created, then add new trigger(condition) to triggerList
     * @param filterValue is Rule Trigger Value
     */
    TriggerComponent.prototype.saveNewTrigger = function (filterValue) {
        var _this = this;
        var userId = this.ruleCreationService.loggedUserId;
        this.ruleManagerService.addNewTriggerLeaf(userId, this.getTriggergroup(filterValue))
            .subscribe(function (savedTrigger) {
            _this.ruleCreationService.triggerList.push(savedTrigger);
            _this.ruleCreationService.alltriggerList.push(savedTrigger);
            _this.ruleManagementService.updateTriggerList.addNew[savedTrigger.ID] = savedTrigger;
            _this.clearTrigger();
            _this.ruleCreationService.triggerOverlay.hide();
            _this.clearFilterValue();
        });
    };
    /**
     * This function is for rule update component.
     * If user changes the old trigger(condition), the new trigger(condition) will be combined
     * to the rule.
     * @param filterValueis is Rule Trigger Value
     */
    TriggerComponent.prototype.updateTrigger = function (filterValue) {
        var _this = this;
        var userId = this.ruleCreationService.loggedUserId;
        var trigger = this.getTriggergroup(filterValue);
        trigger.ID = this.inputEditTrigger.ID;
        trigger.trigger.ID = this.inputEditTrigger.trigger.ID;
        this.ruleManagerService.addNewTriggerLeaf(userId, trigger)
            .subscribe(function (responseTriggergroup) {
            var resendData = {
                trigger: responseTriggergroup,
                oldTriggerIndex: _this.editTriggerIndex
            };
            _this.ruleManagementService.changeExistingTriggerGroupStatus.emit(resendData);
            _this.clearTrigger();
        });
    };
    /**
     * Clears all selected trigger(conditions) parents and children values
     */
    TriggerComponent.prototype.clearTrigger = function () {
        this.filterValue.leafChild.conditionValue = undefined;
        this.filterValue = {
            parents: [],
            leafChild: {}
        };
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", String)
    ], TriggerComponent.prototype, "trigger_function", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_3__["Triggergroup"])
    ], TriggerComponent.prototype, "inputEditTrigger", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", Number)
    ], TriggerComponent.prototype, "editTriggerIndex", void 0);
    TriggerComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-trigger',
            template: __webpack_require__(/*! ./trigger.component.html */ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.html"),
            styles: [__webpack_require__(/*! ./trigger.component.css */ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.css")],
            providers: [_models_frontend_rule_module_triggergroup__WEBPACK_IMPORTED_MODULE_3__["Triggergroup"], _models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_2__["Condition"], _models_frontend_rule_module_trigger__WEBPACK_IMPORTED_MODULE_4__["Trigger"], _service_search_device_service__WEBPACK_IMPORTED_MODULE_6__["SearchDeviceService"]]
        }),
        __metadata("design:paramtypes", [_models_frontend_rule_module_condition__WEBPACK_IMPORTED_MODULE_2__["Condition"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_7__["RuleManagerService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_9__["RuleManagementService"],
            _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_5__["RuleCreationService"],
            _service_search_device_service__WEBPACK_IMPORTED_MODULE_6__["SearchDeviceService"],
            _service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_10__["PlatformDeviceManagementService"]])
    ], TriggerComponent);
    return TriggerComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/management/management.component.css":
/*!******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/management/management.component.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".accordion-container{\r\n  background : white;\r\n  width : 100%;\r\n}\r\n\r\n.editRuleButton{\r\n  float: right;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/management/management.component.html":
/*!*******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/management/management.component.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog appendTo=\"body\" key=\"rulemanagement\"></p-confirmDialog>\r\n\r\n<p-dataView #dv [value]=\"rules\" [paginator]=\"true\" [rows]=\"4\" paginatorPosition=\"bottom\" filterBy=\"name\"\r\n            [sortField]=\"sortField\" [sortOrder]=\"sortOrder\"  >\r\n  <p-header>\r\n    <div class=\"ui-helper-clearfix\">\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-6 ui-md-4\">\r\n          <p-dropdown [options]=\"sortOptions\" [(ngModel)]=\"sortKey\" placeholder=\"Sort By\"\r\n                      (onChange)=\"onSortChange($event)\" [autoWidth]=\"false\" [style]=\"{'min-width':'15em'}\" class=\"gridster-item-content\"></p-dropdown>\r\n        </div>\r\n        <div class=\"ui-g-6 ui-md-8\" style=\"text-align:right\">\r\n          <input type=\"search\" pInputText placeholder=\"Search by name\" (keyup)=\"dv.filter($event.target.value)\" class=\"gridster-item-content\">\r\n          <p-dataViewLayoutOptions></p-dataViewLayoutOptions>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </p-header>\r\n  <ng-template let-rule pTemplate=\"listItem\">\r\n    <div class=\"ui-g\" style=\"padding: 0.2em;border-bottom: 1px solid #d9d9d9;background: #eff1f4;border :  none;\">\r\n      <div class=\"ui-g-1 ui-md-1\" style=\"margin:5px;\">\r\n        <button pButton type=\"button\"  icon=\"fa {{rule.active ? 'fa-check' : 'fa-power-off'}}\" (click)=\"activateRuleManagement(rule)\"\r\n                class=\"gridster-item-content ui-button-rounded \" [ngClass]=\"{ 'ui-button-secondary' : !rule.active}\"></button>\r\n      </div>\r\n      <div class=\"ui-g-8 ui-md-8\">\r\n        <div class=\"ui-g\">\r\n          <div class=\"accordion-container\">\r\n            <p-accordion [style]=\"{width : '100%', border : 'none'}\" styleClass=\"myaccordionclass\">\r\n            <p-accordionTab >\r\n              <p-header [style]=\"{border : 'none'}\" class=\"gridster-item-content\">\r\n                <strong>Name: </strong>{{ rule.name }}\r\n              </p-header>\r\n              <div class=\"ui-g-12 ui-sm-12\"><strong>Description : </strong> {{ rule.description }}</div>\r\n              <div class=\"ui-g-12 ui-sm-12\" ><strong>Platform : </strong>\r\n                <span *ngIf=\"indexedPlatforms[rule.platformID]\">{{ indexedPlatforms[rule.platformID].name }}</span>\r\n              </div>\r\n              <div class=\"ui-g-12 ui-sm-12\" ><strong>Project : </strong>\r\n                <span *ngIf=\"indexedProjects[rule.projectID]\">{{ indexedProjects[rule.projectID].name }}</span>\r\n              </div>\r\n              <div class=\"ui-g-12 ui-sm-12\"><strong>Rule logic : </strong>\r\n                <span *ngIf=\"indexedTriggers[rule.rootTGID]\">\r\n                  <div>{{ indexedTriggers[rule.rootTGID].name }}</div>\r\n                  <div><span style=\"color: blue\">Then</span>\r\n                    <span *ngFor=\"let action of rule.ruleActions; let actionIndex = index\">\r\n                   {{ action.name }} <span *ngIf=\"actionIndex != rule.ruleActions.length - 1\">AND</span>\r\n                    </span>\r\n                  </div>\r\n                </span>\r\n              </div>\r\n          </p-accordionTab>\r\n          </p-accordion>\r\n        </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-g-1 ui-md-1\" style=\"margin: 5px\" >\r\n        <button pButton type=\"button\" icon=\"fa fa-edit\" class=\"gridster-item-content editRuleButton\" (click)=\"editRule(rule)\"></button>\r\n      </div>\r\n      <div class=\"ui-g-1 ui-md-1\" style=\"margin: 5px\">\r\n        <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"gridster-item-content ui-button-danger \" (click)=\"confirmRuleDelete(rule)\"></button>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template let-rule pTemplate=\"gridItem\">\r\n    <div style=\"padding:.5em\" class=\"ui-g-12 ui-md-3\">\r\n      <p-panel [header]=\"rule.name\" [style]=\"{'text-align':'center'}\" >\r\n        <div class=\"rule-detail\" >{{ rule.name }} - {{ rule.description }}</div>\r\n        <br>\r\n        <div class=\"rule-detail\">{{ indexedPlatforms[rule.platformID].name }} - {{ indexedProjects[rule.projectID].name }}</div>\r\n        <hr class=\"ui-widget-content\" style=\"border-top:0\">\r\n        <button pButton type=\"button\"  icon=\"fa {{rule.active ? 'fa-check' : 'fa-power-off'}}\" (click)=\"activateRuleManagement(rule)\"\r\n                class=\"gridster-item-content ui-button-rounded \" [ngClass]=\"{ 'ui-button-secondary' : !rule.active}\"></button>\r\n        <button pButton type=\"button\" icon=\"fa fa-edit\" (click)=\"editRule(rule)\" class=\"gridster-item-content\"></button>\r\n        <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"gridster-item-content ui-button-danger\" (click)=\"confirmRuleDelete(rule)\"></button>\r\n      </p-panel>\r\n    </div>\r\n  </ng-template>\r\n</p-dataView>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/management/management.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/management/management.component.ts ***!
  \*****************************************************************************/
/*! exports provided: ManagementComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ManagementComponent", function() { return ManagementComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_rulemanagementwidget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../models/frontend/rulemanagementwidget */ "./src/app/models/frontend/rulemanagementwidget.ts");
/* harmony import */ var _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/datanotification */ "./src/app/models/frontend/rule_module/datanotification.ts");
/* harmony import */ var _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var ManagementComponent = /** @class */ (function () {
    function ManagementComponent(ruleManagementService, ruleManagerService, confirmationService, ruleCreationService, dataService, devicemanager, ruleNotificationService) {
        this.ruleManagementService = ruleManagementService;
        this.ruleManagerService = ruleManagerService;
        this.confirmationService = confirmationService;
        this.ruleCreationService = ruleCreationService;
        this.dataService = dataService;
        this.devicemanager = devicemanager;
        this.ruleNotificationService = ruleNotificationService;
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.indexedTriggers = [];
        this.indexedProjects = [];
        this.indexedPlatforms = [];
        this.changeProjectDataStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.sortOptions = [
            { label: 'Name', value: 'name' },
            { label: 'Description', value: 'description' },
            { label: 'Project', value: 'project' },
            { label: 'Platform', value: 'platform' }
        ];
        this.indexedPlatforms = this.ruleCreationService.indexedPlatforms;
        this.indexedProjects = this.ruleCreationService.indexedProjects;
        this.indexedTriggers = this.ruleCreationService.indexedTriggers;
        this.project = this.ruleManagementService.selectedProjectData;
    }
    /**
     * Loads all platforms from all projects.
     * Gets all rules.
     * Saves logged user id.
     */
    ManagementComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.userId = this.ruleCreationService.loggedUserId;
        if (this.userId && this.indexedPlatforms.length === 0) {
            this.devicemanager.getAllPlatformsFromAllProjects(this.userId)
                .subscribe(function (platforms) {
                _this.indexedPlatforms = [];
                platforms.forEach(function (platform) {
                    _this.indexedPlatforms[platform.platformId] = platform;
                });
            });
        }
        if (this.userId) {
            this.getAllRules(this.userId);
        }
        else {
            this.dataService.userData.subscribe(function (resultUserData) {
                _this.userId = resultUserData.id;
                _this.ruleCreationService.loggedUserId = _this.userId;
                _this.getAllRules(_this.userId);
            });
        }
        this.ruleCreationService.loadIndexedTriggers();
        this.ruleManagementService.displayStatusUpdated
            .subscribe(function (response) {
            _this.displayRuleManagementDialog = response;
        });
    };
    /**
     * This function activates the rule
     *
     * @param Rule rule that has to be activated
     */
    ManagementComponent.prototype.activateRuleManagement = function (rule) {
        rule.active = !rule.active;
        this.updateRuleActivation(rule);
    };
    ManagementComponent.prototype.getAllRules = function (userId) {
        var _this = this;
        this.ruleManagerService.getAllRules(userId)
            .subscribe(function (resultRules) {
            _this.rules = resultRules;
            _this.rules.forEach(function (rule) {
                rule.project = _this.indexedProjects[rule.projectID];
                rule.platform = _this.indexedPlatforms[rule.platformID];
            });
        });
    };
    /**
     * Rule Management delete button pops confirmation message.
     *
     * @param Rule rule that has to be removed.
     */
    ManagementComponent.prototype.confirmRuleDelete = function (rule) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete this rule?',
            header: 'Delete Confirmation',
            key: 'rulemanagement',
            icon: 'pi pi-info-circle',
            accept: function () {
                _this.ruleManagerService.deleteRule(_this.userId, rule)
                    .subscribe(function (response) {
                    _this.saveNotification(_this.userId, rule, 'deleted');
                    _this.deleteLocalRule(rule);
                    _this.messageEvent.emit({ severity: 'success', summary: 'Confirmed', detail: 'Rule deleted.' });
                }, function (error) {
                    _this.messageEvent.emit({ severity: 'warn', summary: 'Warning', detail: 'Something went wrong ${error.error}' });
                });
            },
            reject: function () {
                _this.messageEvent.emit({ severity: 'info', summary: 'Rejected', detail: 'You have rejected.' });
                //this.messeges = [{severity: 'info', summary: 'Rejected', detail: 'You have rejected'}];
            }
        });
    };
    /**
     * Delete rule from local list.
     *
     * @param Rule searchrule delete this search rule.
     */
    ManagementComponent.prototype.deleteLocalRule = function (searchrule) {
        var _this = this;
        this.rules.forEach(function (rule, ruleIndex) {
            if (searchrule.ID === rule.ID) {
                _this.rules.splice(ruleIndex, 1);
            }
        });
    };
    /**
     * This function orders rule by name, description, project/platform name.
     *
     * @param event is order component.
     */
    ManagementComponent.prototype.onSortChange = function (event) {
        var value = event.value;
        if (value.indexOf('!') === 0) {
            this.sortOrder = -1;
            this.sortField = value.substring(1, value.length);
        }
        else {
            this.sortOrder = 1;
            this.sortField = value;
        }
    };
    /**
     * Saves the notification related to the rule
     *
     * @param string userId is logged user id.
     * @param rule relation of the notification
     * @param string event can be activated/deactivated/save/delete/triggered
     */
    ManagementComponent.prototype.saveNotification = function (userId, rule, event) {
        var _this = this;
        var notification = new _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_8__["DataNotification"]();
        notification.userId = userId;
        notification.name = rule.name;
        notification.event = event;
        notification.date = new Date();
        notification.relation = 'Rule';
        notification.relationID = rule.ID;
        rule.project = undefined;
        rule.platform = undefined;
        this.ruleManagerService.saveNotification(userId, notification)
            .subscribe(function (notificationResponse) {
            _this.ruleNotificationService.add(notificationResponse);
        });
    };
    /**
     * Activate/deactivate the rule
     *
     * @param rule that has to be activated
     */
    ManagementComponent.prototype.updateRuleActivation = function (rule) {
        var _this = this;
        var activation = rule.active ? 'activated' : 'deactivated';
        if (rule.active) {
            this.ruleManagerService.activateRule(this.userId, rule)
                .subscribe(function (activatedRule) {
                _this.messageEvent.emit({ severity: 'success', summary: 'Activate Rule', detail: 'Rule has been activated.' });
                rule.project = undefined;
                rule.platform = undefined;
            }, function (error) {
                _this.messageEvent.emit({
                    severity: 'error',
                    summary: 'Activate Rule',
                    detail: 'Rule has not been activated. ${error.error}.'
                });
            });
        }
        else {
            this.ruleManagerService.deactivateRule(this.userId, rule)
                .subscribe(function (deactivatedRule) {
                _this.messageEvent.emit({ severity: 'success', summary: 'Deactivate Rule', detail: 'Rule has been deactivated.' });
                rule.project = undefined;
                rule.platform = undefined;
            }, function (error) {
                _this.messageEvent.emit({
                    severity: 'error',
                    summary: 'Deactivate Rule',
                    detail: 'Rule has not been deactivated. ${ error.error}.'
                });
            });
        }
    };
    /**
     * Edits the rule
     *
     * @param rule changed rule
     */
    ManagementComponent.prototype.editRule = function (rule) {
        this.ruleManagementService.getRuleValueStatus.emit(rule);
        this.editRuleValue = rule;
        this.ruleManagementService.editRuleStatusUpdated.emit(rule);
        this.ruleManagementService.displayRuleUpdateComponent.emit(true);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_rulemanagementwidget__WEBPACK_IMPORTED_MODULE_7__["RuleManagementWidget"])
    ], ManagementComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], ManagementComponent.prototype, "messageEvent", void 0);
    ManagementComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-rule-management',
            template: __webpack_require__(/*! ./management.component.html */ "./src/app/skeleton/dashboard/rules/management/management.component.html"),
            styles: [__webpack_require__(/*! ./management.component.css */ "./src/app/skeleton/dashboard/rules/management/management.component.css")],
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"]]
        }),
        __metadata("design:paramtypes", [_service_rule_management_service__WEBPACK_IMPORTED_MODULE_3__["RuleManagementService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__["RuleManagerService"],
            primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"],
            _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__["RuleCreationService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_5__["DataService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_6__["DeviceManagerService"],
            _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_9__["RuleNotificationService"]])
    ], ManagementComponent);
    return ManagementComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notification/notification.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notification/notification.component.css ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notification/notification.component.html":
/*!***********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notification/notification.component.html ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-confirmDialog appendTo=\"body\" key=\"datanotification_{{currentWidget.id}}\"></p-confirmDialog>\r\n\r\n<p-growl [(value)]=\"messeges\" life=\"4000\"></p-growl>\r\n\r\n<p-dataView #dv [value]=\"notifications\" [paginator]=\"true\" [rows]=\"4\" paginatorPosition=\"bottom\"\r\n            filterBy=\"name\"\r\n            [sortField]=\"sortField\" [sortOrder]=\"sortOrder\">\r\n  <p-header>\r\n    <div class=\"ui-helper-clearfix\">\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-6 ui-md-4\">\r\n          <p-dropdown [options]=\"sortOptions\" [(ngModel)]=\"sortKey\" placeholder=\"Sort By\"\r\n                      (onChange)=\"onSortChange($event)\" [autoWidth]=\"false\" [style]=\"{'min-width':'15em'}\" class=\"gridster-item-content\"></p-dropdown>\r\n        </div>\r\n        <div class=\"ui-g-6 ui-md-8\" style=\"text-align:right\">\r\n\r\n          <input type=\"search\" pInputText placeholder=\"Search by name\" (keyup)=\"dv.filter($event.target.value)\" class=\"gridster-item-content\">\r\n          <p-dataViewLayoutOptions></p-dataViewLayoutOptions>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </p-header>\r\n  <ng-template let-datanotification pTemplate=\"listItem\">\r\n    <div class=\"ui-g\" style=\"padding: 0.2em;border-bottom: 1px solid #d9d9d9;background: #eff1f4;border :  none;\">\r\n      <div class=\"ui-g-11 ui-md-11 rule-details\" *ngIf=\"datanotification.notification\">\r\n        <div class=\"ui-g\">\r\n                <div class=\"ui-g-4 ui-sm-4\" ><strong>{{ datanotification.notification.relation }} name : </strong> {{ datanotification.data.name }}</div>\r\n                <div class=\"ui-g-4 ui-sm-4\"><strong>Event : </strong> {{ datanotification.notification.event }}</div>\r\n                <div class=\"ui-g-4 ui-sm-4\"><strong>Date : </strong> {{ datanotification.notification.date  | date: 'dd/MM/yyyy H:mm:ss' }}</div>\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-g-1 ui-md-1\">\r\n        <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"gridster-item-content ui-button-danger \" (click)=\"confirmNotificationDelete(datanotification.notification)\"></button>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template let-datanotification pTemplate=\"gridItem\">\r\n    <div style=\"padding:.5em\" class=\"ui-g-12 ui-md-3\">\r\n      <p-panel [header]=\"datanotification.rulename\" [style]=\"{'text-align':'center'}\" >\r\n        <div class=\"rule-detail\" >{{ datanotification.data.name }} - {{ datanotification.notification.event }}</div>\r\n        <br>\r\n        <div class=\"rule-detail\">{{ datanotification.notification.date | date: 'dd/MM/yyyy H:mm:ss' }}</div>\r\n        <hr class=\"ui-widget-content\" style=\"border-top:0\">\r\n        <button pButton type=\"button\" icon=\"fa fa-trash\" class=\"gridster-item-content ui-button-danger \" (click)=\"confirmNotificationDelete(datanotification.notification)\"></button>\r\n      </p-panel>\r\n    </div>\r\n  </ng-template>\r\n</p-dataView>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notification/notification.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notification/notification.component.ts ***!
  \*********************************************************************************/
/*! exports provided: NotificationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationComponent", function() { return NotificationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_frontend_rulenotificationwidget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../models/frontend/rulenotificationwidget */ "./src/app/models/frontend/rulenotificationwidget.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var NotificationComponent = /** @class */ (function () {
    function NotificationComponent(dataService, ruleManagerService, ruleManagementService, confirmationService, ruleNotificationService, ruleCreationService) {
        this.dataService = dataService;
        this.ruleManagerService = ruleManagerService;
        this.ruleManagementService = ruleManagementService;
        this.confirmationService = confirmationService;
        this.ruleNotificationService = ruleNotificationService;
        this.ruleCreationService = ruleCreationService;
        this.messeges = [];
        this.sortOptions = [
            { label: 'Name', value: 'name' },
            { label: 'Date', value: 'date' },
            { label: 'Event', value: 'event' }
        ];
        this.notifications = this.ruleNotificationService.notifications;
    }
    /**
     * Loads all notifications.
     * Saves logged user id.
     */
    NotificationComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.ruleCreationService.loggedUserId) {
            this.dataService.userData.subscribe(function (resultUserData) {
                _this.userId = resultUserData.id;
                _this.ruleCreationService.loggedUserId = _this.userId;
                _this.project = _this.ruleManagementService.selectedProjectData;
                _this.ruleManagerService.getAllNotifications(_this.userId)
                    .subscribe(function (resultNotifications) {
                    _this.notifications = resultNotifications;
                    _this.ruleNotificationService.notifications = _this.notifications;
                });
            });
        }
        else {
            this.userId = this.ruleCreationService.loggedUserId;
            this.ruleManagerService.getAllNotifications(this.userId)
                .subscribe(function (resultNotifications) {
                _this.notifications = resultNotifications;
                _this.ruleNotificationService.notifications = _this.notifications;
            });
        }
    };
    /**
     * Deletes notification locally.
     *
     * @param DataNotification searchNotification that has to be removed.
     */
    NotificationComponent.prototype.deleteLocalNotification = function (searchNotification) {
        var _this = this;
        this.notifications.forEach(function (notification, notificationIndex) {
            if (searchNotification.ID === notification.notification.ID) {
                _this.notifications.splice(notificationIndex, 1);
                _this.ruleNotificationService.notifications = _this.notifications;
                _this.ruleNotificationService.displayNotificationUpdate.emit(true);
            }
        });
    };
    /**
     * Confirmation message will be shown after delete button is clicked.
     *
     * @param DataNotification notification that has to be removed.
     */
    NotificationComponent.prototype.confirmNotificationDelete = function (notification) {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete this notification?',
            header: 'Delete Confirmation',
            key: "datanotification_" + this.currentWidget.id,
            icon: 'pi pi-info-circle',
            accept: function () {
                _this.ruleManagerService.deleteNotification(_this.userId, notification)
                    .subscribe(function (response) {
                    _this.ruleManagementService.updateNotificationStatus.emit(response);
                    _this.deleteLocalNotification(notification);
                    _this.messeges = [{ severity: 'success', summary: 'Confirmed', detail: 'Notification deleted' }];
                }, function (error) {
                    _this.messeges = [{ severity: 'warn', summary: 'Warning', detail: "Something went wrong  " + error.error }];
                });
            },
            reject: function () {
                _this.messeges = [{ severity: 'info', summary: 'Rejected', detail: 'You have rejected' }];
            }
        });
    };
    /**
     * Order notification by name,event and date.
     *
     * @param event is notification list data element
     */
    NotificationComponent.prototype.onSortChange = function (event) {
        var value = event.value;
        if (value.indexOf('!') === 0) {
            this.sortOrder = -1;
            this.sortField = value.substring(1, value.length);
        }
        else {
            this.sortOrder = 1;
            this.sortField = value;
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_rulenotificationwidget__WEBPACK_IMPORTED_MODULE_1__["RuleNotificationWidget"])
    ], NotificationComponent.prototype, "currentWidget", void 0);
    NotificationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-rule-notification',
            template: __webpack_require__(/*! ./notification.component.html */ "./src/app/skeleton/dashboard/rules/notification/notification.component.html"),
            styles: [__webpack_require__(/*! ./notification.component.css */ "./src/app/skeleton/dashboard/rules/notification/notification.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_4__["RuleManagerService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_5__["RuleManagementService"],
            primeng_api__WEBPACK_IMPORTED_MODULE_3__["ConfirmationService"],
            _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_6__["RuleNotificationService"],
            _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__["RuleCreationService"]])
    ], NotificationComponent);
    return NotificationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.css":
/*!**************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.css ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".notify-badge {\r\n  position: relative;\r\n}\r\n\r\n.notify-badge[data-badge]:after {\r\n  content: attr(data-badge);\r\n  position: absolute;\r\n  top: -10px;\r\n  left: -10px;\r\n  font-size: .7em;\r\n  background: red;\r\n  color: white;\r\n  width: 18px;\r\n  height: 18px;\r\n  text-align: center;\r\n  line-height: 18px;\r\n  border-radius: 50%;\r\n  box-shadow: 0 0 1px #333;\r\n}\r\n\r\n.notification-header {\r\n  background-color: #edeff1;\r\n}\r\n\r\n.notify-message {\r\n  z-index: 5;\r\n}\r\n\r\n.notification-settings {\r\n  font-size: 20px;\r\n  cursor: pointer;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.html":
/*!***************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.html ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<button id=\"notification-message\" data-badge=\"\" type=\"button\" pButton icon=\"fa fa-bell\" [ngClass]=\"{'notify-badge': isMessages }\" (click)=\"notifyMessages()\">\r\n</button>\r\n<p-card *ngIf=\"showNotifications\"  [style]=\"{position: 'absolute',zIndex: '10',  maxWidth: '300px',right: '77px', maxHeight: '420px'}\">\r\n  <p-header>\r\n    <div class=\"ui-g notification-header\">\r\n      <div class=\"ui-g-10 ui-md-10\">\r\n        <strong>Notifications</strong>\r\n      </div>\r\n      <div class=\"ui-g-2 ui-md-2\">\r\n        <i  class=\"fa fa-cog notification-settings\" (click)=\"notificationSettings()\"></i>\r\n      </div>\r\n    </div>\r\n  </p-header>\r\n  <div *ngFor=\"let message of showNotificationBoxMessages\" class=\"ui-g-12 ui-md-12 notify-message\">\r\n  {{ message.relation }} {{ message.name }} -- {{ message.event }}\r\n    <div style=\"font-size: 11px;\">\r\n      {{ message.date | date : 'dd/MM/yyyy H:mm:ss' }}\r\n    </div>\r\n  </div>\r\n</p-card>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.ts ***!
  \*************************************************************************************/
/*! exports provided: NotifyMessageComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotifyMessageComponent", function() { return NotifyMessageComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var NotifyMessageComponent = /** @class */ (function () {
    function NotifyMessageComponent(dataService, ruleManagerService, ruleCreationService, projectService, ruleNotificationService) {
        this.dataService = dataService;
        this.ruleManagerService = ruleManagerService;
        this.ruleCreationService = ruleCreationService;
        this.projectService = projectService;
        this.ruleNotificationService = ruleNotificationService;
        this.showNotifications = false;
        this.notifications = [];
        this.showNotificationBoxMessages = [];
        this.isMessages = false;
        this.notifications = this.ruleNotificationService.notifications;
        this.showNotificationBoxMessages = this.ruleNotificationService.showNotifications;
        this.isMessages = this.ruleNotificationService.isMessages;
    }
    /**
     * Loads all notification
     */
    NotifyMessageComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.loadNotifications();
        this.ruleNotificationService.displayNotificationUpdate
            .subscribe(function (response) {
            _this.loadNotifications();
        });
    };
    /**
     * Displays the notification widget
     */
    NotifyMessageComponent.prototype.notificationSettings = function () {
        this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_5__["WidgetType"].ruleNotificationView.toString());
    };
    /**
     * Load all notifications
     */
    NotifyMessageComponent.prototype.loadNotifications = function () {
        var _this = this;
        if (!this.userId) {
            this.dataService.userData.subscribe(function (resultUserData) {
                _this.userId = resultUserData.id;
                _this.ruleCreationService.loggedUserId = _this.userId;
                _this.ruleNotificationService.getAllNotification(_this.userId)
                    .subscribe(function (resultNotifications) {
                    _this.ruleNotificationService.notifications = resultNotifications.notifications;
                    _this.notifications = _this.ruleNotificationService.notifications;
                    _this.showNotificationBoxMessages = _this.ruleNotificationService.showNotifications;
                    _this.isMessages = resultNotifications.isMessages;
                    _this.updateMessageBox();
                });
            });
        }
        else {
            this.ruleNotificationService.getAllNotification(this.userId)
                .subscribe(function (resultNotifications) {
                _this.ruleNotificationService.notifications = resultNotifications.notifications;
                _this.notifications = _this.ruleNotificationService.notifications;
                _this.showNotificationBoxMessages = _this.ruleNotificationService.showNotifications;
                _this.isMessages = resultNotifications.isMessages;
                _this.updateMessageBox();
            });
        }
    };
    /**
     * User clicks notification icon and
     * all notifications will be updated with attribute notify true value.
     */
    NotifyMessageComponent.prototype.notifyMessages = function () {
        var _this = this;
        this.showNotifications = !this.showNotifications;
        if (this.notifications.filter(function (notification) { return !notification.notified; }).length > 0) {
            var notNotifiedNotifications = this.notifications.filter(function (notification) { return !notification.notified; });
            notNotifiedNotifications.forEach(function (notification) { return notification.notified = true; });
            this.ruleManagerService.updateNotifications(this.userId, notNotifiedNotifications)
                .subscribe(function (notifications) {
                _this.ruleNotificationService.getAllNotification(_this.userId)
                    .subscribe(function (resultNotifications) {
                    _this.notifications = resultNotifications.notifications;
                    _this.showNotificationBoxMessages = _this.ruleNotificationService.showNotifications;
                    _this.isMessages = resultNotifications.isMessages;
                    _this.updateMessageBox();
                });
            }, function (error) {
                console.log('updateNotifications error', error);
            });
        }
    };
    /**
     * Shows the number of not notified message umber
     */
    NotifyMessageComponent.prototype.updateMessageBox = function () {
        var notifymessages = this.notifications.filter(function (notification) { return !notification.notified; }).length;
        document.querySelector('#notification-message')
            .setAttribute('data-badge', "" + notifymessages);
        this.isMessages = notifymessages > 0;
    };
    NotifyMessageComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-notify-message',
            template: __webpack_require__(/*! ./notify-message.component.html */ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.html"),
            styles: [__webpack_require__(/*! ./notify-message.component.css */ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_1__["RuleManagerService"],
            _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_3__["RuleCreationService"],
            _services_project_service__WEBPACK_IMPORTED_MODULE_4__["ProjectService"],
            _service_rule_notification_service__WEBPACK_IMPORTED_MODULE_6__["RuleNotificationService"]])
    ], NotifyMessageComponent);
    return NotifyMessageComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/pipes/select-item.pipe.ts":
/*!********************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/pipes/select-item.pipe.ts ***!
  \********************************************************************/
/*! exports provided: SelectItemPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectItemPipe", function() { return SelectItemPipe; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __assign = (undefined && undefined.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SelectItemPipe = /** @class */ (function () {
    function SelectItemPipe() {
    }
    SelectItemPipe.prototype.transform = function (item, args) {
        return item.map(function (p) {
            var mapedItem = {
                parents: p.parents,
                leafChild: p.leafChild,
                first_parent_icon: undefined
            };
            mapedItem.first_parent_icon = p.parents.length > 0 ? p.parents[0].icon : p.leafChild.icon;
            return __assign({}, p, mapedItem);
        });
    };
    SelectItemPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"])({
            name: 'toItem'
        })
    ], SelectItemPipe);
    return SelectItemPipe;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/pipes/selected-trigger.pipe.ts":
/*!*************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/pipes/selected-trigger.pipe.ts ***!
  \*************************************************************************/
/*! exports provided: SelectedTriggerPipe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SelectedTriggerPipe", function() { return SelectedTriggerPipe; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var SelectedTriggerPipe = /** @class */ (function () {
    function SelectedTriggerPipe() {
    }
    SelectedTriggerPipe.prototype.transform = function (value, args) {
        return value.split('AND');
    };
    SelectedTriggerPipe = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"])({
            name: 'selectedTrigger'
        })
    ], SelectedTriggerPipe);
    return SelectedTriggerPipe;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts":
/*!****************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts ***!
  \****************************************************************************************/
/*! exports provided: PlatformDeviceManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformDeviceManagementService", function() { return PlatformDeviceManagementService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _triggers_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../triggers-schema */ "./src/app/skeleton/dashboard/rules/triggers-schema.ts");
/* harmony import */ var _actions_schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../actions-schema */ "./src/app/skeleton/dashboard/rules/actions-schema.ts");
/* harmony import */ var _rule_creation_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var PlatformDeviceManagementService = /** @class */ (function () {
    function PlatformDeviceManagementService(ruleCreationService, deviceManagerService) {
        this.ruleCreationService = ruleCreationService;
        this.deviceManagerService = deviceManagerService;
        this.triggersFilterSchema = _triggers_schema__WEBPACK_IMPORTED_MODULE_1__["TriggersFilterSchema"];
        this.actionsFilterSchema = _actions_schema__WEBPACK_IMPORTED_MODULE_2__["ActionsFilterSchema"];
    }
    /**
     * This function adds all devices into TriggerSchema and ActionSchema.
     * Devices are from OpenHab platform.
     *
     * @param projectId is id of selected project
     * @param userId is logged user id
     * @param platformId is selected platform id.
     */
    PlatformDeviceManagementService.prototype.addAllDevices = function (projectId, userId, platformId) {
        var _this = this;
        if (projectId && userId) {
            this.ruleCreationService.getDevicies(platformId, userId, projectId);
            this.deviceManagerService.getAllDevicesByPlatform(platformId, userId, projectId)
                .subscribe(function (devices) {
                var triggerSchemaForAllDevices = _this.triggersFilterSchema.children[0].children[0].children;
                var actionsFilterSchema = _this.actionsFilterSchema.children[0].children[0].children;
                triggerSchemaForAllDevices = [];
                actionsFilterSchema = [];
                var deviceLeaf;
                var deviceActionLeaf;
                var properties = [];
                var actionProperties = [];
                var secondDieviceLeaf;
                var secondActionDieviceLeaf;
                _this.ruleCreationService.possibleDevices = devices;
                devices.forEach(function (device) {
                    if (device.actions && device.actions.length > 0) {
                        deviceLeaf = {
                            name: "" + device.name,
                            condition_attribute: 'state',
                            living: true,
                            properties: [],
                            children: []
                        };
                        deviceActionLeaf = {
                            name: "" + device.name,
                            condition_attribute: 'state',
                            living: true,
                            properties: [],
                            children: []
                        };
                        device.actions.forEach(function (action) {
                            if (action.states && action.states.length > 0) {
                                var property_1 = {
                                    text: "when device " + device.name + " " + action.name + " state",
                                    type: 'text',
                                    actionID: action.id,
                                    deviceID: device.deviceId,
                                    type_options: 'dropdown',
                                    selects: []
                                };
                                var actionProperty_1 = {
                                    text: "change device " + device.name + " " + action.name + " state to",
                                    type: 'text',
                                    actionID: action.id,
                                    deviceID: device.deviceId,
                                    type_options: 'dropdown',
                                    selects: []
                                };
                                action.states.forEach(function (state) {
                                    var select = { label: state.description, value: state.state };
                                    property_1.selects.push(select);
                                    actionProperty_1.selects.push(select);
                                });
                                properties.push(property_1);
                                actionProperties.push(actionProperty_1);
                            }
                            else {
                                secondDieviceLeaf = {
                                    name: "" + device.name,
                                    action: action.name,
                                    condition_attribute: 'state',
                                    living: true,
                                    properties: [
                                        {
                                            text: "when device " + device.name + " state (%)",
                                            type: 'number',
                                            actionID: action.id,
                                            deviceID: device.deviceId,
                                            type_options: 'slider',
                                            min: 0,
                                            max: 100
                                        }
                                    ],
                                    children: []
                                };
                                secondActionDieviceLeaf = {
                                    name: "" + device.name,
                                    action: action.name,
                                    condition_attribute: 'state',
                                    living: true,
                                    properties: [
                                        {
                                            text: "change device " + device.name + " state to (%)",
                                            type: 'number',
                                            actionID: action.id,
                                            deviceID: device.deviceId,
                                            type_options: 'slider',
                                            min: 0,
                                            max: 100
                                        }
                                    ],
                                    children: []
                                };
                                for (var _i = 0, _a = Object.keys(action); _i < _a.length; _i++) {
                                    var index = _a[_i];
                                    if (index === 'value') {
                                        // triggerSchemaForAllDevices.push(secondDieviceLeaf);
                                        // actionsFilterSchema.push(secondActionDieviceLeaf);
                                    }
                                }
                            }
                        });
                        if (deviceLeaf) {
                            deviceLeaf.properties = properties;
                            triggerSchemaForAllDevices.push(deviceLeaf);
                            properties = [];
                        }
                        if (deviceActionLeaf) {
                            deviceActionLeaf.properties = actionProperties;
                            actionsFilterSchema.push(deviceActionLeaf);
                            actionProperties = [];
                        }
                    }
                });
                _this.triggersFilterSchema.children[0].children[0].children = triggerSchemaForAllDevices;
                _this.actionsFilterSchema.children[0].children[0].children = actionsFilterSchema;
                _this.ruleCreationService.triggersFilterSchema = _this.triggersFilterSchema;
                _this.ruleCreationService.actionsFilterSchema = _this.actionsFilterSchema;
                _this.ruleCreationService.triggerFilterObservable.next(_this.triggersFilterSchema);
                _this.ruleCreationService.actionsFilterObservable.next(_this.actionsFilterSchema);
            });
        }
    };
    PlatformDeviceManagementService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [_rule_creation_service__WEBPACK_IMPORTED_MODULE_3__["RuleCreationService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_4__["DeviceManagerService"]])
    ], PlatformDeviceManagementService);
    return PlatformDeviceManagementService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts":
/*!***************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts ***!
  \***************************************************************************/
/*! exports provided: RuleCreationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleCreationService", function() { return RuleCreationService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/rule */ "./src/app/models/frontend/rule_module/rule.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _triggers_schema__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../triggers-schema */ "./src/app/skeleton/dashboard/rules/triggers-schema.ts");
/* harmony import */ var rxjs_Rx__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/Rx */ "./node_modules/rxjs-compat/_esm5/Rx.js");
/* harmony import */ var _actions_schema__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../actions-schema */ "./src/app/skeleton/dashboard/rules/actions-schema.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var RuleCreationService = /** @class */ (function () {
    function RuleCreationService(devicemanager, dataService, ruleManagerService) {
        var _this = this;
        this.devicemanager = devicemanager;
        this.dataService = dataService;
        this.ruleManagerService = ruleManagerService;
        this.alltriggerList = [];
        this.allActionList = [];
        this.loggedUserPlatforms = [];
        this.triggerList = [];
        this.actionList = [];
        this.selectedOperatorList = [];
        this.selectActionOperatorList = [];
        this.displayRuleCreationDialog = false;
        this.displayRuleManagement = false;
        this.creationRule = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_1__["Rule"]();
        this.projects = [];
        this.indexedProjects = [];
        this.platforms = [];
        this.indexedPlatforms = [];
        this.indexedTriggers = [];
        this.displayStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.displayManagementStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.projectsUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.possibleDevices = [];
        this.triggersFilterSchema = _triggers_schema__WEBPACK_IMPORTED_MODULE_4__["TriggersFilterSchema"];
        this.actionsFilterSchema = _actions_schema__WEBPACK_IMPORTED_MODULE_6__["ActionsFilterSchema"];
        this.triggerFilterObservable = new rxjs_Rx__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        this.actionsFilterObservable = new rxjs_Rx__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        this.allconditions = [];
        this.allactions = [];
        this.displayStatusUpdated.emit(this.displayRuleCreationDialog);
        this.displayStatusUpdated.subscribe(function (response) {
            _this.displayRuleCreationDialog = response;
        });
        this.displayManagementStatusUpdated.subscribe(function (response) {
            _this.displayRuleManagement = response;
        });
        this.projectsUpdate.subscribe(function (projects) {
            _this.projects = projects;
            _this.projects.forEach(function (project) {
                _this.indexedProjects[project.id] = project;
            });
            _this.platforms = [];
            _this.dataService.userData.subscribe(function (resultUserData) {
                _this.loggedUserId = resultUserData.id;
            });
            if (_this.loggedUserId && _this.indexedPlatforms.length === 0) {
                _this.devicemanager.getAllPlatformsFromAllProjects(_this.loggedUserId)
                    .subscribe(function (platforms) {
                    _this.indexedPlatforms = [];
                    platforms.forEach(function (platform) {
                        _this.indexedPlatforms[platform.platformId] = platform;
                    });
                });
            }
        });
    }
    /**
     * Loads all triggergroups and indexed them by trigger ID
     */
    RuleCreationService.prototype.loadIndexedTriggers = function () {
        var _this = this;
        this.ruleManagerService.getAllTriggergroups(this.loggedUserId)
            .subscribe(function (triggers) {
            for (var _i = 0, triggers_1 = triggers; _i < triggers_1.length; _i++) {
                var trigger = triggers_1[_i];
                _this.indexedTriggers[trigger.ID] = trigger;
            }
        });
    };
    /**
     * Gets all devices by user,platform and project id.
     *
     * @param platformId is id of platform
     * @param userId  is logged user id
     * @param projectId is selected project id
     */
    RuleCreationService.prototype.getDevicies = function (platformId, userId, projectId) {
        var _this = this;
        this.devicemanager.searchForDevices(platformId, userId, projectId)
            .subscribe(function (devices) {
            _this.devices = devices;
        });
    };
    /**
     * Adds parameter action
     *
     * @param action to be added
     */
    RuleCreationService.prototype.addAction = function (action) {
        this.actionList.push(action);
    };
    /**
     * Returns local action list
     *
     * @returns Array<RuleAction> list
     */
    RuleCreationService.prototype.getAllLocalActions = function () {
        return this.actionList;
    };
    /**
     * This filter function will be multiple time called for triggers and actions.
     *
     * @param query search name
     * @param Array<any> elements list of elements
     * @param string filterValue filter value
     * @returns Array<any> returns filtered list
     */
    RuleCreationService.prototype.filterAutocomplete = function (query, elements, filterValue) {
        var filtered = [];
        elements.forEach(function (value) {
            var oneElement = value;
            if (oneElement[filterValue].toLowerCase()
                .indexOf(query.toLowerCase()) === 0) {
                filtered.push(oneElement);
            }
        });
        return filtered;
    };
    RuleCreationService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_7__["RuleManagerService"]])
    ], RuleCreationService);
    return RuleCreationService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/service/rule-management.service.ts ***!
  \*****************************************************************************/
/*! exports provided: RuleManagementService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleManagementService", function() { return RuleManagementService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var RuleManagementService = /** @class */ (function () {
    function RuleManagementService() {
        var _this = this;
        this.displayStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editRuleStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.displayRuleUpdateComponent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editTriggergroupStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.editActionStatusUpdated = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.updateTriggerListStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.getRuleValueStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.updateNotificationStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.updateTriggerList = {
            edit: { only: [], all: [], new: { only: [], all: [] } },
            remove: { only: [], all: [], new: { only: [], all: [] } },
            addNew: []
        };
        this.changeExistingTriggerGroupStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.changeExistingActionStatus = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.displayStatusUpdated
            .subscribe(function (response) {
            _this.displayRuleManagementDialog = response;
        });
        this.editRuleStatusUpdated
            .subscribe(function (rule) {
            _this.getRuleValueStatus.emit(rule);
        });
    }
    RuleManagementService.prototype.clearUpdateTriggerList = function () {
        this.updateTriggerList = {
            edit: { only: [], all: [], new: { only: [], all: [] } },
            remove: { only: [], all: [], new: { only: [], all: [] } },
            addNew: []
        };
    };
    RuleManagementService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [])
    ], RuleManagementService);
    return RuleManagementService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts":
/*!*******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts ***!
  \*******************************************************************************/
/*! exports provided: RuleNotificationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RuleNotificationService", function() { return RuleNotificationService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/datanotification */ "./src/app/models/frontend/rule_module/datanotification.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm5/operators/index.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};




var RuleNotificationService = /** @class */ (function () {
    function RuleNotificationService(ruleManagerService) {
        this.ruleManagerService = ruleManagerService;
        this.notifications = [];
        this.displayNotificationUpdate = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.showNotifications = [];
        this.isMessages = false;
        this.maxNotifyMessageNumber = 5;
    }
    /**
     * Adds notification to the list.
     *
     * @param DataNotification notification.
     */
    RuleNotificationService.prototype.add = function (notification) {
        this.notifications.push(notification);
        this.displayNotificationUpdate.emit(true);
    };
    RuleNotificationService.prototype.clear = function () {
        this.notifications = [];
    };
    /**
     * Gets all notifications
     *
     * @param string userId logged user id
     * @returns any notification list
     */
    RuleNotificationService.prototype.getAllNotification = function (userId) {
        var _this = this;
        return this.ruleManagerService.getAllNotifications(userId)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (resultNotifications) {
            _this.notifications = [];
            resultNotifications.forEach(function (resultNotification) {
                var relation = resultNotification.data;
                if (relation && relation.notify) {
                    resultNotification.notification.date = new Date(resultNotification.notification.date);
                    _this.notifications.push(resultNotification.notification);
                }
            });
            _this.showNotifications = _this.notifications.length > _this.maxNotifyMessageNumber ?
                _this.notifications.splice(0, _this.maxNotifyMessageNumber) : _this.notifications;
            return {
                isMessage: _this.isMessages,
                notifications: _this.notifications,
                showNotifications: _this.showNotifications
            };
        }, function (error) {
            return error;
        }));
    };
    /**
     * Save rule notification
     *
     * @param string userId logged user id
     * @param Rule rule notification relation rule
     * @param string event name
     */
    RuleNotificationService.prototype.saveRuleNotification = function (userId, rule, event) {
        var _this = this;
        var notification = new _models_frontend_rule_module_datanotification__WEBPACK_IMPORTED_MODULE_1__["DataNotification"]();
        notification.userId = userId;
        notification.name = rule.name;
        notification.event = event;
        notification.date = new Date();
        notification.relation = 'Rule';
        notification.relationID = rule.ID;
        this.ruleManagerService.saveNotification(userId, notification)
            .subscribe(function (notificationResponse) {
            _this.add(notificationResponse);
            _this.displayNotificationUpdate.emit(true);
        });
    };
    RuleNotificationService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_services_rulemanager_service__WEBPACK_IMPORTED_MODULE_2__["RuleManagerService"]])
    ], RuleNotificationService);
    return RuleNotificationService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/service/search-device.service.ts":
/*!***************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/service/search-device.service.ts ***!
  \***************************************************************************/
/*! exports provided: SearchDeviceService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchDeviceService", function() { return SearchDeviceService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _rule_creation_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};



var SearchDeviceService = /** @class */ (function () {
    function SearchDeviceService(deviceManagerService, ruleCreationService) {
        this.deviceManagerService = deviceManagerService;
        this.ruleCreationService = ruleCreationService;
        this.devices = this.ruleCreationService.devices;
    }
    /**
     * This function search selected trigger device ID and sensor ID
     * leafChild and selectedCondition is needed to filter the right device
     * @param Trigger is trigger that user select in filter
     * @param leafChild  is from trigger schema selected last child components
     * @param selectedCondition this is value of trigger that user has selected
     * @returns Trigger After trigger deviceId and sensorID set return the same trigger
     */
    SearchDeviceService.prototype.searchDeviceFromSelectedTrigger = function (trigger, leafChild, selectedCondition) {
        this.userId = this.ruleCreationService.loggedUserId;
        this.projectId = this.ruleCreationService.creationRule.projectID;
        trigger.deviceID = '7_openHabknx:device:38d73ce2';
        trigger.sensorID = 'knx:device:38d73ce2:schlafzimmerlicht_switch';
        if (selectedCondition.actionID && selectedCondition.deviceID) {
            // default device ID and SensorID it will be overwritten
            trigger.deviceID = selectedCondition.deviceID;
            trigger.sensorID = selectedCondition.actionID;
            if (leafChild.condition_attribute.toLowerCase() === 'state') {
                if (trigger.condition['state'] === 'OFF') {
                    trigger.condition.command = 'OFF';
                }
                else if (trigger.condition['state'] === 'ON') {
                    trigger.condition.command = 'ON';
                }
            }
        }
        return trigger;
    };
    /**
     * This function search selected action device ID and sensor ID
     * leafChild and selectedCondition is needed to filter the right device
     * @param action is action that user select in filter
     * @param leafChild is from action schema selected last child components
     * @param selectedCondition this is value of action that user has selected
     * @returns RuleAction After action deviceId and sensorID set return the same action
     */
    SearchDeviceService.prototype.searchDeviceFromSelectedAction = function (action, leafChild, selectedCondition) {
        this.userId = this.ruleCreationService.loggedUserId;
        this.projectId = this.ruleCreationService.creationRule.projectID;
        action.deviceID = '7_openHabknx:device:38d73ce2';
        action.sensorID = 'knx:device:38d73ce2:schlafzimmerlicht_switch';
        action.condition.command = 'ON';
        if (selectedCondition.actionID && selectedCondition.deviceID) {
            // default device ID and Sensor ID will be overwritten
            action.deviceID = selectedCondition.deviceID;
            action.sensorID = selectedCondition.actionID;
            if (leafChild.condition_attribute.toLowerCase() === 'state') {
                if (action.condition['state'] === 'OFF') {
                    action.condition.command = 'OFF';
                }
                else if (action.condition['state'] === 'ON') {
                    action.condition.command = 'ON';
                }
            }
        }
        return action;
    };
    SearchDeviceService = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"])(),
        __metadata("design:paramtypes", [_services_devicemanager_service__WEBPACK_IMPORTED_MODULE_1__["DeviceManagerService"],
            _rule_creation_service__WEBPACK_IMPORTED_MODULE_2__["RuleCreationService"]])
    ], SearchDeviceService);
    return SearchDeviceService;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.css":
/*!************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/sharing/sharing.component.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".autocomplete_label {\r\n  margin: 15px;\r\n}\r\n\r\n.select-details {\r\n  height: 20px;\r\n}\r\n\r\n.clear-button {\r\n  margin-left: 3px;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.html":
/*!*************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/sharing/sharing.component.html ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"ui-g\">\r\n  <div class=\"ui-g-12\" style=\"font-size: 14px;\">\r\n    <p-messages [(value)]=\"messeges\" ></p-messages>\r\n  </div>\r\n</div>\r\n<p-dataView #dv [value]=\"autoSelects\" [paginator]=\"false\" [rows]=\"2\" >\r\n  <p-header styleClass=\"my-panel\">\r\n    <div class=\"ui-helper-clearfix\">\r\n      <div class=\"ui-g header-details\">\r\n        <div class=\"ui-g-12\" style=\"padding: 0px;\" >\r\n          <p-dataViewLayoutOptions></p-dataViewLayoutOptions>\r\n          <button pButton type=\"button\" label=\"Clear\" class=\"gridster-item-content ui-button-secondary clear-button\" (click)=\"clearRuleUser()\" style=\"width: 90px;\"></button>\r\n          <button pButton type=\"button\" label=\"Share\"  (click)=\"shareRuleToUser(user,rule)\" style=\"width: 90px;\" class=\"gridster-item-content\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </p-header>\r\n  <ng-template let-select pTemplate=\"listItem\">\r\n    <div class=\"ui-g\" style=\"padding: .3em;\">\r\n      <div class=\"ui-g-12\">\r\n          <div  *ngIf=\"select.name === 'User'\" >\r\n            <span class=\"first autocomplete_label\">User  </span>\r\n            <p-autoComplete [(ngModel)]=\"user\" field=\"username\" [suggestions]=\"filteredUsers\"\r\n                            (completeMethod)=\"filterUsers($event)\" [size]=\"33\"\r\n                            [minLength]=\"1\" placeholder=\"filter by name\" [dropdown]=\"true\" class=\"gridster-item-content\">\r\n              <ng-template let-user pTemplate=\"item\">\r\n                <div class=\"ui-helper-clearfix\" >\r\n                  <div style=\"font-size:14px;float:right;\">\r\n                    <span>{{ user.username }} -- </span>\r\n                    <span>{{ user.email }}</span>\r\n                  </div>\r\n                </div>\r\n              </ng-template>\r\n            </p-autoComplete>\r\n          </div>\r\n          <div *ngIf=\"select.name === 'Rule'\" >\r\n            <span class=\"first autocomplete_label\">Rule  </span>\r\n            <p-autoComplete [(ngModel)]=\"rule\" field=\"name\" [suggestions]=\"filteredRules\" (completeMethod)=\"filterRules($event)\" [size]=\"33\"\r\n                            [minLength]=\"1\" placeholder=\"filter by name\" [dropdown]=\"true\" class=\"gridster-item-content\">\r\n              <ng-template let-rule pTemplate=\"item\">\r\n                <div class=\"ui-helper-clearfix\" >\r\n                  <div style=\"font-size:14px;float:right;\">{{ rule.name }}</div>\r\n                </div>\r\n              </ng-template>\r\n            </p-autoComplete>\r\n            <br><br>\r\n          </div>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n  <ng-template let-select pTemplate=\"gridItem\">\r\n    <div style=\"padding:.1em\" >\r\n      <p-panel [header]=\"select.name\" [style]=\"{'text-align':'center'}\">\r\n        <div *ngIf=\"select.name === 'User'\" >\r\n          <p-autoComplete [(ngModel)]=\"user\" field=\"username\" [suggestions]=\"filteredUsers\" (completeMethod)=\"filterUsers($event)\" [size]=\"15\"\r\n                          [minLength]=\"1\" placeholder=\"filter by name\" [dropdown]=\"true\" class=\"gridster-item-content\">\r\n            <ng-template let-user pTemplate=\"item\">\r\n              <div class=\"ui-helper-clearfix\" >\r\n                <div style=\"font-size:14px;float:right;\">\r\n                  <span>{{ user.username }} -- </span>\r\n                  <span>{{ user.email }}</span>\r\n                </div>\r\n              </div>\r\n            </ng-template>\r\n          </p-autoComplete>\r\n        </div>\r\n        <div *ngIf=\"select.name === 'Rule'\" >\r\n          <p-autoComplete [(ngModel)]=\"rule\" field=\"name\" [suggestions]=\"filteredRules\" (completeMethod)=\"filterRules($event)\" [size]=\"15\"\r\n                          [minLength]=\"1\" placeholder=\"filter by name\" [dropdown]=\"true\" class=\"gridster-item-content\">\r\n            <ng-template let-rule pTemplate=\"item\">\r\n              <div class=\"ui-helper-clearfix\" >\r\n                <div style=\"font-size:14px;float:right;\">{{ rule.name }}</div>\r\n              </div>\r\n            </ng-template>\r\n          </p-autoComplete>\r\n        </div>\r\n      </p-panel>\r\n    </div>\r\n  </ng-template>\r\n</p-dataView>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/sharing/sharing.component.ts ***!
  \***********************************************************************/
/*! exports provided: SharingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SharingComponent", function() { return SharingComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../models/frontend/rule_module/rule */ "./src/app/models/frontend/rule_module/rule.ts");
/* harmony import */ var _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../services/rulemanager.service */ "./src/app/services/rulemanager.service.ts");
/* harmony import */ var _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _service_rule_management_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








var SharingComponent = /** @class */ (function () {
    function SharingComponent(userManagerService, ruleManagerService, ruleManagementService, ruleCreationService, dataService, deviceManager) {
        this.userManagerService = userManagerService;
        this.ruleManagerService = ruleManagerService;
        this.ruleManagementService = ruleManagementService;
        this.ruleCreationService = ruleCreationService;
        this.dataService = dataService;
        this.deviceManager = deviceManager;
        this.users = [];
        this.filteredUsers = [];
        this.rules = [];
        this.filteredRules = [];
        this.messeges = [];
        this.autoSelects = [];
        this.autoSelects = [{ name: 'User' }, { name: 'Rule' }];
        this.loggedUserPlatforms = this.ruleCreationService.loggedUserPlatforms;
    }
    /**
     * Load project.
     * Load platforms and projects.
     * Load all users.
     * Load all rules.
     */
    SharingComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.ruleManagementService.selectedProjectData) {
            this.dataService.projectData
                .subscribe(function (project) {
                _this.project = project;
                _this.ruleManagementService.selectedProjectData = project;
            });
        }
        else {
            this.project = this.ruleManagementService.selectedProjectData;
        }
        var userId = this.ruleCreationService.loggedUserId;
        this.dataService.userData.subscribe(function (resultUserData) {
            userId = resultUserData.id;
            _this.ruleCreationService.loggedUserId = userId;
            _this.deviceManager.getAllPlatformsFromAllProjects(userId)
                .subscribe(function (platforms) {
                platforms.forEach(function (platform) {
                    _this.loggedUserPlatforms[platform.platformId] = platform;
                });
                _this.ruleCreationService.loggedUserPlatforms = _this.loggedUserPlatforms;
            });
            _this.userManagerService.getAllUsers()
                .subscribe(function (users) {
                _this.users = users.filter(function (user) { return user.id !== userId; });
            });
            _this.ruleManagerService.getAllRules(userId)
                .subscribe(function (rules) {
                _this.rules = rules;
            });
        });
    };
    /**
     * Filters users by the name
     *
     * @param event is autocomplete component
     */
    SharingComponent.prototype.filterUsers = function (event) {
        this.filteredUsers = [];
        for (var _i = 0, _a = Object.keys(this.users); _i < _a.length; _i++) {
            var i = _a[_i];
            var user = this.users[i];
            if (user.username.toLowerCase()
                .indexOf(event.query.toLowerCase()) === 0) {
                this.filteredUsers.push(user);
            }
        }
    };
    /**
     * Filters rules by the name.
     *
     * @param event is autocomplete component.
     */
    SharingComponent.prototype.filterRules = function (event) {
        this.filteredRules = [];
        for (var _i = 0, _a = Object.keys(this.rules); _i < _a.length; _i++) {
            var i = _a[_i];
            var rule = this.rules[i];
            if (rule.name.toLowerCase()
                .indexOf(event.query.toLowerCase()) === 0) {
                this.filteredRules.push(rule);
            }
        }
    };
    /**
     * Clears all messages.
     */
    SharingComponent.prototype.clear = function () {
        this.messeges = [];
    };
    /**
     * Clears rule and user values.
     */
    SharingComponent.prototype.clearRuleUser = function () {
        this.user = '';
        this.rule = '';
    };
    /**
     * Share the rule to the another user
     *
     * @param user is shared user.
     * @param Rule rule shared rule.
     */
    SharingComponent.prototype.shareRuleToUser = function (user, rule) {
        var _this = this;
        this.clear();
        if (!user) {
            this.messeges.push({
                severity: 'error',
                summary: '',
                detail: 'User has not been selected'
            });
            setTimeout(function () {
                _this.clear();
            }, 2000);
        }
        else if (!rule) {
            this.messeges.push({
                severity: 'error',
                summary: '',
                detail: 'Rule has not been selected'
            });
            setTimeout(function () {
                _this.clear();
            }, 2000);
        }
        else {
            this.ruleManagerService.getTriggersByTGID(this.ruleCreationService.loggedUserId, rule.rootTGID)
                .subscribe(function (triggers) {
                var responseTriggers = triggers;
                for (var _i = 0, responseTriggers_1 = responseTriggers; _i < responseTriggers_1.length; _i++) {
                    var trigger = responseTriggers_1[_i];
                    trigger.userId = user.id;
                }
                _this.ruleManagerService.shareAllTriggergroup(user.id, rule.rootTGID, responseTriggers)
                    .subscribe(function (TriggerRoot) {
                    rule.rootTGID = TriggerRoot;
                    rule.userId = user.id;
                    _this.deviceManager.getAllPlatformsFromAllProjects(user.id)
                        .subscribe(function (platforms) {
                        var lgUsPlatform = _this.ruleCreationService.loggedUserPlatforms[rule.platformID];
                        if (platforms.length === 0) {
                            _this.messeges.push({
                                severity: 'error',
                                summary: '',
                                detail: 'This user does not have any assigned platform'
                            });
                            setTimeout(function () {
                                _this.clear();
                            }, 2000);
                        }
                        else {
                            platforms.forEach(function (platform, index) {
                                if (lgUsPlatform && platform.ip === lgUsPlatform.ip && platform.port === lgUsPlatform.port) {
                                    var sharedRule = new _models_frontend_rule_module_rule__WEBPACK_IMPORTED_MODULE_2__["Rule"]();
                                    sharedRule.setRuleData(rule);
                                    sharedRule.platformID = platform.platformId;
                                    sharedRule.projectID = platform.projectId;
                                    _this.ruleManagerService.saveRule(user.id, sharedRule)
                                        .subscribe(function (responseRule) {
                                        if (index === platforms.length - 1) {
                                            _this.messeges.push({
                                                severity: 'success',
                                                summary: '',
                                                detail: "Rule " + responseRule.name + " has been shared"
                                            });
                                        }
                                        setTimeout(function () {
                                            _this.clear();
                                        }, 2000);
                                    }, function (error) {
                                        setTimeout(function () {
                                            _this.clear();
                                        }, 2000);
                                        if (index === platforms.length - 1) {
                                            if (error.status === 404) {
                                                _this.messeges.push({
                                                    severity: 'error',
                                                    summary: '',
                                                    detail: 'This user does not have any rule compatible platforms'
                                                });
                                            }
                                            else {
                                                _this.messeges.push({
                                                    severity: 'error',
                                                    summary: '',
                                                    detail: 'This rule has not been shared. Something went wrong'
                                                });
                                            }
                                        }
                                    });
                                }
                            });
                        }
                    });
                }, function (error) {
                    console.log('share all Triggergroup error', error);
                });
            });
        }
    };
    SharingComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-rule-sharing',
            template: __webpack_require__(/*! ./sharing.component.html */ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.html"),
            styles: [__webpack_require__(/*! ./sharing.component.css */ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.css")]
        }),
        __metadata("design:paramtypes", [_services_usermanager_service__WEBPACK_IMPORTED_MODULE_1__["UserManagerService"],
            _services_rulemanager_service__WEBPACK_IMPORTED_MODULE_3__["RuleManagerService"],
            _service_rule_management_service__WEBPACK_IMPORTED_MODULE_7__["RuleManagementService"],
            _service_rule_creation_service__WEBPACK_IMPORTED_MODULE_4__["RuleCreationService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_5__["DataService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_6__["DeviceManagerService"]])
    ], SharingComponent);
    return SharingComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/rules/triggers-schema.ts":
/*!*************************************************************!*\
  !*** ./src/app/skeleton/dashboard/rules/triggers-schema.ts ***!
  \*************************************************************/
/*! exports provided: TriggersFilterSchema */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TriggersFilterSchema", function() { return TriggersFilterSchema; });
/* harmony import */ var _models_frontend_rule_module_weekdays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../models/frontend/rule_module/weekdays */ "./src/app/models/frontend/rule_module/weekdays.ts");

var TriggersFilterSchema = {
    children: [
        {
            id: 1,
            name: 'Entity Situation',
            triggerClass: 'Entitysituation',
            icon: 'universal-access',
            children: [
                {
                    name: 'All Devices',
                    children: []
                },
                {
                    name: 'Light',
                    living: false,
                    condition_attribute: 'state',
                    itemtype: 'Light',
                    triggerClass: 'Entitysituation',
                    properties: [
                        {
                            text: 'When light  brightness is (%)',
                            type: 'number',
                            type_options: 'slider',
                            min: 0,
                            max: 100
                        },
                        {
                            text: 'When light is',
                            type: 'text',
                            type_options: 'inputSwitch'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Temperature',
                    children: [
                        {
                            name: 'Heater',
                            condition_attribute: 'temperature',
                            living: true,
                            properties: [
                                {
                                    text: 'When temperature is less than (°C)',
                                    type: 'number',
                                    operator: '<',
                                    type_options: 'slider',
                                    min: 0,
                                    max: 100
                                },
                                {
                                    text: 'When temperature is more than (°C)',
                                    type: 'number',
                                    operator: '>',
                                    type_options: 'slider',
                                    min: 0,
                                    max: 100
                                },
                                {
                                    text: 'When temperature is equal to (°C)',
                                    type: 'number',
                                    operator: '=',
                                    type_options: 'slider',
                                    min: 0,
                                    max: 100
                                }
                            ],
                            children: []
                        }
                    ]
                }
            ]
        },
        {
            id: 2,
            name: 'Temporal',
            triggerClass: 'Temporal',
            icon: 'clock-o',
            children: [
                {
                    name: 'Calendar',
                    condition_attribute: 'time',
                    properties: [
                        {
                            text: 'In this calendar date',
                            type: 'text',
                            type_options: 'calendar'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Days of Week',
                    condition_attribute: 'days',
                    properties: [
                        {
                            text: 'Repeat every week',
                            type: 'text',
                            type_options: 'multiselect',
                            selects: _models_frontend_rule_module_weekdays__WEBPACK_IMPORTED_MODULE_0__["weekdays"]
                        },
                        {
                            text: 'Only current week',
                            type: 'text',
                            type_options: 'multiselect',
                            selects: _models_frontend_rule_module_weekdays__WEBPACK_IMPORTED_MODULE_0__["weekdays"]
                        }
                    ],
                    children: []
                },
                {
                    name: 'Time',
                    condition_attribute: 'time',
                    properties: [
                        {
                            text: 'Everyday this time',
                            type: 'text',
                            type_options: 'time'
                        },
                        {
                            text: 'Only once',
                            type: 'text',
                            type_options: 'time'
                        }
                    ],
                    children: []
                }
            ]
        },
        {
            id: 3,
            name: 'Spatial',
            triggerClass: 'Spatial',
            icon: 'map-marker',
            condition_attribute: 'location',
            properties: [
                {
                    text: 'When device location is',
                    type: 'text',
                    type_options: 'dropdown',
                    selects: [
                        { label: 'Fixed', value: 'Fixed' },
                        { label: 'Moving', value: 'Moving' }
                    ]
                }
            ],
            children: []
        },
        {
            id: 4,
            name: 'Situation',
            triggerClass: 'Situation',
            icon: 'automobile',
            children: [
                {
                    name: 'Weather',
                    condition_attribute: 'weather',
                    properties: [
                        {
                            text: 'When weather temperature is less than',
                            type: 'number',
                            operator: '<',
                            type_options: 'slider',
                            min: 0,
                            max: 100
                        },
                        {
                            text: 'When weather temperature is more than',
                            type: 'number',
                            operator: '>',
                            type_options: 'slider',
                            min: 0,
                            max: 100
                        },
                        {
                            text: 'When weather temperature is equal to',
                            type: 'number',
                            operator: '=',
                            type_options: 'slider',
                            min: 0,
                            max: 100
                        }
                    ],
                    children: []
                },
                {
                    name: 'Traffic Situation',
                    condition_attribute: 'trafficsituation',
                    properties: [
                        {
                            text: 'When traffic situation is',
                            type: 'text',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Traffic High', value: 'high' },
                                { label: 'Traffic Middle', value: 'middle' },
                                { label: 'Traffic Low', value: 'low' }
                            ]
                        }
                    ],
                    children: []
                },
                {
                    name: 'Movement',
                    condition_attribute: 'state',
                    living: false,
                    itemtype: 'Movement',
                    properties: [
                        {
                            text: 'When movement is detected',
                            type: 'text',
                            type_options: 'inputSwitch'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Place',
                    living: false,
                    state: 'place',
                    condition_attribute: 'place',
                    properties: [
                        {
                            text: 'When device is located',
                            type: 'text',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Inside', value: 'inside' },
                                { label: 'Outside', value: 'outside' }
                            ]
                        }
                    ],
                    children: []
                }
            ]
        },
        {
            id: 5,
            name: 'Communication',
            triggerClass: 'Communication',
            icon: 'wechat',
            children: [
                {
                    name: 'E-Mail',
                    condition_attribute: 'email',
                    properties: [
                        {
                            text: 'When E-Mail is received from',
                            type: 'text',
                            type_options: 'input'
                        }
                    ],
                    children: []
                },
                {
                    name: 'Telephone number',
                    condition_attribute: 'telephonenumber',
                    properties: [
                        {
                            text: 'When telephone communication is with',
                            type: 'number',
                            type_options: 'input'
                        }
                    ],
                    children: []
                }
            ]
        },
        {
            id: 6,
            name: 'Service',
            triggerClass: 'Service',
            icon: 'cloud',
            children: [
                {
                    name: 'Non Physical service',
                    condition_attribute: 'entry',
                    physical: false,
                    properties: [
                        {
                            text: 'When non physical service is',
                            type: 'string',
                            type_options: 'dropdown',
                            selects: [
                                { label: 'Entry in Database', value: 'Entry in Database' },
                                { label: 'Entry in Logs', value: 'Entry in Logs' },
                                { label: 'Data from Web Service', value: 'Data from Web Service' }
                            ]
                        }
                    ],
                    children: []
                }
            ]
        }
    ]
};


/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.css":
/*!******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/sheet-content.component.css ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "/* You can find the definition of class widget-design in \"Themes/mixin.scss */\r\n/*@import '/ClickDigitalFrontend/src/assets/resources/themes/_theme.scss';*/\r\n.widget-container {\r\n  height: 100%;\r\n  width: 100%;\r\n  background-color: white;\r\n\r\n}\r\n.widget-content {\r\n  padding: 10px 0px 10px 0px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.ui-card-body {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.ui-card-content {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n.delete-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 40px;\r\n  top: 5px;\r\n}\r\n.delete-button:hover {\r\n  background-image: none;\r\n}\r\n.dev-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 5px;\r\n  top: 5px;\r\n}\r\n.dev-button:hover {\r\n  background-image: none;\r\n}\r\n.change-name {\r\n  width: 80%;\r\n  top: 0;\r\n}\r\n.tbutton {\r\n  border: none !important;\r\n}\r\n.transparentButton {\r\n  background-color: transparent !important;\r\n}\r\n.widget-design {\r\n  /*width: -moz-fit-content;\r\n  width: fit-content;\r\n  height: fit-content;*/\r\n /* background-color: $contentBgColor;*/\r\n  /*border-color: #303f9f;*/\r\n  /*background-color: transparent;*/\r\n  width: 100% !important;\r\n  height: 100% !important;\r\n\r\n  /*overflow: hidden;*/\r\n  -o-object-fit: none;\r\n  object-fit: none;\r\n  border-radius: 2px;\r\n  -webkit-user-select: none;\r\n  -moz-user-select: none;\r\n  -ms-user-select: none;\r\n  user-select: none;\r\n}\r\n.gridster-design{\r\n  overflow: visible;\r\n  pointerEvents: 'auto';\r\n}\r\n.ui-card {\r\n  height: 100%;\r\n  width: 100%;\r\n}\r\n::ng-deep .ui-dropdown-filter-container {\r\n  width: 95% !important;\r\n}\r\n[hidden] {\r\n  display: none;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.html":
/*!*******************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/sheet-content.component.html ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<gridster  #dashboardgrid [options]=\"options\" class=\"widget-container\" >\r\n        <!--gridster-item *ngFor=\"let widget of list\" id=\"widget.id\" [id]=\"widget.id\" (click)=\"getCurrentWidget();\" (mouseup)=\"enablePointer(widget.id)\" [item]=\"widget.position\" class=\"gridster-design drag-handler\">\r\n          <p-card class=\"gridster-item-content\" styleClass=\"ui-card-shadow\">\r\n\r\n\r\n            <button pButton icon=\"fa fa-pencil\" [hidden]=\"!(loginStatus > 1 && !widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"widget.isDeveloped = !widget.isDeveloped;\" class=\"tbutton transparentButton dev-button ui-button-secondary\">\r\n            </button>\r\n\r\n            <button pButton icon=\"fa fa-eye\" [hidden]=\"!(loginStatus > 1 && widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"widget.isDeveloped = !widget.isDeveloped;\" class=\"tbutton transparentButton dev-button ui-button-secondary\">\r\n            </button>\r\n\r\n            <button pButton=\"delete\" icon=\"fa fa-trash\" [hidden]=\"!(loginStatus>1 && widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"deleteWidget(widget.id)\"\r\n                    class=\"delete-button tbutton transparentButton ui-button-secondary\">\r\n            </button>\r\n\r\n            <div [ngSwitch]=\"widget.type\" style=\"height:100%; width:100%;\">\r\n              <div *ngSwitchCase=\"widgetType.sliderDeviceControl\" class=\"widget-content\" style=\"width:100%;margin: 0 auto;\">\r\n                <slider-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></slider-control-device>\r\n              </div>\r\n              <div *ngSwitchCase=\"widgetType.toggleDeviceControl\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                <toggle-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></toggle-control-device>\r\n              </div>\r\n              <div *ngSwitchCase=\"widgetType.stateDeviceControl\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                <state-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></state-control-device>\r\n              </div>\r\n              <div *ngSwitchCase=\"widgetType.realtimeValueVisualization\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                <realtime-value-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\"></realtime-value-visualization>\r\n              </div>\r\n\r\n              <div *ngSwitchDefault class=\"widget-content\">\r\n                <input pInputText *ngIf=\"widget.isDeveloped\" class=\"gridster-item-content\" [(ngModel)]=\"widget.name\" placeholder=\"name\"  style=\"width: 80%;\" (ngModelChange)=\"saveInDatabase(widget.id, $event, 'name')\">\r\n                <h3 class=\"gridster-item-content\" *ngIf=\"!widget.isDeveloped\" style=\"margin: 0;\">{{widget.name}}</h3>\r\n\r\n                <bar-chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.barChartVisualization\"></bar-chart-visualization>\r\n                <chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.lineChartVisualization\"></chart-visualization>\r\n                <history-anomaly style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.historyAnomaly\"></history-anomaly>\r\n                <realtime-anomaly style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.realtimeAnomaly\"></realtime-anomaly>\r\n                <app-add-device style= \"height: 100%; width:100%;\"[currentWidget]=\"widget\" *ngIf=\"widget.type === widgetType.addDevice\"></app-add-device>\r\n                <app-delete-device style= \"height: 100%; width:100%;\"[currentWidget]=\"widget\" *ngIf=\"widget.type === widgetType.deleteDevice\"></app-delete-device>\r\n\r\n                <div *ngIf=\"widget.type === widgetType.ruleManagementView\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                  <br>\r\n                  <app-rule-management style= \"height: 100%; width: 100%;\" [currentWidget]=\"widget\" ></app-rule-management>\r\n                </div>\r\n                <div *ngIf=\"widget.type === widgetType.ruleNotificationView\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                  <br>\r\n                  <app-rule-notification style= \"height: 100%; width: 100%;\" [currentWidget]=\"widget\" ></app-rule-notification>\r\n                </div>\r\n                <div *ngIf=\"widget.type === widgetType.ruleSharingViewWidget\"  class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n                  <app-rule-sharing style= \"height: 100%; width: 100%;\" ></app-rule-sharing>\r\n                </div>\r\n\r\n              </div>\r\n            </div>\r\n          </p-card>\r\n        </gridster-item-->\r\n\r\n  <gridster-item *ngFor=\"let widget of list\" id=\"widget.id\" [id]=\"widget.id\" [item]=\"widget.position\" class=\"gridster-design\" (mouseup)=\"enablePointer(widget.id)\" style=\"word-break: break-all;\">\r\n    <p-card  styleClass=\"ui-card-shadow\" >\r\n      <!-- toggle developermode button-->\r\n\r\n      <button pButton icon=\"fa fa-pencil\" [hidden]=\"!(loginStatus > 1 && !widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\"\r\n              (touchstart)=\"$event.stopPropagation()\" (click)=\"widget.isDeveloped = !widget.isDeveloped;\"\r\n              class=\"gridster-item-content tbutton transparentButton dev-button ui-button-secondary\">\r\n      </button>\r\n\r\n      <button pButton icon=\"fa fa-eye\" [hidden]=\"!(loginStatus > 1 && widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\"\r\n              (touchstart)=\"$event.stopPropagation()\" (click)=\"changeDeveloperMode(widget);\"\r\n              class=\"gridster-item-content tbutton transparentButton dev-button ui-button-secondary\">\r\n      </button>\r\n\r\n      <!-- delete button-->\r\n      <button pButton=\"delete\" icon=\"fa fa-trash\" [hidden]=\"!(loginStatus>1 && widget.isDeveloped)\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"deleteWidget(widget.id)\"\r\n              class=\"gridster-item-content delete-button tbutton transparentButton ui-button-secondary\">\r\n      </button>\r\n\r\n      <!-- changes the widget content -->\r\n\r\n      <div [ngSwitch]=\"widget.type\" style=\"height:100%; width:100%;\">\r\n        <div *ngSwitchCase=\"widgetType.sliderDeviceControl\" class=\"widget-content\" style=\"width:100%;margin: 0 auto;\">\r\n          <slider-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></slider-control-device>\r\n        </div>\r\n        <div *ngSwitchCase=\"widgetType.toggleDeviceControl\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n          <toggle-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></toggle-control-device>\r\n        </div>\r\n        <div *ngSwitchCase=\"widgetType.stateDeviceControl\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n          <state-control-device style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></state-control-device>\r\n        </div>\r\n        <div *ngSwitchCase=\"widgetType.realtimeValueVisualization\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n          <realtime-value-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\"></realtime-value-visualization>\r\n        </div>\r\n        <!--<div *ngSwitchCase=\"widgetType.historyAnomaly\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">-->\r\n        <!--<history-anomaly style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\"></history-anomaly>-->\r\n        <!--</div>-->\r\n\r\n        <div *ngSwitchDefault class=\"widget-content\">\r\n          <input pInputText *ngIf=\"widget.isDeveloped\" class=\"gridster-item-content\" [(ngModel)]=\"widget.name\" placeholder=\"name\"  style=\"width: 80%; \" (ngModelChange)=\"saveInDatabase(widget.id, $event, 'name')\">\r\n          <h3 class=\"gridster-item-content\" *ngIf=\"!widget.isDeveloped\" style=\"margin: 0; \">{{widget.name}}</h3>\r\n          <!-- select device -->\r\n          <bar-chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.barChartVisualization\"></bar-chart-visualization>\r\n          <doughnut-chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.doughnutChartVisualization\"></doughnut-chart-visualization>\r\n          <polar-area-chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.polarAreaChartVisualization\"></polar-area-chart-visualization>\r\n          <bubble-chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.bubbleChartVisualization\"></bubble-chart-visualization>\r\n          <chart-visualization style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.lineChartVisualization\"></chart-visualization>\r\n          <history-anomaly style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.historyAnomaly\"></history-anomaly>\r\n          <realtime-anomaly style= \"height: 100%; width:100%;\" [currentWidget]=\"widget\" (resizeFont)=\"handleResizeFont($event)\" *ngIf=\"widget.type === widgetType.realtimeAnomaly\"></realtime-anomaly>\r\n          <app-add-device style= \"height: 100%; width:100%;\"[currentWidget]=\"widget\" *ngIf=\"widget.type === widgetType.addDevice\"></app-add-device>\r\n          <app-delete-device style= \"height: 100%; width:100%;\"[currentWidget]=\"widget\" *ngIf=\"widget.type === widgetType.deleteDevice\"></app-delete-device>\r\n          <!-- rule widgets -->\r\n          <div *ngIf=\"widget.type === widgetType.ruleManagementView\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n            <br>\r\n            <app-rule-management style= \"height: 100%; width: 100%;\" [currentWidget]=\"widget\" (messageEvent)=\"forwardMsgToDashboardComponent($event)\"></app-rule-management>\r\n          </div>\r\n          <div *ngIf=\"widget.type === widgetType.ruleNotificationView\" class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n            <br>\r\n            <app-rule-notification style= \"height: 100%; width: 100%;\" [currentWidget]=\"widget\" ></app-rule-notification>\r\n          </div>\r\n          <div *ngIf=\"widget.type === widgetType.ruleSharingViewWidget\"  class=\"widget-content\" style=\"width:100%; margin: 0 auto;\">\r\n            <app-rule-sharing style= \"height: 100%; width: 100%;\" ></app-rule-sharing>\r\n          </div>\r\n          <!-- end rule widgets -->\r\n        </div>\r\n      </div>\r\n    </p-card>\r\n  </gridster-item>\r\n\r\n</gridster>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.ts":
/*!*****************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/sheet-content.component.ts ***!
  \*****************************************************************************/
/*! exports provided: SheetContentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SheetContentComponent", function() { return SheetContentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var angular_gridster2__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! angular-gridster2 */ "./node_modules/angular-gridster2/fesm5/angular-gridster2.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _rules_service_rule_notification_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../rules/service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../../../environments/environment */ "./src/environments/environment.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var SheetContentComponent = /** @class */ (function () {
    function SheetContentComponent(databaseService, dataService, projectService, notificationService, router) {
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.projectService = projectService;
        this.notificationService = notificationService;
        this.router = router;
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.widgetType = _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"];
        this.mouseup = false;
    }
    SheetContentComponent_1 = SheetContentComponent;
    SheetContentComponent.itemChange = function (item, itemComponent) {
        console.log("itemChange!!!");
        var el = document.getElementById(itemComponent.el.id);
        console.log("element: ", el);
        if (el !== undefined && el !== null) {
            el.style.pointerEvents = 'auto';
        }
    };
    SheetContentComponent.itemResize = function (item, itemComponent) {
        console.log("itemRESIZE!!!");
        var el = document.getElementById(itemComponent.el.id);
        console.log("elem: ", el);
        if (el !== undefined && el !== null) {
            el.style.pointerEvents = 'auto';
        }
    };
    SheetContentComponent.prototype.enablePointer = function (widgetId) {
        console.log("enablePointer!!!");
        var el = document.getElementById(widgetId);
        if (el !== undefined && el !== null) {
            el.style.pointerEvents = 'auto';
        }
    };
    SheetContentComponent.prototype.handleResizeFont = function (elem) {
        console.log("handle it!");
        //SheetContentComponent.fitText(elem);
    };
    SheetContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.currentLoginStatus.subscribe(function (value) {
            _this.loginStatus = value;
            _this.dataloaded = true;
        });
        this.dataService.userData
            .subscribe(function (user) { return _this.user = user; });
        this.dataService.currentDashboardId
            .subscribe(function (dashboardId) {
            _this.currentDashboardId = dashboardId;
        });
        this.dataService.currentSheetId
            .subscribe(function (sheetId) {
            _this.currentSheetId = sheetId;
        });
        this.dataService.projectData
            .subscribe(function (project) {
            _this.project = project;
            console.log('updated Project data');
            console.log("project: ", project);
            _this.list = _this.widgetList();
            console.log(_this.list);
        });
        // on hover, change color of buttons
        jquery__WEBPACK_IMPORTED_MODULE_6__(document).ready(function () {
            jquery__WEBPACK_IMPORTED_MODULE_6__('.tbutton').hover(function () {
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).addClass('ui-button-primary');
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).removeClass('transparentButton');
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).removeClass('ui-button-secondary');
            }, function () {
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).addClass('transparentButton');
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).addClass('ui-button-secondary');
                jquery__WEBPACK_IMPORTED_MODULE_6__(this).removeClass('ui-button-primary');
            });
        });
        this.options = {
            itemChangeCallback: SheetContentComponent_1.itemChange,
            itemResizeCallback: SheetContentComponent_1.itemResize,
            gridType: angular_gridster2__WEBPACK_IMPORTED_MODULE_4__["GridType"].Fit,
            displayGrid: angular_gridster2__WEBPACK_IMPORTED_MODULE_4__["DisplayGrid"].Always,
            compactType: angular_gridster2__WEBPACK_IMPORTED_MODULE_4__["CompactType"].None,
            margin: 10,
            outerMargin: true,
            cols: 100,
            rows: 50,
            minCols: 100,
            //maxCols: 200,
            minRows: 50,
            //maxRows: 100,
            pushItems: false,
            pushDirections: { north: false, east: false, south: false, west: false },
            pushResizeItems: false,
            swap: false,
            disablePushOnDrag: true,
            disablePushOnResize: true,
            draggable: {
                enabled: true,
                stop: function (event, $element, widget) {
                    console.log("dragable");
                    this.saveInDatabase($element.el.id, event, 'position');
                }.bind(this)
            },
            resizable: {
                enabled: true,
                stop: function (event, $element, widget) {
                    console.log("resizeable");
                    console.log("widget ", widget);
                    console.log("event ", event);
                    console.log("elem ", $element);
                    this.saveInDatabase($element.el.id, event, 'position');
                    window.dispatchEvent(new Event('resize'));
                }.bind(this)
            }
        };
        this.connectToEntityStateSocket();
        this.connectToDeviceStatesSocket();
        this.connectNotificationToSocket();
    };
    SheetContentComponent.prototype.connectToEntityStateSocket = function () {
        var _this = this;
        var connection = new WebSocket("" + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].websocketProtocol + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].contextRoot + "/" + this.user.id + "/" + this.project.id + "/webSocket/entitystatechanged");
        // When the connection is open, send some data to the server
        connection.onopen = function () {
            console.log('Opened websocket connection with topic: entitystatechanged');
        };
        // Log errors
        connection.onerror = function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('WebSocket Error ' + error);
        };
        // Log messages from the server
        connection.onmessage = function (messageEvent) {
            var data = JSON.parse(messageEvent.data);
            for (var _i = 0, _a = _this.project.dashboards; _i < _a.length; _i++) {
                var dashboard = _a[_i];
                for (var _b = 0, _c = dashboard.sheets; _b < _c.length; _b++) {
                    var sheet = _c[_b];
                    for (var _d = 0, _e = sheet.widgets; _d < _e.length; _d++) {
                        var widget = _e[_d];
                        switch (widget.type) {
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].realtimeValueVisualization:
                                _this.setValueViewWidgetData(widget, data);
                                break;
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].lineChartVisualization:
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].doughnutChartVisualization:
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].sliderDeviceControl:
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].toggleDeviceControl:
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].stateDeviceControl:
                                _this.setRTChartWidgetData(widget, data);
                                break;
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].realtimeAnomaly:
                                _this.setAnomalyRTChartWidgetData(widget, data);
                                break;
                        }
                    }
                }
            }
            console.log('Server: ', messageEvent.data);
        };
    };
    SheetContentComponent.prototype.connectToDeviceStatesSocket = function () {
        var _this = this;
        var connection = new WebSocket("" + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].websocketProtocol + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].contextRoot + "/" + this.user.id + "/" + this.project.id + "/webSocket/devicestatuschanged");
        // When the connection is open, send some data to the server
        connection.onopen = function () {
            console.log('Opened websocket connection with topic: devicestatuschanged');
        };
        // Log errors
        connection.onerror = function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('WebSocket Error ' + error);
        };
        // Log messages from the server
        connection.onmessage = function (messageEvent) {
            var data = JSON.parse(messageEvent.data);
            for (var _i = 0, _a = _this.project.dashboards; _i < _a.length; _i++) {
                var dashboard = _a[_i];
                for (var _b = 0, _c = dashboard.sheets; _b < _c.length; _b++) {
                    var sheet = _c[_b];
                    for (var _d = 0, _e = sheet.widgets; _d < _e.length; _d++) {
                        var widget = _e[_d];
                        switch (widget.type) {
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].doughnutChartVisualization:
                                _this.setValueViewWidgetData(widget, data);
                                break;
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].lineChartVisualization:
                                _this.setRTChartWidgetData(widget, data);
                                break;
                            case _models_frontend_widget__WEBPACK_IMPORTED_MODULE_8__["WidgetType"].realtimeAnomaly:
                                _this.setAnomalyRTChartWidgetData(widget, data);
                                break;
                        }
                    }
                }
            }
            console.log('Server: ', messageEvent.data);
        };
    };
    SheetContentComponent.prototype.connectNotificationToSocket = function () {
        var _this = this;
        var connectionNotification = new WebSocket("" + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].websocketProtocol + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].baseUrl + _environments_environment__WEBPACK_IMPORTED_MODULE_10__["environment"].contextRoot + "/" + this.user.id + "/" + this.project.id + "/webSocket/rulestatuschanged");
        connectionNotification.onopen = function () {
            console.log('Opened websocket connection with topic: rulestatuschanged');
        };
        // Log errors
        connectionNotification.onerror = function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('WebSocket Error ' + error);
        };
        // Log messages from the server
        connectionNotification.onmessage = function (messageEvent) {
            var data = JSON.parse(messageEvent.data);
            var status;
            switch (data.status.toLowerCase()) {
                case 'running': {
                    status = 'triggered';
                    console.log('status =', status);
                    break;
                }
                case 'idle': {
                    status = 'activated';
                    break;
                }
                case 'disabled': {
                    status = 'deactivated';
                    break;
                }
                default: {
                    status = undefined;
                    break;
                }
            }
            switch (data.statusDetail.toLowerCase()) {
                case 'disabled': {
                    if (!status) {
                        status = 'deactivated';
                    }
                    break;
                }
            }
            if (status) {
                _this.notificationService.saveRuleNotification(data.rule.userId, data.rule, status);
            }
        };
    };
    /**
     * This method returns the widget list of the widget which are inherit in the current sheet.
     * @returns {Array<Widget>} the widget array
     */
    SheetContentComponent.prototype.widgetList = function () {
        var _this = this;
        return this.project.dashboards
            .find(function (x) { return x.id === _this.currentDashboardId; }).sheets
            .find(function (x) { return x.id === _this.currentSheetId; }).widgets;
    };
    /**
     * This method sets the current widget id a user has interacted with last
     * @param widgetId the {@link Widget#id}
     */
    SheetContentComponent.prototype.setCurrentWidgetId = function (widgetId) {
        this.currentWidgetId = widgetId;
    };
    SheetContentComponent.prototype.changeDeveloperMode = function (widget) {
        console.log("widget.isDeveloped: ", widget.isDeveloped);
        widget.isDeveloped = !widget.isDeveloped;
        console.log("widget.isDeveloped: ", widget.isDeveloped);
        this.saveInDatabase(widget.id, widget.isDeveloped, 'isDeveloped');
    };
    /**
     * This method saves the selected options into the database.
     * @param widgetId the id of the widget to save
     * @param value the value
     * @param field the field where to store
     */
    SheetContentComponent.prototype.saveInDatabase = function (widgetId, value, field) {
        var _this = this;
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, widgetId, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_7__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database entry ', error);
        });
    };
    SheetContentComponent.prototype.setValueViewWidgetData = function (widget, data) {
        // console.log('insetValueView');
        if (widget.deviceId === data.deviceId) {
            if (widget.entityId === data.entityId) {
                widget.value = data.value;
            }
        }
    };
    // type of chartData: Array<{data: number[] , label: string, entityId: string}> = [{'data': [0], label:'', entityId:''}];
    SheetContentComponent.prototype.setRTChartWidgetData = function (widget, data) {
        this.dataService.refreshRealtimeChart(data.dateTime, Number(data.value), widget.id, data.deviceId, data.entityId);
    };
    // type of chartData: Array<{data: number[] , label: string, entityId: string}> = [{'data': [0], label:'', entityId:''}];
    //protected setRTChartWidgetData(widget: RealTimeChartWidget, data: EntityStatechangeResponse){
    // this.dataService.refreshRealtimeChart(data.dateTime, Number(data.value), widget.id, data.deviceId, data.entityId);
    //}
    SheetContentComponent.prototype.setAnomalyRTChartWidgetData = function (widget, data) {
        this.dataService.refreshRealtimeAnomaly(data.dateTime, Number(data.value), Number(data.anomalyscore), widget.id, data.deviceId, data.entityId);
    };
    SheetContentComponent.prototype.deleteWidget = function (widgetid) {
        this.setCurrentWidgetId(widgetid);
        this.projectService.deleteWidget(widgetid);
    };
    // protected setRTAnomalyWidgetData(widget: RealtimeAnomalyWidget, data: EntityStatechangeResponse){
    //   this.dataService.refreshRealtimeAnomaly(data.dateTime, Number(data.value), widget.id, data.deviceId, data.entityId, data.);
    // }
    // dynamically change Font size based on width of widget
    SheetContentComponent.measureText = function (pText, pFontSize, pFamily, pWeight) {
        var lDiv = document.createElement('div');
        lDiv.style.fontFamily = pFamily;
        lDiv.style.fontWeight = pWeight;
        lDiv.style.fontSize = '' + pFontSize + 'px';
        lDiv.style.position = 'absolute';
        lDiv.style.left = '-1000';
        lDiv.style.top = '-1000';
        lDiv.innerHTML = '<div>pText</div>';
        document.body.appendChild(lDiv);
        //console.log("pseudoelem: ", lDiv.style);
        console.log("pseudoelem: ", lDiv.innerHTML);
        var lResult = {
            width: lDiv.clientWidth,
            height: lDiv.clientHeight
        };
        document.body.removeChild(lDiv);
        lDiv = null;
        return lResult;
    };
    SheetContentComponent.fitText = function (el) {
        console.log('FITTEXT');
        var text = el.textContent;
        var style = window.getComputedStyle(el, null).getPropertyValue('font-size');
        var fsize = parseFloat(style);
        var fsizeString;
        var fam = window.getComputedStyle(el, null).getPropertyValue('font-family');
        var weight = window.getComputedStyle(el, null).getPropertyValue('font-weight');
        var width = parseFloat(window.getComputedStyle(el, null).getPropertyValue('width'));
        var height = parseFloat(window.getComputedStyle(el, null).getPropertyValue('height'));
        var measured = this.measureText(text, fsize, fam, weight);
        console.log("text: ", text);
        console.log("fam: ", fam);
        console.log("width: ", measured.width, " and ", width);
        console.log("height: ", measured.height, " and ", height);
        // if both widht and height are smaller than the widget size, than increase font
        if ((measured.width < width) && (measured.height < height)) {
            console.log('increasing');
            var m = this.measureText(text, fsize, fam, weight);
            var u = 0;
            // while both width and height are smaller than the widget, increase
            while ((m.width < width) && (m.height < height) && u < 5000) {
                fsizeString = fsize + 0.5 + 'px';
                el.style.fontSize = fsizeString;
                // window.getComputedStyle(el, null).setProperty('font-size', fsizeString);
                style = window.getComputedStyle(el, null).getPropertyValue('font-size');
                fsize = parseFloat(style);
                m = this.measureText(text, fsize, fam, weight);
                width = parseFloat(window.getComputedStyle(el, null).getPropertyValue('width'));
                height = parseFloat(window.getComputedStyle(el, null).getPropertyValue('height'));
                u++;
            }
            measured.width = m.width;
            measured.height = m.height;
            console.log("u1: ", u);
        }
        console.log("width: ", measured.width, " and ", width);
        console.log("height: ", measured.height, " and ", height);
        if ((measured.width > width) || (measured.height > height)) {
            console.log('reducing');
            style = window.getComputedStyle(el, null).getPropertyValue('font-size');
            fsize = parseFloat(style);
            var m = this.measureText(text, fsize, fam, weight);
            var n = 0;
            while (((m.width > width) || (m.height > height)) && n < 5000) {
                fsizeString = fsize - 0.5 + 'px';
                el.style.fontSize = fsizeString;
                //window.getComputedStyle(el, null).setProperty('font-size', fsizeString);
                style = window.getComputedStyle(el, null).getPropertyValue('font-size');
                fsize = parseFloat(style);
                m = this.measureText(text, fsize, fam, weight);
                width = parseFloat(window.getComputedStyle(el, null).getPropertyValue('width'));
                height = parseFloat(window.getComputedStyle(el, null).getPropertyValue('height'));
                n++;
                console.log("width: ", measured.width, " and ", width);
                console.log("height: ", measured.height, " and ", height);
            }
            console.log("n: ", n);
        }
    };
    SheetContentComponent.prototype.getCurrentWidget = function () {
        console.log("mousedown");
        console.log('currentwidget: ', document.getElementById(this.currentWidgetId));
    };
    SheetContentComponent.prototype.forwardMsgToDashboardComponent = function ($event) {
        this.messageEvent.emit($event);
    };
    var SheetContentComponent_1;
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], SheetContentComponent.prototype, "messageEvent", void 0);
    SheetContentComponent = SheetContentComponent_1 = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'sheet-content',
            template: __webpack_require__(/*! ./sheet-content.component.html */ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.html"),
            styles: [__webpack_require__(/*! ./sheet-content.component.css */ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.css")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [_services_database_service__WEBPACK_IMPORTED_MODULE_5__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            _services_project_service__WEBPACK_IMPORTED_MODULE_3__["ProjectService"],
            _rules_service_rule_notification_service__WEBPACK_IMPORTED_MODULE_9__["RuleNotificationService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], SheetContentComponent);
    return SheetContentComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.css":
/*!****************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.css ***!
  \****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.cut-text {\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n\r\n.center-text {\r\n  text-align: center;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: calc(100% - 55px);\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n.spinner {\r\n  text-align: center;\r\n  position: absolute;\r\n  top: calc((100% - 55px)/2);\r\n  right: calc(50% - 55px);\r\n}\r\n\r\n.spinner > div {\r\n  width: 8px;\r\n  height: 8px;\r\n  background-color: #333;\r\n\r\n  border-radius: 100%;\r\n  display: inline-block;\r\n  -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n  animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n}\r\n\r\n.spinner .bounce1 {\r\n  -webkit-animation-delay: -0.32s;\r\n  animation-delay: -0.32s;\r\n}\r\n\r\n.spinner .bounce2 {\r\n  -webkit-animation-delay: -0.16s;\r\n  animation-delay: -0.16s;\r\n}\r\n\r\n@-webkit-keyframes sk-bouncedelay {\r\n  0%, 80%, 100% { -webkit-transform: scale(0) }\r\n  40% { -webkit-transform: scale(1.0) }\r\n}\r\n\r\n@keyframes sk-bouncedelay {\r\n  0%, 80%, 100% {\r\n    -webkit-transform: scale(0);\r\n    transform: scale(0);\r\n  } 40% {\r\n      -webkit-transform: scale(1.0);\r\n      transform: scale(1.0);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.html":
/*!*****************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.html ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"History Anomaly Data Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation settings</h3>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\"></div>\r\n      <div class=\"ui-g-2 grid-elem\">to</div>\r\n      <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">X axes label:</div>\r\n      <div></div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.xLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Y axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.yLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input settings</h3>\r\n    </div>\r\n    <p-accordion [multiple]=\"true\">\r\n      <div *ngFor=\"let group of dropdownList\" class=\"ui-g-12 grid-elem\">\r\n        <p-accordionTab  [selected]=\"true\" style=\"align-items: center; overflow: auto; width: 100%;\">\r\n          <p-header>\r\n            Device:\r\n            <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(group.deviceEntity.deviceId)\"\r\n                        [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.deviceId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            Sensor:\r\n            <p-dropdown appendTo=\"body\" [options]=\"group.sensorList\" [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.entityId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n          </p-header>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.label\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data unit:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.unit\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n        </p-accordionTab>\r\n      </div>\r\n    </p-accordion>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;isAllowed=false;\"  [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div class=\"ui-g\">\r\n  <div class=\"ui-g-12\">\r\n    <div class=\"ui-g-4 cut-text center-text\" >\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"green\" />\r\n      </svg> normal\r\n    </div>\r\n    <div class=\"ui-g-4 cut-text center-text\">\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"orange\" />\r\n      </svg> at risk\r\n    </div>\r\n    <div class=\"ui-g-4 cut-text center-text\">\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"red\" />\r\n      </svg> anomaly\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"spinner\" *ngIf=\"loading\">\r\n  <small><strong>Loading   </strong></small>\r\n  <div class=\"bounce1\"></div>\r\n  <div class=\"bounce2\"></div>\r\n  <div class=\"bounce3\"></div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.ts":
/*!***************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.ts ***!
  \***************************************************************************************************************/
/*! exports provided: HistoryAnomalyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HistoryAnomalyComponent", function() { return HistoryAnomalyComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../services/anomalymanager.service */ "./src/app/services/anomalymanager.service.ts");
/* harmony import */ var _models_frontend_historyanomalywidget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../models/frontend/historyanomalywidget */ "./src/app/models/frontend/historyanomalywidget.ts");
/* harmony import */ var _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../models/frontend/realtimeanomalywidget */ "./src/app/models/frontend/realtimeanomalywidget.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










/**
 * @author Yasin Kaymak, Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#historyAnomaly} Widget. This type of widget is to display
 * historic values of an entity with anomaly detection. That means it requests data e.g. get data of device x from 02.08.2018 - 03.08.2018
   * from the backend. It uses the {@link HistoryAnomalyWidget} model to represent a widget.
 */
var HistoryAnomalyComponent = /** @class */ (function () {
    function HistoryAnomalyComponent(dataService, databaseService, devicemanager, anomalymanager) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.anomalymanager = anomalymanager;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.devicesList = [];
        this.sensorList = [];
        this.chartType = 'line';
        this.displaySettings = false;
        this.axesOptions = { xLabel: 'time', yLabel: '', xLabelVisible: true, yLabelVisible: true };
        this.duration = 'P5D';
        //spinner
        this.loading = false;
        // protected representations: Array<SelectItem> = [];
        this.dropdownList = [{ deviceEntity: new _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_9__["AnomalyEntity"]("", "", "", "", ""), sensorList: [] }];
    }
    HistoryAnomalyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.devicesList = [];
        this.sensorList = [];
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDeviceDropdown();
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            tooltips: {
                callbacks: {
                    // extra text for items
                    afterLabel: function (tooltipItem, data) { return 'Anomalyscore: ' + (_this.anomalyScores[tooltipItem['index']] * 100).toFixed(2) + '%'; },
                }
            },
            scales: {
                xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        },
                    }],
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        }
                    }]
            },
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_5__["Chart"](this.ctx.nativeElement, {
            type: this.chartType,
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
        if (this.currentWidget.axesOptions !== undefined) {
            this.axesOptions = this.currentWidget.axesOptions;
        }
        this.startTraining = new Date(2019, 0, 1, 10, 55, 22, 0);
        this.selectedStart = new Date(2019, 0, 15, 10, 55, 22, 0);
        this.selectedEnd = new Date(this.generateIsoDateTime(this.selectedStart));
        if (this.currentWidget.startDate !== undefined && this.currentWidget.endDate !== undefined) {
            this.selectedStart = new Date(this.currentWidget.startDate);
            this.selectedEnd = new Date(this.currentWidget.endDate);
            //this.currentWidget.startDate = new Date(2019, 0, 15, 10, 55, 22, 0);
            //this.currentWidget.endDate = new Date(2019, 0, 23, 17, 55, 22, 0);
        }
    };
    // generates a timestamp in ISO standard as defined for the backend
    HistoryAnomalyComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    HistoryAnomalyComponent.prototype.initDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
            if (_this.currentWidget.deviceEntities[0].deviceId !== undefined && _this.currentWidget.deviceEntities[0].deviceId !== '') {
                _this.initSetDevice();
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend. Therefore it describes from the devicemanager service
     */
    HistoryAnomalyComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id).subscribe(function (data) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var device = data_2[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
        }, function (err) {
            console.log(err);
        });
    };
    HistoryAnomalyComponent.prototype.initSetDevice = function () {
        var _this = this;
        this.dropdownList = [];
        // create a list with all init selected devices
        var selectedDevices = [];
        var isIncluded = false;
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var widgetElem = _a[_i];
            // check if device is in list
            for (var _b = 0, selectedDevices_1 = selectedDevices; _b < selectedDevices_1.length; _b++) {
                var selectedElem = selectedDevices_1[_b];
                if (selectedElem === widgetElem.deviceId) {
                    isIncluded = true;
                    break;
                }
            }
            if (!isIncluded) {
                selectedDevices.push(widgetElem.deviceId);
            }
        }
        // fill lists for dropdowns
        var numberOfSavedEntities = this.currentWidget.deviceEntities.length;
        // go over all selected devices
        for (var _c = 0, selectedDevices_2 = selectedDevices; _c < selectedDevices_2.length; _c++) {
            var widgetElem = selectedDevices_2[_c];
            var _loop_1 = function (deviceElem) {
                if (deviceElem.value === widgetElem) {
                    // here we have the right device id
                    // get list of all entities of the device
                    var sensorList_1 = [];
                    this_1.devicemanager.getDeviceById(deviceElem.value, this_1.user.id, this_1.project.id)
                        .subscribe(function (device) {
                        if (device.sensors !== null) {
                            for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                                var sensor = _a[_i];
                                sensorList_1.push({ label: sensor.name, value: sensor.id });
                            }
                        }
                        // looking for the right entitiy id
                        for (var _b = 0, sensorList_2 = sensorList_1; _b < sensorList_2.length; _b++) {
                            var sensorElem = sensorList_2[_b];
                            for (var _c = 0, _d = _this.currentWidget.deviceEntities; _c < _d.length; _c++) {
                                var elem = _d[_c];
                                if (sensorElem.value === elem.entityId) {
                                    // here we have the right entity id
                                    // set selected device, list and sensor in dropdownlist
                                    _this.dropdownList.push({
                                        deviceEntity: { deviceId: deviceElem.value, entityId: sensorElem.value, label: elem.label, unit: elem.unit, axis: 'y' },
                                        sensorList: sensorList_1
                                    });
                                    break;
                                }
                            }
                        }
                        // check dropdownlist for dummydata
                        for (var _e = 0, _f = _this.dropdownList; _e < _f.length; _e++) {
                            var data = _f[_e];
                            if (data['deviceId'] === '') {
                                console.log('Dummy');
                            }
                        }
                        //create and fill chartData from selected sensors if all data is in dropdownList (last finished request)
                        //if (this.dropdownList.length === numberOfSavedEntities) {
                        // this.initRealtimeData(this.myChart);
                        _this.showChart(_this.myChart);
                        //}
                    }, function (error) {
                        console.log('Error requesting devices from backend ', error);
                    });
                }
            };
            var this_1 = this;
            // go over all existing devices
            for (var _d = 0, _e = this.devicesList; _d < _e.length; _d++) {
                var deviceElem = _e[_d];
                _loop_1(deviceElem);
            }
        }
    };
    HistoryAnomalyComponent.prototype.showChart = function (chart) {
        var _this = this;
        // set chart options
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        chart.data.datasets = [];
        chart.data.labels = [];
        var cIndex = 0;
        var _loop_2 = function (selected) {
            var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                data: [],
                borderColor: "grey",
                borderDash: [],
                fill: false,
                // extra backgroundcolor for anomalie
                pointBackgroundColor: [],
            };
            this_2.anomalyScores = [];
            //update date for training start for HTM Network
            this_2.updateTrainingData(this_2.selectedStart);
            this_2.loading = true;
            this_2.anomalymanager.getSensorWithAnomalyScoreDataOverTime(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_2.generateIsoDateTime(this_2.startTraining), this_2.generateIsoDateTime(this_2.selectedStart), this_2.generateIsoDateTime(this_2.selectedEnd), this_2.duration, this_2.user.id, this_2.project.id)
                .subscribe(function (anomalySensorDataModel) {
                _this.loading = false;
                for (var _i = 0, _a = anomalySensorDataModel.Values; _i < _a.length; _i++) {
                    var value = _a[_i];
                    if (value.FloatValue != null) {
                        ctxData.data.push(value.FloatValue);
                        //2 Digits after ,
                        _this.anomalyScores.push(Number((Math.round(value.AnomalyScore * 100) / 100).toFixed(2)));
                        //set color, depending on score
                        if (value.AnomalyScore > 0.89) {
                            ctxData.pointBackgroundColor.push('red');
                        }
                        else if (value.AnomalyScore > 0.80) {
                            ctxData.pointBackgroundColor.push('orange');
                        }
                        else {
                            ctxData.pointBackgroundColor.push('green');
                        }
                    }
                    else if (value.StringValue != null) {
                        ctxData.data.push(Number(value.StringValue));
                    }
                    // one time the label of the data points has to be set.
                    if (cIndex === 0) {
                        // chart.data.labels.push(value.AnomalyScore);
                        chart.data.labels.push(value.DateTime);
                    }
                }
                cIndex++;
                // add sensor data to the chartData.
                chart.data.datasets.push(ctxData);
                if (chart.data.datasets[0]['label'] === '') {
                    chart.data.dataset.shift();
                }
                chart.update();
            }, function (err) {
                _this.loading = false;
                console.log('Error requesting historic data from backend ', err);
            });
        };
        var this_2 = this;
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var selected = _a[_i];
            _loop_2(selected);
        }
    };
    // events
    HistoryAnomalyComponent.prototype.chartClicked = function (e) {
        console.log(e);
    };
    HistoryAnomalyComponent.prototype.chartHovered = function (e) {
        console.log(e);
    };
    // add a new line / dataset to the chart
    HistoryAnomalyComponent.prototype.addDataset = function (chart, dataset) {
        chart.data.datasets.push(dataset);
        if (chart.data.datasets[0]['label'] === '') {
            chart.data.dataset.shift();
        }
        chart.update();
    };
    // removes all datasets which have mor then one data point
    HistoryAnomalyComponent.prototype.removeDatasets = function (chart) {
        chart.data.datasets.forEach(function (dataset) {
            if (dataset.data.lenght > 1) {
                var removalIndex = chart.data.datasets.indexOf(dataset); //Locate index of dataset
                if (removalIndex >= 0) { //make sure this element exists in the array
                    chart.data.datasets.splice(removalIndex, 1);
                }
            }
        });
        // when it was the only data set, remove the labels as well.
        if (chart.data.datasets.length === 0) {
            // for each label, remove one label.
            chart.data.labels.forEach(function (label) {
                chart.data.labels.pop();
            });
        }
        console.log("my Chart Labels: ", chart.data.labels);
        chart.update();
    };
    // updates an attribute of a chart (sub)object.
    HistoryAnomalyComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    HistoryAnomalyComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        //updating data from dropdowns in current Widget
        this.currentWidget.deviceEntities = [];
        console.log("axes: ", this.axesOptions);
        // updating data from dropdowns in current Widget
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.currentWidget.deviceEntities.push(entity.deviceEntity);
        }
        // this.currentWidget.chartType = this.chartType;
        this.currentWidget.axesOptions = this.axesOptions;
        // remove empty placeholder if neccessary
        if (this.currentWidget.deviceEntities[0].deviceId === '') {
            this.currentWidget.deviceEntities.shift();
        }
        this.currentWidget.endDate = this.selectedEnd;
        this.currentWidget.startDate = this.selectedStart;
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.axesOptions, 'axesOptions');
        this.saveInDatabase(this.currentWidget.startDate, 'startDate');
        this.saveInDatabase(this.currentWidget.endDate, 'endDate');
        // get data with new settings
        this.showChart(this.myChart);
    };
    HistoryAnomalyComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.chartType = this.currentWidget.chartType;
        this.selectedEnd = this.currentWidget.endDate;
        this.selectedStart = this.currentWidget.startDate;
        this.axesOptions = this.currentWidget.axesOptions;
        this.dropdownList = [{ deviceEntity: { deviceId: '', entityId: '', label: '', unit: '', axis: '' }, sensorList: [] }];
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.dropdownList.push({ deviceEntity: entity, sensorList: [] });
            this.setSensorDropdown(entity.deviceId);
        }
        this.dropdownList.shift();
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    HistoryAnomalyComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_4__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    HistoryAnomalyComponent.prototype.addNewDropdowns = function () {
        this.dropdownList.push({ deviceEntity: { deviceId: '', entityId: '', label: '', unit: '', axis: '' }, sensorList: [] });
        //this.chartData.push({label: '', data: [], borderColor: '', fill: false});
    };
    HistoryAnomalyComponent.prototype.deleteDropdowns = function (group) {
        var i = 0;
        this.chartData = [{ label: '', data: [], borderColor: '', fill: false }];
        // console.log("Dropdownlist: ", this.dropdownList);
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var elem = _a[_i];
            if (elem.deviceEntity.deviceId === group.deviceId && elem.deviceEntity.entityId === group.entityId) {
                this.dropdownList.splice(i, 1);
                // if the arrays have the same length, the chartData of the entity has to be deleted as well
                if (this.dropdownList.length === (this.chartData.length) - 1) {
                    // this.chartData.splice(i, 1);
                }
                console.log('Dropdownlist after DELETE: ', this.dropdownList);
            }
            i++;
        }
    };
    HistoryAnomalyComponent.prototype.setSensorDropdown = function (deviceId) {
        var _this = this;
        // get list of all entities of the device
        var sensorList = [];
        console.log("dropdown: ", this.dropdownList);
        console.log("chart: ", this.myChart.data.datasets);
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            if (device.sensors !== null) {
                for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                    var sensor = _a[_i];
                    sensorList.push({ label: sensor.name, value: sensor.id });
                }
            }
            // go trhough dropdownlist and set sensorList to device
            for (var _b = 0, _c = _this.dropdownList; _b < _c.length; _b++) {
                var dropdowngroup = _c[_b];
                if (dropdowngroup.deviceEntity.deviceId === deviceId) {
                    dropdowngroup.sensorList = sensorList;
                }
            }
        }, function (error) {
            console.log('Error requesting devices from backend ', error);
        });
    };
    // update Date for training, for backend
    HistoryAnomalyComponent.prototype.updateTrainingData = function (start) {
        // date problem: January, February, April, Day 31 --> specific training date
        if (start.getMonth() === 0 || start.getMonth() === 1 || start.getMonth() === 3 || start.getDate() === 31) {
            if (start.getMonth() === 0) {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(10);
                this.startTraining.setFullYear(start.getFullYear() - 1);
            }
            else if (start.getMonth() === 1) {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(11);
                this.startTraining.setFullYear(start.getFullYear() - 1);
            }
            else if (start.getMonth() === 3 && start.getDate() > 28) {
                this.startTraining.setDate(28);
                this.startTraining.setMonth(1);
                this.startTraining.setFullYear(start.getFullYear());
            }
            else {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(start.getMonth() - 2);
                this.startTraining.setFullYear(start.getFullYear());
            }
        }
        // no date problem just subtrate 2 months and 1 day
        else {
            this.startTraining.setDate(start.getDate() - 1);
            this.startTraining.setMonth(start.getMonth() - 2);
            this.startTraining.setFullYear(start.getFullYear());
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], HistoryAnomalyComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_historyanomalywidget__WEBPACK_IMPORTED_MODULE_8__["HistoryAnomalyWidget"])
    ], HistoryAnomalyComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], HistoryAnomalyComponent.prototype, "resizeFont", void 0);
    HistoryAnomalyComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'history-anomaly',
            template: __webpack_require__(/*! ./history-anomaly.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.html"),
            styles: [__webpack_require__(/*! ./history-anomaly.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"],
            _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_7__["AnomalyManagerService"]])
    ], HistoryAnomalyComponent);
    return HistoryAnomalyComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.css":
/*!******************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.css ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.cut-text {\r\n  text-overflow: ellipsis;\r\n  overflow: hidden;\r\n}\r\n\r\n.center-text {\r\n  text-align: center;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: calc(100% - 55px);\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n.label {\r\n  line-height: 25px;\r\n}\r\n\r\n.grid-elem {\r\n  padding: .2em;\r\n}\r\n\r\n.loading-indicator {\r\n  position: fixed;\r\n  z-index: 999;\r\n  height: 2em;\r\n  width: 2em;\r\n  overflow: show;\r\n  margin: auto;\r\n  top: 0;\r\n  left: 0;\r\n  bottom: 0;\r\n  right: 0;\r\n}\r\n\r\n/* Transparent Overlay */\r\n\r\n.loading-indicator:before {\r\n  content: '';\r\n  display: block;\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: rgba(0,0,0,0.53);\r\n}\r\n\r\n.spinner {\r\n  text-align: center;\r\n  position: absolute;\r\n  top: calc((100% - 55px)/2);\r\n  right: calc(50% - 55px);\r\n}\r\n\r\n.spinner > div {\r\n  width: 8px;\r\n  height: 8px;\r\n  background-color: #333;\r\n\r\n  border-radius: 100%;\r\n  display: inline-block;\r\n  -webkit-animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n  animation: sk-bouncedelay 1.4s infinite ease-in-out both;\r\n}\r\n\r\n.spinner .bounce1 {\r\n  -webkit-animation-delay: -0.32s;\r\n  animation-delay: -0.32s;\r\n}\r\n\r\n.spinner .bounce2 {\r\n  -webkit-animation-delay: -0.16s;\r\n  animation-delay: -0.16s;\r\n}\r\n\r\n@-webkit-keyframes sk-bouncedelay {\r\n  0%, 80%, 100% { -webkit-transform: scale(0) }\r\n  40% { -webkit-transform: scale(1.0) }\r\n}\r\n\r\n@keyframes sk-bouncedelay {\r\n  0%, 80%, 100% {\r\n    -webkit-transform: scale(0);\r\n    transform: scale(0);\r\n  } 40% {\r\n      -webkit-transform: scale(1.0);\r\n      transform: scale(1.0);\r\n    }\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.html":
/*!*******************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.html ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Realtime Anomaly Data Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation settings</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Number of samples:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.selectedNumberOfValues\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">X axes label:</div>\r\n      <div class=\"grid-elem\"><b>{{this.axesOptions.xLabel}}</b></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Y axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.yLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input settings</h3>\r\n    </div>\r\n    <p-accordion [multiple]=\"true\">\r\n      <div *ngFor=\"let group of dropdownList\" class=\"ui-g-12 grid-elem\">\r\n        <p-accordionTab [selected]=\"true\"  style=\"align-items: center; overflow: auto; width: 100%;\">\r\n          <p-header>\r\n            Device:\r\n            <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(group.deviceEntity.deviceId)\"\r\n                        [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.deviceId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            Sensor:\r\n            <p-dropdown appendTo=\"body\" [options]=\"group.sensorList\" [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.entityId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\" (onChange)=\"setLabel(group.deviceEntity.entityId)\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n          </p-header>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.label\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data unit:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.unit\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n        </p-accordionTab>\r\n      </div>\r\n    </p-accordion>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges();\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;isAllowed=false;\"  [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div class=\"ui-g\">\r\n  <div class=\"ui-g-12\">\r\n    <div class=\"ui-g-4 cut-text center-text\" >\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"green\" />\r\n      </svg> normal\r\n    </div>\r\n    <div class=\"ui-g-4 cut-text center-text\">\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"orange\" />\r\n      </svg> at risk\r\n    </div>\r\n    <div class=\"ui-g-4 cut-text center-text\">\r\n      <svg height=\"15\" width=\"15\">\r\n          <circle cx=\"10\" cy=\"10\" r=\"5\" fill=\"red\" />\r\n      </svg> anomaly\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"spinner\" *ngIf=\"loading\">\r\n  <small><strong>NETWORK STARTING   </strong></small>\r\n  <div class=\"bounce1\"></div>\r\n  <div class=\"bounce2\"></div>\r\n  <div class=\"bounce3\"></div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.ts":
/*!*****************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.ts ***!
  \*****************************************************************************************************************/
/*! exports provided: RealtimeAnomalyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RealtimeAnomalyComponent", function() { return RealtimeAnomalyComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../models/frontend/realtimeanomalywidget */ "./src/app/models/frontend/realtimeanomalywidget.ts");
/* harmony import */ var _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../services/anomalymanager.service */ "./src/app/services/anomalymanager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @author Yasin Kaymak, Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#realtimeAnomaly} Widget. This type of widget is to display
 * realtime values of an entity in a chart with anomaly score. That means it requests data e.g. get live data of device x
 * from the backend. It uses the {@link RealTimeAnomalyWidget} model to represent a widget.
 */
var RealtimeAnomalyComponent = /** @class */ (function () {
    function RealtimeAnomalyComponent(dataService, databaseService, devicemanager, anomalymanager, changeDetector) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.anomalymanager = anomalymanager;
        this.changeDetector = changeDetector;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.devicesList = [];
        this.sensorList = [];
        this.duration = 'P5D';
        // spinner
        this.loading = false;
        this.index = 1;
        this.axesOptions = { xLabel: 'time', yLabel: 'y', xLabelVisible: true, yLabelVisible: true };
        this.displaySettings = false;
        this.dropdownList = [{ deviceEntity: { deviceId: '', entityId: '', label: '', unit: '', axis: '' }, sensorList: [] }];
    }
    RealtimeAnomalyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.devicesList = [];
        this.sensorList = [];
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDeviceDropdown();
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            tooltips: {
                callbacks: {
                    //extra text for items
                    afterLabel: function (tooltipItem, data) { return 'Anomalscore: ' + (_this.anomalyScores.get(tooltipItem['index']) * 100).toFixed(2) + '%'; }
                }
            },
            scales: {
                xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        },
                    }],
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        }
                    }]
            },
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_5__["Chart"](this.ctx.nativeElement, {
            type: 'line',
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
        // check if number of values was set before
        if (this.currentWidget.numberOfValues !== undefined) {
            this.selectedNumberOfValues = this.currentWidget.numberOfValues;
        }
        if (this.currentWidget.axesOptions !== undefined) {
            this.axesOptions = this.currentWidget.axesOptions;
        }
        // if new data is available, the chart gets updated
        this.dataService.refreshAnomalyNow
            .subscribe(function (result) {
            var backgroundcolor = 'green';
            if (_this.dropdownList[0].deviceEntity.deviceId !== '' && _this.myChart !== undefined && _this.myChart.data !== undefined && _this.myChart.data.datasets !== undefined
                && _this.myChart.data.datasets[0] !== undefined) {
                // go through all selected (visualized) Devices
                for (var _i = 0, _a = _this.dropdownList; _i < _a.length; _i++) {
                    var selected = _a[_i];
                    if (selected.deviceEntity.deviceId === result.deviceId &&
                        selected.deviceEntity.entityId === result.entityId) {
                        // this.anomalymanager.getSensorWithAnomalyScoreDataSocket(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this.user.id, this.project.id, result.value, result.label)
                        //   .subscribe((anomalyScoreSocket: number) => {
                        // set new values in data
                        if (_this.index == _this.selectedNumberOfValues) {
                            _this.anomalyScores.delete(0);
                            _this.newAnomalyScores = new Map();
                            for (var i = 1; i < _this.selectedNumberOfValues; i++) {
                                _this.newAnomalyScores.set(_this.index - i - 1, _this.anomalyScores.get(_this.index - i));
                            }
                            // this.anomalyScores = new Map<number, number>();
                            _this.anomalyScores = _this.newAnomalyScores;
                            _this.index = _this.index - 1;
                            _this.anomalyScores.set(_this.index, result.anomalyscore);
                            _this.index = _this.index + 1;
                        }
                        else {
                            _this.anomalyScores.set(_this.index, result.anomalyscore);
                            _this.index++;
                        }
                        if (result.anomalyscore > 0.84) {
                            if (result.anomalyscore > 0.89) {
                                backgroundcolor = 'red';
                            }
                            else {
                                backgroundcolor = 'orange';
                            }
                        }
                        _this.addData(_this.myChart, selected.deviceEntity.label + " in " + selected.deviceEntity.unit, result.label, result.value, backgroundcolor);
                        while (_this.myChart.data.datasets[0].data.length > _this.selectedNumberOfValues) {
                            // delete the oldest ones and the labels as well
                            _this.removeData(_this.myChart);
                        }
                    }
                }
            }
        });
    };
    // generates a timestamp in ISO standard as defined for the backend
    RealtimeAnomalyComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    RealtimeAnomalyComponent.prototype.initDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
            if (_this.currentWidget.deviceEntities[0].deviceId !== undefined && _this.currentWidget.deviceEntities[0].deviceId !== '') {
                _this.initSetDevice();
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend. Therefore it describes from the devicemanager service
     */
    RealtimeAnomalyComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (data) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var device = data_2[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
        }, function (err) {
            console.log(err);
        });
    };
    RealtimeAnomalyComponent.prototype.initSetDevice = function () {
        var _this = this;
        this.dropdownList = [];
        // create a list with all init selected devices
        var selectedDevices = [];
        var isIncluded = false;
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var widgetElem = _a[_i];
            // check if device is in list
            for (var _b = 0, selectedDevices_1 = selectedDevices; _b < selectedDevices_1.length; _b++) {
                var selectedElem = selectedDevices_1[_b];
                if (selectedElem === widgetElem.deviceId) {
                    isIncluded = true;
                    break;
                }
            }
            if (!isIncluded) {
                selectedDevices.push(widgetElem.deviceId);
            }
        }
        // fill lists for dropdowns
        var numberOfSavedEntities = this.currentWidget.deviceEntities.length;
        // go over all selected devices
        for (var _c = 0, selectedDevices_2 = selectedDevices; _c < selectedDevices_2.length; _c++) {
            var widgetElem = selectedDevices_2[_c];
            var _loop_1 = function (deviceElem) {
                if (deviceElem.value === widgetElem) {
                    // here we have the right device id
                    // get list of all entities of the device
                    var sensorList_1 = [];
                    this_1.devicemanager.getDeviceById(deviceElem.value, this_1.user.id, this_1.project.id)
                        .subscribe(function (device) {
                        if (device.sensors !== null) {
                            for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                                var sensor = _a[_i];
                                sensorList_1.push({ label: sensor.name, value: sensor.id });
                            }
                        }
                        // if (device.actions !== null) {
                        //   for (const action of device.actions) {
                        //     sensorList.push({label: action.name, value: action.id});
                        //   }
                        // }
                        // looking for the right entitiy id
                        for (var _b = 0, sensorList_2 = sensorList_1; _b < sensorList_2.length; _b++) {
                            var sensorElem = sensorList_2[_b];
                            for (var _c = 0, _d = _this.currentWidget.deviceEntities; _c < _d.length; _c++) {
                                var elem = _d[_c];
                                if (sensorElem.value === elem.entityId) {
                                    // here we have the right entity id
                                    // set selected device, list and sensor in dropdownlist
                                    _this.dropdownList.push({
                                        deviceEntity: { deviceId: deviceElem.value, entityId: sensorElem.value, label: elem.label, unit: elem.unit, axis: 'y' },
                                        sensorList: sensorList_1
                                    });
                                    break;
                                }
                            }
                        }
                        // check dropdownlist for dummydata
                        for (var _e = 0, _f = _this.dropdownList; _e < _f.length; _e++) {
                            var data = _f[_e];
                            if (data['deviceId'] === '') {
                                console.log('Dummy');
                            }
                        }
                        //create and fill chartData from selected sensors if all data is in dropdownList (last finished request)
                        //if (this.dropdownList.length === numberOfSavedEntities) {
                        _this.initRealtimeData(_this.myChart);
                        //}
                    }, function (error) {
                        console.log('Error requesting devices from backend ', error);
                    });
                }
            };
            var this_1 = this;
            // go over all existing devices
            for (var _d = 0, _e = this.devicesList; _d < _e.length; _d++) {
                var deviceElem = _e[_d];
                _loop_1(deviceElem);
            }
        }
        // set chart data for devices
        // setTimeout(this.initRealtimeData 3000);
    };
    /**
     * This method pulls the realtime data from the backend once to get the first values for the chart
     * when widget is starting or input parameter are changing
     */
    RealtimeAnomalyComponent.prototype.initRealtimeData = function (chart) {
        var _this = this;
        // set chart options
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        var cIndex = 0;
        this.nowDate = new Date();
        this.startTraining = new Date();
        this.updateTrainingData(this.nowDate);
        var _loop_2 = function (selected) {
            // set saved sensor settings
            var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                data: [],
                borderColor: 'grey',
                borderDash: [],
                fill: false,
                pointBackgroundColor: [] };
            this_2.loading = true;
            this_2.changeDetector.detectChanges();
            // this.anomalymanager.startAnomalyNetworkRealtime(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this.user.id, this.project.id)
            //   .subscribe(() => {
            // get newest data value from the sensor
            this_2.anomalymanager.startAnomalyNetworkRealtime(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_2.user.id, this_2.project.id, this_2.generateIsoDateTime(this_2.startTraining), this_2.generateIsoDateTime(this_2.nowDate), this_2.duration)
                .subscribe(function () {
                _this.loading = false;
                _this.changeDetector.detectChanges();
                _this.anomalymanager.getSensorWithAnomalyScoreDataNow(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, _this.user.id, _this.project.id)
                    .subscribe(function (anomalySensorDataModel) {
                    var value = anomalySensorDataModel.Values[0];
                    // fill sensor data field with one value
                    if (value.FloatValue != null) {
                        ctxData.data.push(value.FloatValue);
                        if (value.AnomalyScore > 0.84) {
                            if (value.AnomalyScore > 0.89) {
                                ctxData.pointBackgroundColor.push('red');
                            }
                            else {
                                ctxData.pointBackgroundColor.push('orange');
                            }
                        }
                        else {
                            ctxData.pointBackgroundColor.push('green');
                        }
                        // if(value.FloatValue > 5){
                        //   ctxData.pointBackgroundColor.push('red');
                        // }
                        // else{
                        //   ctxData.pointBackgroundColor.push('green');
                        // }
                    }
                    else if (value.StringValue != null) {
                        ctxData.data.push(Number(value.StringValue));
                    }
                    // one time the label of the data points has to be set.
                    if (cIndex === 0) {
                        chart.data.labels.push(value.DateTime);
                        cIndex++;
                    }
                    // add sensor data to the chartData.
                    // this.anomalyScore = value.AnomalyScore;
                    _this.anomalyScores = new Map();
                    _this.anomalyScores.set(0, value.AnomalyScore);
                    chart.data.datasets.push(ctxData);
                    if (chart.data.datasets[0]['label'] === '') {
                        chart.data.dataset.shift();
                    }
                    chart.update();
                }, function (err) {
                    _this.loading = false;
                    console.log('Error requesting data from backend: ', err);
                });
            });
        };
        var this_2 = this;
        // go through all selected sensors
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var selected = _a[_i];
            _loop_2(selected);
        }
    };
    RealtimeAnomalyComponent.prototype.updateRealtimeData = function (chart) {
        var _this = this;
        console.log("options: ", chart.options);
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        var cIndex = 0;
        this.nowDate = new Date();
        this.startTraining = new Date();
        this.updateTrainingData(this.nowDate);
        var _loop_3 = function (selected) {
            // set saved sensor settings
            var isAvailable = false;
            var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                data: [],
                borderColor: '',
                borderDash: [],
                fill: false,
                pointBackgroundColor: [] };
            for (var _i = 0, _a = chart.data.datasets; _i < _a.length; _i++) {
                var dataset = _a[_i];
                // check if dataset is in datasets
                if (dataset.label === ctxData.label) {
                    isAvailable = true;
                    // empty dataset until only one value is left.
                    while (dataset.data.length > 1) {
                        dataset.data.shift();
                    }
                    // empty labels as well.
                    while (chart.data.labels.length > 1) {
                        chart.data.labels.shift();
                    }
                    // updating other attributes
                    // dataset.borderColor = selected.deviceEntity.lineColor;
                    dataset.borderDash = [];
                    break;
                }
            }
            if (!isAvailable) {
                // get newest data value from the sensor.
                this_3.loading = true;
                this_3.anomalymanager.startAnomalyNetworkRealtime(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_3.user.id, this_3.project.id, this_3.generateIsoDateTime(this_3.startTraining), this_3.generateIsoDateTime(this_3.nowDate), this_3.duration)
                    .subscribe(function () {
                    _this.loading = false;
                    _this.anomalymanager.getSensorWithAnomalyScoreDataNow(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, _this.user.id, _this.project.id)
                        .subscribe(function (anomalySensorDataModel) {
                        var value = anomalySensorDataModel.Values[0];
                        // fill sensor data field with one value
                        if (value.FloatValue != null) {
                            ctxData.data.push(value.FloatValue);
                            if (value.AnomalyScore > 0.84) {
                                if (value.AnomalyScore > 0.89) {
                                    ctxData.pointBackgroundColor.push('red');
                                }
                                else {
                                    ctxData.pointBackgroundColor.push('orange');
                                }
                            }
                            else {
                                ctxData.pointBackgroundColor.push('green');
                            }
                        }
                        else if (value.StringValue != null) {
                            ctxData.data.push(Number(value.StringValue));
                        }
                        // one time the label of the data points has to be set if there is no label available
                        if (cIndex === 0 && chart.data.labels.length === 0) {
                            chart.data.labels.push(value.DateTime);
                            cIndex++;
                        }
                        _this.anomalyScores = new Map();
                        _this.anomalyScores.set(0, value.AnomalyScore);
                        chart.data.datasets.push(ctxData);
                        if (chart.data.datasets[0]['label'] === '') {
                            chart.data.dataset.shift();
                        }
                        chart.update();
                        // this.addDataset(chart, ctxData);
                    }, function (err) {
                        console.log('Error requesting data from backend: ', err);
                    });
                });
            }
            // remove remaining datasets.
            this_3.removeDatasets(chart);
        };
        var this_3 = this;
        // go through all selected sensors
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var selected = _a[_i];
            _loop_3(selected);
        }
        // remove all datasets which where deleted
    };
    // events
    RealtimeAnomalyComponent.prototype.chartClicked = function (e) {
        // console.log(e);
    };
    RealtimeAnomalyComponent.prototype.chartHovered = function (e) {
        // console.log(e);
    };
    // add one Data value to each dataset of the chart as well as the label
    RealtimeAnomalyComponent.prototype.addData = function (chart, entityLabel, label, data, backgroundcolor) {
        chart.data.labels.push(label);
        chart.data.datasets.forEach(function (dataset) {
            if (entityLabel === dataset.label) {
                console.log("It is the entity label!");
                dataset.data.push(data);
                dataset.pointBackgroundColor.push(backgroundcolor);
            }
            else {
                // fill the other datasets with the latest data value
                var elem = dataset.data.pop();
                dataset.data.push(elem);
                dataset.data.push(elem);
            }
        });
        chart.update();
    };
    // add a new line / dataset to the chart
    RealtimeAnomalyComponent.prototype.addDataset = function (chart, dataset) {
        chart.data.datasets.push(dataset);
        if (chart.data.datasets[0]['label'] === '') {
            chart.data.dataset.shift();
        }
        chart.update();
    };
    // removes the oldest data value of all datasets in the chart
    RealtimeAnomalyComponent.prototype.removeData = function (chart) {
        chart.data.labels.shift();
        chart.data.datasets.forEach(function (dataset) {
            dataset.pointBackgroundColor.shift();
            dataset.data.shift();
        });
        chart.update();
    };
    // removes all datasets which have mor then one data point
    RealtimeAnomalyComponent.prototype.removeDatasets = function (chart) {
        chart.data.datasets.forEach(function (dataset) {
            if (dataset.data.lenght > 1) {
                var removalIndex = chart.data.datasets.indexOf(dataset); //Locate index of dataset
                if (removalIndex >= 0) { //make sure this element exists in the array
                    chart.data.datasets.splice(removalIndex, 1);
                }
            }
        });
        // when it was the only data set, remove the labels as well.
        if (chart.data.datasets.length === 0) {
            // for each label, remove one label.
            chart.data.labels.forEach(function (label) {
                chart.data.labels.pop();
            });
        }
        chart.update();
    };
    // updates an attribute of a chart (sub)object.
    RealtimeAnomalyComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    RealtimeAnomalyComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.deviceEntities = [];
        // updating data from dropdowns in current Widget
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.currentWidget.deviceEntities.push(entity.deviceEntity);
        }
        // this.currentWidget.chartType = this.chartType;
        this.currentWidget.numberOfValues = this.selectedNumberOfValues;
        this.currentWidget.axesOptions = this.axesOptions;
        // remove empty placeholder if neccessary
        if (this.currentWidget.deviceEntities[0].deviceId === '') {
            this.currentWidget.deviceEntities.shift();
        }
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        // this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.numberOfValues, 'numberOfValues');
        this.saveInDatabase(this.currentWidget.axesOptions, 'axesOptions');
        console.log('deviceEntities after APPLY: ', this.currentWidget.deviceEntities);
        // get realtime data with new settings
        this.updateRealtimeData(this.myChart);
    };
    RealtimeAnomalyComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.chartType = this.currentWidget.chartType;
        this.selectedNumberOfValues = this.currentWidget.numberOfValues;
        this.axesOptions = this.currentWidget.axesOptions;
        this.dropdownList = [{ deviceEntity: { deviceId: '', entityId: '', label: '', unit: '', axis: '' }, sensorList: [] }];
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.dropdownList.push({ deviceEntity: entity, sensorList: [] });
            this.setSensorDropdown(entity.deviceId);
        }
        this.dropdownList.shift();
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    RealtimeAnomalyComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    RealtimeAnomalyComponent.prototype.addNewDropdowns = function () {
        this.dropdownList.push({ deviceEntity: { deviceId: '', entityId: '', label: '', unit: '', axis: '' }, sensorList: [] });
        //this.chartData.push({label: '', data: [], borderColor: '', fill: false});
    };
    RealtimeAnomalyComponent.prototype.deleteDropdowns = function (group) {
        var i = 0;
        this.chartData = [{ label: '', data: [], borderColor: '', fill: false }];
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var elem = _a[_i];
            if (elem.deviceEntity.deviceId === group.deviceId && elem.deviceEntity.entityId === group.entityId) {
                this.dropdownList.splice(i, 1);
                // if the arrays have the same length, the chartData of the entity has to be deleted as well
                if (this.dropdownList.length === (this.chartData.length) - 1) {
                    // this.chartData.splice(i, 1);
                }
                console.log('Dropdownlist after DELETE: ', this.dropdownList);
            }
            i++;
        }
    };
    RealtimeAnomalyComponent.prototype.setSensorDropdown = function (deviceId) {
        var _this = this;
        // get list of all entities of the device
        var sensorList = [];
        console.log("dropdown: ", this.dropdownList);
        console.log("chart: ", this.myChart.data.datasets);
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            if (device.sensors !== null) {
                for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                    var sensor = _a[_i];
                    sensorList.push({ label: sensor.name, value: sensor.id });
                }
            }
            if (device.actions !== null) {
                for (var _b = 0, _c = device.actions; _b < _c.length; _b++) {
                    var action = _c[_b];
                    sensorList.push({ label: action.name, value: action.id });
                }
            }
            // go trhough dropdownlist and set sensorList to device
            for (var _d = 0, _e = _this.dropdownList; _d < _e.length; _d++) {
                var dropdowngroup = _e[_d];
                if (dropdowngroup.deviceEntity.deviceId === deviceId) {
                    dropdowngroup.sensorList = sensorList;
                }
            }
        }, function (error) {
            console.log('Error requesting devices from backend ', error);
        });
    };
    RealtimeAnomalyComponent.prototype.setLabel = function (deviceID) {
        this.dropdownList[0].deviceEntity.label = deviceID;
    };
    // calcualte Date for training, for backend
    RealtimeAnomalyComponent.prototype.updateTrainingData = function (start) {
        // date problem: January, February, April, Day 31 --> specific training date
        if (start.getMonth() === 0 || start.getMonth() === 1 || start.getMonth() === 3 || start.getDate() === 31) {
            if (start.getMonth() === 0) {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(10);
                this.startTraining.setFullYear(start.getFullYear() - 1);
            }
            else if (start.getMonth() === 1) {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(11);
                this.startTraining.setFullYear(start.getFullYear() - 1);
            }
            else if (start.getMonth() === 3 && start.getDate() > 28) {
                this.startTraining.setDate(28);
                this.startTraining.setMonth(1);
                this.startTraining.setFullYear(start.getFullYear());
            }
            else {
                this.startTraining.setDate(start.getDate() - 1);
                this.startTraining.setMonth(start.getMonth() - 2);
                this.startTraining.setFullYear(start.getFullYear());
            }
        }
        // no date problem just subtrate 2 months and 1 day
        else {
            this.startTraining.setDate(start.getDate() - 1);
            this.startTraining.setMonth(start.getMonth() - 2);
            this.startTraining.setFullYear(start.getFullYear());
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_realtimeanomalywidget__WEBPACK_IMPORTED_MODULE_7__["RealtimeAnomalyWidget"])
    ], RealtimeAnomalyComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], RealtimeAnomalyComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], RealtimeAnomalyComponent.prototype, "resizeFont", void 0);
    RealtimeAnomalyComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'realtime-anomaly',
            template: __webpack_require__(/*! ./realtime-anomaly.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.html"),
            styles: [__webpack_require__(/*! ./realtime-anomaly.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_3__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"],
            _services_anomalymanager_service__WEBPACK_IMPORTED_MODULE_8__["AnomalyManagerService"],
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]])
    ], RealtimeAnomalyComponent);
    return RealtimeAnomalyComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.css":
/*!*********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.css ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".input-slider {\r\n  width: 4vw;\r\n}\r\n.unknown {\r\n  font-style:italic;\r\n}\r\n::ng-deep .ui-slider {\r\n  margin: 0 auto;\r\n}\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n.testclass {\r\n  width:95%; float:right;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Device Control Settings\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Device Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Device:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"devicesList\" [filter]=\"true\" [placeholder]=\"'Select a device.'\"\r\n                  [(ngModel)]=\"selectedDevice\"\r\n                  (onChange)=\"updateActionDropdown()\" [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Action:</div>\r\n      <p-dropdown [autoWidth]=\"true\"\r\n                  [options]=\"actionList\" [placeholder]=\"'Select an action.'\" [(ngModel)]=\"selectedAction\"\r\n                  (onChange)=\"configureSliderProperties()\" [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" *ngIf=\"currentWidget.type === widgetType.sliderDeviceControl\">\r\n      <h3>Slider Specifications</h3>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Position:</div>\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\">\r\n          <p-radioButton name=\"positionGroup\" value=\"right\" label=\"right\"\r\n                         [(ngModel)]=\"selectedPosition\"></p-radioButton>\r\n        </div>\r\n        <div class=\"ui-g-12\">\r\n          <p-radioButton name=\"positionGroup\" value=\"bottom\" label=\"bottom\"\r\n                         [(ngModel)]=\"selectedPosition\"></p-radioButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <h3>Icon Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <p-selectButton [options]=\"icons\" [(ngModel)]=\"selectedIcon\"></p-selectButton>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"'button\" pButton icon=\"fa-check\" (click)=\"applySettings()\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\"\r\n        class=\"gridster-item-content settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n\r\n<div *ngIf=\"currentWidget.controlPosition === 'right'\"\r\n     style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n  <div>\r\n    <i [class]=\"currentWidget.icon\"></i>\r\n  </div>\r\n  <div style=\"padding-left: 15px;\">\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\"\r\n           (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width: 100%;\">{{ currentWidget.name }}</h2>\r\n\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\"\r\n           [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <div *ngIf=\"!currentWidget.isDeveloped\"\r\n         style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding-left: 15px; width:100%\">\r\n    <div style=\"padding-top: 15px;\">\r\n      <p-slider class=\"gridster-item-content\" [(ngModel)]=\"currentWidget.value\" [min]=\"currentWidget.minValue\"\r\n                [max]=\"currentWidget.maxValue\"\r\n                [animate]=\"true\"\r\n                (onChange)=\"changeSliderValue(currentWidget.value)\"\r\n                [style]=\"[{'float':'right'},{'width': '90%'}]\"></p-slider>\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:100%; margin: 0 auto;\">\r\n      <div class=\"ui-g-4\" *ngIf=\"!currentWidget.isDeveloped\" style=\"text-align: left; padding: 0 !important;\">\r\n        {{ currentWidget.minValue }}\r\n      </div>\r\n      <div class=\"ui-g-4\" *ngIf=\"currentWidget.isDeveloped\">\r\n        <input class=\"gridster-item-content\" type=\"number\" pInputText\r\n               style=\"text-align: left; padding: 0 !important; width:100%;\"\r\n               [(ngModel)]=\"currentWidget.minValue\" [max]=\"currentWidget.maxValue\"\r\n               (ngModelChange)=\"saveInDatabase($event, 'minValue')\">\r\n      </div>\r\n      <div class=\"ui-g-4\" style=\"text-align: center; padding: 0 !important;\">{{ currentWidget.value }}</div>\r\n      <div class=\"ui-g-4\" *ngIf=\"!currentWidget.isDeveloped\" style=\"text-align: right; padding: 0 !important;\">\r\n        {{currentWidget.maxValue }}\r\n      </div>\r\n      <div class=\"ui-g-4\" *ngIf=\"currentWidget.isDeveloped\">\r\n        <input class=\"gridster-item-content\" type=\"number\" pInputText\r\n               style=\"text-align: right; padding: 0 !important; width:100%;\"\r\n               [(ngModel)]=\"currentWidget.maxValue\" [min]=\"currentWidget.minValue\"\r\n               (ngModelChange)=\"saveInDatabase($event, 'maxValue')\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n<div *ngIf=\"currentWidget.controlPosition === 'bottom'\">\r\n  <div style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n      <i [class]=\"selectedIcon\"></i>\r\n    </div>\r\n    <div style=\"padding-left: 15px;\">\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\"\r\n             (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width:100%;\">{{ currentWidget.name }}</h2>\r\n\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\"\r\n             [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <div *ngIf=\"!currentWidget.isDeveloped\"\r\n           style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div style=\"display: flex; flex-direction: column; align-items: center; padding-top:15px;\">\r\n    <div style=\"width: 100%\">\r\n      <p-slider class=\"gridster-item-content\" [(ngModel)]=\"currentWidget.value\" [min]=\"currentWidget.minValue\"\r\n                [max]=\"currentWidget.maxValue\"\r\n                (onChange)=\"changeSliderValue(currentWidget.value)\"\r\n                [style]=\"[{'float':'right'},{'width': '90%'}]\"></p-slider>\r\n    </div>\r\n    <!-- Slider for Slider-Widgets-->\r\n    <div class=\"ui-g-12\" style=\"width:100%; margin: 0 auto;\">\r\n      <div class=\"ui-g-4\" *ngIf=\"!currentWidget.isDeveloped\" style=\"text-align: left; padding: 0 !important;\">\r\n        {{currentWidget.minValue }}\r\n      </div>\r\n      <div class=\"ui-g-4\" *ngIf=\"currentWidget.isDeveloped\">\r\n        <input class=\"gridster-item-content\" type=\"number\" pInputText\r\n               style=\"text-align: left; padding: 0 !important; width:100%;\"\r\n               [(ngModel)]=\"currentWidget.minValue\" [max]=\"currentWidget.maxValue\"\r\n               (ngModelChange)=\"saveInDatabase($event, 'minValue')\">\r\n      </div>\r\n      <div class=\"ui-g-4\" style=\"text-align: center; padding: 0 !important;\">{{ currentWidget.value }}</div>\r\n      <div class=\"ui-g-4\" *ngIf=\"!currentWidget.isDeveloped\" style=\"text-align: right; padding: 0 !important;\">\r\n        {{currentWidget.maxValue }}\r\n      </div>\r\n      <div class=\"ui-g-4\" *ngIf=\"currentWidget.isDeveloped\">\r\n        <input class=\"gridster-item-content\" type=\"number\" pInputText\r\n               style=\"text-align: right; padding: 0 !important; width:100%;\"\r\n               [(ngModel)]=\"currentWidget.maxValue\" [min]=\"currentWidget.minValue\"\r\n               (ngModelChange)=\"saveInDatabase($event, 'maxValue')\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.ts ***!
  \********************************************************************************************************************/
/*! exports provided: SliderControlDeviceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SliderControlDeviceComponent", function() { return SliderControlDeviceComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _models_frontend_sliderwidget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../models/frontend/sliderwidget */ "./src/app/models/frontend/sliderwidget.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};








/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#sliderDeviceControl} Widget. This type of widget is to control
 * an entity (action) of a device. That means it sends commands e.g. toggle a switch
 * to the backend. It uses the {@link SliderWidget} model to represent a widget.
 */
var SliderControlDeviceComponent = /** @class */ (function () {
    function SliderControlDeviceComponent(dataService, databaseService, devicemanager, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.router = router;
        this.devicesList = [];
        this.actionList = [];
        this.displaySettings = false;
        this.icons = [];
        this.widgetType = _models_frontend_widget__WEBPACK_IMPORTED_MODULE_4__["WidgetType"];
    }
    SliderControlDeviceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData.subscribe(function (value) { return _this.project = value; });
        this.dataService.userData.subscribe(function (value) { return _this.user = value; });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDropdowns();
        this.icons = [
            { value: 'fa fa-power-off fa-2x', icon: 'fa fa-power-off' },
            { value: 'fa fa-thermometer-full fa-2x', icon: 'fa fa-thermometer-full' },
            { value: 'fa fa-volume-down fa-2x', icon: 'fa fa-volume-down' },
            { value: 'fa fa-play-circle-o fa-2x', icon: 'fa fa-play-circle-o' },
            { value: 'fa fa-lightbulb-o fa-2x', icon: 'fa fa-lightbulb-o' },
            { value: 'fa fa-sun-o fa-2x', icon: 'fa fa-sun-o' }
        ];
        // set current selected Icon based on Icon in Database
        for (var _i = 0, _a = this.icons; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.value === this.currentWidget.icon) {
                this.selectedIcon = item.value;
            }
        }
        // set current selected Position based on Position in Database
        this.selectedPosition = this.currentWidget.controlPosition;
        // if new data is available, the slider state gets updated
        this.dataService.refreshChartNow
            .subscribe(function (result) {
            "hello";
            if (result !== undefined && _this.selectedDevice === result.deviceId &&
                _this.selectedAction === result.entityId) {
                //set action
                _this.currentWidget.value = result.value;
            }
        });
    };
    SliderControlDeviceComponent.prototype.initDropdowns = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id).subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have slideable actions
                        if (action.valueable === true) {
                            _this.devicesList.push({ label: device.name, value: device.deviceId });
                            break;
                        }
                    }
                }
            }
            if (_this.currentWidget.deviceId != undefined) {
                // set init device
                for (var _c = 0, _d = _this.devicesList; _c < _d.length; _c++) {
                    var listElem = _d[_c];
                    if (listElem.value === _this.currentWidget.deviceId) {
                        _this.selectedDevice = listElem.value;
                        // check if action is selected
                        _this.devicemanager.getDeviceById(_this.selectedDevice.toString(), _this.user.id, _this.project.id)
                            .subscribe(function (device) {
                            _this.actionList = [];
                            if (device.actions !== null) {
                                for (var _i = 0, _a = device.actions; _i < _a.length; _i++) {
                                    var action = _a[_i];
                                    _this.actionList.push({ label: action.name, value: action.id });
                                }
                            }
                            //set init action
                            for (var _b = 0, _c = _this.actionList; _b < _c.length; _b++) {
                                var listElem_1 = _c[_b];
                                if (listElem_1.value === _this.currentWidget.entityId) {
                                    _this.selectedAction = listElem_1.value;
                                    _this.initializeValue();
                                }
                            }
                        }, function (error) {
                            console.log('Error requesting devices from backend ', error);
                        });
                    }
                }
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend.
     */
    SliderControlDeviceComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have slideable actions
                        if (_this.currentWidget.type === _models_frontend_widget__WEBPACK_IMPORTED_MODULE_4__["WidgetType"].sliderDeviceControl && action.valueable === true) {
                            _this.devicesList.push({ label: device.name, value: device.deviceId });
                            break;
                        }
                    }
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting devices from backend ', err);
        });
        this.devicesList.sort(function (a, b) { return a.label.localeCompare(b.label); });
    };
    /**
     * Updates the actions which you can choose in the action dropdown, so that you can only select capable
     * actions.
     */
    SliderControlDeviceComponent.prototype.updateActionDropdown = function () {
        var _this = this;
        this.currentWidget.entityId = undefined;
        this.selectedAction = "";
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var actions = device.actions;
            _this.actionList = [];
            for (var i = 0; i < actions.length; i++) {
                if (actions[i].valueable === true) {
                    _this.actionList.push({ label: actions[i].name, value: actions[i].id });
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device actions could not be pulled  from the backend ', err);
        });
    };
    /**
     * This method configure the displayed slider by mapping the requested data from backend to the
     * specific options.
     */
    SliderControlDeviceComponent.prototype.configureSliderProperties = function () {
        var _this = this;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var action = device.actions.find(function (x) { return x.id === _this.selectedAction; });
            if (action.valueOption.percentage === true) {
                _this.currentWidget.minValue = 0;
                _this.currentWidget.maxValue = 100;
            }
            else {
                _this.currentWidget.minValue = action.valueOption.minimum;
                _this.currentWidget.maxValue = action.valueOption.maximum;
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device could not be pulled  from the backend ', err);
        });
    };
    /**
     * This method sends a command (value) to the backend.
     * @param widgetValue the command setted through the widget surface
     */
    SliderControlDeviceComponent.prototype.changeSliderValue = function (widgetValue) {
        var _this = this;
        this.devicemanager.getDeviceById(this.currentWidget.deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            var action = device.actions.find(function (x) { return x.id === _this.currentWidget.entityId; });
            if (widgetValue < _this.currentWidget.minValue || widgetValue > _this.currentWidget.maxValue) {
                console.log('Error setting slider value: Value is not evaluable');
            }
            else {
                _this.devicemanager.ChangeActionState(_this.user.id, _this.project.id, device.deviceId, action.id, widgetValue)
                    .subscribe(function (result) {
                    // log result.message
                    console.log('new value was sent to backend server');
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('new value could not been sent to backend server', err);
                });
            }
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device could not be pulled from backend', error);
        });
    };
    /**
     * This method gets called when the user presses the apply button in the
     * widget properties. It saves the properties in the database and disables the popup.
     * It call the value initialization.
     */
    SliderControlDeviceComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.deviceId = this.selectedDevice;
        this.currentWidget.entityId = this.selectedAction;
        this.currentWidget.controlPosition = this.selectedPosition;
        this.currentWidget.icon = this.selectedIcon;
        this.saveInDatabase(this.currentWidget.deviceId, 'deviceId');
        this.saveInDatabase(this.currentWidget.entityId, 'entityId');
        this.saveInDatabase(this.currentWidget.icon, 'icon');
        this.saveInDatabase(this.currentWidget.fontSize, 'fontSize');
        this.saveInDatabase(this.currentWidget.minValue, 'minValue');
        this.saveInDatabase(this.currentWidget.maxValue, 'maxValue');
        this.saveInDatabase(this.currentWidget.controlPosition, 'controlPosition');
        this.initializeValue();
    };
    // reset all changes made in the settings dialog
    SliderControlDeviceComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedIcon = this.currentWidget.icon;
        this.selectedDevice = this.currentWidget.deviceId;
        this.selectedAction = this.currentWidget.entityId;
    };
    /**
     * This method initializes the value for a widget to display by requesting it from the backend once.
     */
    SliderControlDeviceComponent.prototype.initializeValue = function () {
        var _this = this;
        this.devicemanager.GetActionValueOrState(this.currentWidget.entityId, this.currentWidget.deviceId, this.user.id, this.project.id)
            .subscribe(function (result) {
            _this.currentWidget.value = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting action state or value', err);
        });
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    SliderControlDeviceComponent.prototype.saveInDatabase = function (value, field) {
        var _this = this;
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database entry ', error);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_sliderwidget__WEBPACK_IMPORTED_MODULE_5__["SliderWidget"])
    ], SliderControlDeviceComponent.prototype, "currentWidget", void 0);
    SliderControlDeviceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'slider-control-device',
            template: __webpack_require__(/*! ./slider-control-device.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.html"),
            styles: [__webpack_require__(/*! ./slider-control-device.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"], _services_database_service__WEBPACK_IMPORTED_MODULE_7__["DatabaseService"], _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], SliderControlDeviceComponent);
    return SliderControlDeviceComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.css":
/*!*******************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.css ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".input-slider {\r\n  width: 4vw;\r\n}\r\n.unknown {\r\n  font-style:italic;\r\n}\r\n::ng-deep .ui-slider {\r\n  margin: 0 auto;\r\n}\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n.testclass {\r\n  width:95%; float:right;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.html":
/*!********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.html ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Device Control Settings\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Device Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Device:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"devicesList\" [filter]=\"true\" [placeholder]=\"'Select a device.'\"\r\n                  [(ngModel)]=\"selectedDevice\"\r\n                  (onChange)=\"updateActionDropdown()\" [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Action:</div>\r\n      <p-dropdown [autoWidth]=\"true\"\r\n                  [options]=\"actionList\" [placeholder]=\"'Select an action.'\" [(ngModel)]=\"selectedAction\"\r\n                  [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" >\r\n      <h3>Slider Specifications</h3>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Position:</div>\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\"><p-radioButton  name=\"positionGroup\" value=\"right\" label=\"right\" [(ngModel)]=\"selectedPosition\"></p-radioButton></div>\r\n        <div class=\"ui-g-12\"><p-radioButton name=\"positionGroup\" value=\"bottom\" label=\"bottom\" [(ngModel)]=\"selectedPosition\"></p-radioButton></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <h3>Icon Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <p-selectButton [options]=\"icons\" [(ngModel)]=\"selectedIcon\"></p-selectButton>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"'button\" pButton icon=\"fa-check\" (click)=\"applySettings()\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n\r\n<div *ngIf=\"currentWidget.controlPosition === 'right'\"\r\n     style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n    <i [class]=\"currentWidget.icon\"></i>\r\n  </div>\r\n  <div style=\"padding-left: 15px; min-width:100px;\">\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\" (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width: 100%;\">{{ currentWidget.name }}</h2>\r\n\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding-left: 15px; width:100%\">\r\n      <div style=\"padding-top: 15px; min-width: 150px; width: 100%;\">\r\n        <p-dropdown\r\n          [options]=\"stateActionList\" class=\"gridster-item-content\" [(ngModel)]=\"currentWidget.value\" (onChange)=\"sendCommand(currentWidget.value)\"\r\n          [style]=\"{'width':'100%'}\">\r\n        </p-dropdown>\r\n      </div>\r\n  </div>\r\n</div>\r\n<div *ngIf=\"currentWidget.controlPosition === 'bottom'\">\r\n  <div style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n      <i [class]=\"currentWidget.icon\"></i>\r\n    </div>\r\n    <div style=\"padding-left: 15px;\">\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\" (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width:100%;\">{{ currentWidget.name }}</h2>\r\n\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div style=\"display: flex; flex-direction: column; align-items: center; padding-top:15px;\">\r\n      <div style=\"width: 100%\">\r\n        <p-dropdown\r\n          [options]=\"stateActionList\" class=\"gridster-item-content\" [(ngModel)]=\"currentWidget.value\" (onChange)=\"sendCommand(currentWidget.value)\"\r\n          [style]=\"{'width':'100%'}\">\r\n        </p-dropdown>\r\n      </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.ts":
/*!******************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.ts ***!
  \******************************************************************************************************************/
/*! exports provided: StateControlDeviceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StateControlDeviceComponent", function() { return StateControlDeviceComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _models_frontend_statewidget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../models/frontend/statewidget */ "./src/app/models/frontend/statewidget.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#stateDeviceControl} Widget. This type of widget is to control
 * an entity (action) of a device. That means it sends commands e.g. set color of light bulb to green
 * to the backend. It uses the {@link StateWidget} model to represent a widget.
 */
var StateControlDeviceComponent = /** @class */ (function () {
    function StateControlDeviceComponent(dataService, databaseService, devicemanager, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.router = router;
        this.devicesList = [];
        this.actionList = [];
        this.stateActionList = [];
        this.displaySettings = false;
        this.icons = [];
    }
    StateControlDeviceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData.subscribe(function (value) { return _this.project = value; });
        this.dataService.userData.subscribe(function (value) { return _this.user = value; });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDropdowns();
        this.icons = [
            { value: 'fa fa-power-off fa-2x', icon: 'fa fa-power-off' },
            { value: 'fa fa-thermometer-full fa-2x', icon: 'fa fa-thermometer-full' },
            { value: 'fa fa-volume-down fa-2x', icon: 'fa fa-volume-down' },
            { value: 'fa fa-play-circle-o fa-2x', icon: 'fa fa-play-circle-o' },
            { value: 'fa fa-lightbulb-o fa-2x', icon: 'fa fa-lightbulb-o' },
            { value: 'fa fa-sun-o fa-2x', icon: 'fa fa-sun-o' }
        ];
        // set current selected Icon based on Icon in Database
        for (var _i = 0, _a = this.icons; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.value === this.currentWidget.icon) {
                this.selectedIcon = item.value;
            }
        }
        this.selectedPosition = this.currentWidget.controlPosition;
        if (this.currentWidget.deviceId && this.currentWidget.entityId) {
            this.buildActionSelector(this.currentWidget.deviceId, this.currentWidget.entityId);
        }
        // if new data is available, the slider state gets updated
        this.dataService.refreshChartNow
            .subscribe(function (result) {
            if (result !== undefined && _this.selectedDevice === result.deviceId &&
                _this.selectedAction === result.entityId) {
                //set action
                _this.currentWidget.value = result.value;
            }
        });
    };
    StateControlDeviceComponent.prototype.initDropdowns = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id).subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have slideable actions
                        if (action.valueable === true) {
                            _this.devicesList.push({ label: device.name, value: device.deviceId });
                            break;
                        }
                    }
                }
            }
            if (_this.currentWidget.deviceId != undefined) {
                // set init device
                for (var _c = 0, _d = _this.devicesList; _c < _d.length; _c++) {
                    var listElem = _d[_c];
                    if (listElem.value === _this.currentWidget.deviceId) {
                        _this.selectedDevice = listElem.value;
                        // check if action is selected
                        _this.devicemanager.getDeviceById(_this.selectedDevice.toString(), _this.user.id, _this.project.id)
                            .subscribe(function (device) {
                            _this.actionList = [];
                            if (device.actions !== null) {
                                for (var _i = 0, _a = device.actions; _i < _a.length; _i++) {
                                    var action = _a[_i];
                                    _this.actionList.push({ label: action.name, value: action.id });
                                }
                            }
                            //set init action
                            for (var _b = 0, _c = _this.actionList; _b < _c.length; _b++) {
                                var listElem2 = _c[_b];
                                if (listElem2.value === _this.currentWidget.entityId) {
                                    _this.selectedAction = listElem2.value;
                                    _this.initializeValue();
                                    break;
                                }
                            }
                        }, function (error) {
                            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                                _this.router.navigate(['unauthorized']);
                            }
                            console.log('Error requesting devices from backend ', error);
                        });
                    }
                }
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method builds the dropdown for selecting a state depending on which device and entity was selected.
     * @param deviceId the id of the device
     * @param entityId the id of the action
     */
    StateControlDeviceComponent.prototype.buildActionSelector = function (deviceId, entityId) {
        var _this = this;
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            var action = device.actions.find(function (x) { return x.id === entityId; });
            for (var _i = 0, _a = action.states; _i < _a.length; _i++) {
                var state = _a[_i];
                _this.stateActionList.push({ label: state.description, value: state.state });
            }
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error requesting device from backend: ', error);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend which support
     * this type o widget.
     */
    StateControlDeviceComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have more than 2 stateable actions
                        if (action.states !== null) {
                            if (action.valueable === false && action.states.length > 2) {
                                _this.devicesList.push({ label: device.name, value: device.deviceId });
                                break;
                            }
                        }
                    }
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting devices from backend ', err);
        });
        this.devicesList.sort(function (a, b) { return a.label.localeCompare(b.label); });
    };
    /**
     * Updates the actions which you can choose in the action dropdown, so that you can only select capable
     * actions.
     */
    StateControlDeviceComponent.prototype.updateActionDropdown = function () {
        var _this = this;
        this.currentWidget.entityId = undefined;
        this.selectedAction = "";
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var actions = device.actions;
            _this.actionList = [];
            for (var i = 0; i < actions.length; i++) {
                if (actions[i].states !== null) {
                    if (actions[i].valueable === false && actions[i].states !== undefined && actions[i].states.length > 2) {
                        _this.actionList.push({ label: actions[i].name, value: actions[i].id });
                    }
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device actions could not be pulled  from the backend ', err);
        });
    };
    /**
     * This method sends a command (value) to the backend.
     * @param widgetValue the command set through the widget surface
     */
    StateControlDeviceComponent.prototype.sendCommand = function (widgetValue) {
        var _this = this;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var action = device.actions.find(function (x) { return x.id === _this.selectedAction; });
            _this.devicemanager.ChangeActionState(_this.user.id, _this.project.id, _this.selectedDevice, _this.selectedAction, widgetValue)
                .subscribe(function (result) {
                // log result.message
                console.log('new value was sent to backend server');
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('new value could not been sent to backend server', err);
            });
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device could not be pulled from backend', error);
        });
    };
    /**
     * This method gets called when the user presses the apply button in the
     * widget properties. It saves the properties in the database and disables the popup.
     * It call the value initialization.
     */
    StateControlDeviceComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.controlPosition = this.selectedPosition;
        this.currentWidget.icon = this.selectedIcon;
        this.currentWidget.deviceId = this.selectedDevice;
        this.currentWidget.entityId = this.selectedAction;
        this.saveInDatabase(this.currentWidget.deviceId, 'deviceId');
        this.saveInDatabase(this.currentWidget.entityId, 'entityId');
        this.saveInDatabase(this.currentWidget.icon, 'icon');
        this.saveInDatabase(this.currentWidget.controlPosition, 'controlPosition');
        this.buildActionSelector(this.currentWidget.deviceId, this.currentWidget.entityId);
        this.initializeValue();
    };
    // reset all changes made in the settings dialog
    StateControlDeviceComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedIcon = this.currentWidget.icon;
        this.selectedDevice = this.currentWidget.deviceId;
        this.selectedAction = this.currentWidget.entityId;
    };
    /**
     * This method initializes the value for a widget to display by requesting it from the backend once.
     */
    StateControlDeviceComponent.prototype.initializeValue = function () {
        var _this = this;
        this.devicemanager.GetActionValueOrState(this.currentWidget.entityId, this.currentWidget.deviceId, this.user.id, this.project.id)
            .subscribe(function (result) {
            _this.currentWidget.value = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting action state or value', err);
        });
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    StateControlDeviceComponent.prototype.saveInDatabase = function (value, field) {
        var _this = this;
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_3__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database entry ', error);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_statewidget__WEBPACK_IMPORTED_MODULE_5__["StateWidget"])
    ], StateControlDeviceComponent.prototype, "currentWidget", void 0);
    StateControlDeviceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'state-control-device',
            template: __webpack_require__(/*! ./state-control-device.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.html"),
            styles: [__webpack_require__(/*! ./state-control-device.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"], _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"], _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]])
    ], StateControlDeviceComponent);
    return StateControlDeviceComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.css":
/*!*********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.css ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".input-slider {\r\n  width: 4vw;\r\n}\r\n.unknown {\r\n  font-style:italic;\r\n}\r\n::ng-deep .ui-slider {\r\n  margin: 0 auto;\r\n}\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n.testclass {\r\n  width:95%; float:right;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Device Control Settings\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Device Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Device:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"devicesList\" [filter]=\"true\" [placeholder]=\"'Select a device.'\"\r\n                  [(ngModel)]=\"selectedDevice\"\r\n                  (onChange)=\"updateActionDropdown()\" [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Action:</div>\r\n      <p-dropdown [autoWidth]=\"true\"\r\n                  [options]=\"actionList\" [placeholder]=\"'Select an action.'\" [(ngModel)]=\"selectedAction\"\r\n                  [style]=\"{'width':'200px'}\">\r\n      </p-dropdown>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" >\r\n      <h3>Toggle Specifications</h3>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Position:</div>\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\"><p-radioButton  name=\"positionGroup\" value=\"right\" label=\"right\" [(ngModel)]=\"selectedPosition\"></p-radioButton></div>\r\n        <div class=\"ui-g-12\"><p-radioButton name=\"positionGroup\" value=\"bottom\" label=\"bottom\" [(ngModel)]=\"selectedPosition\"></p-radioButton></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">On-Label:</div>\r\n      <input pInputText [(ngModel)]=\"currentWidget.toggleLabelOn\">\r\n    </div>\r\n    <div  class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Off-Label:</div>\r\n      <input pInputText [(ngModel)]=\"currentWidget.toggleLabelOff\">\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <h3>Icon Specifications</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <p-selectButton [options]=\"icons\" [(ngModel)]=\"selectedIcon\"></p-selectButton>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"'button\" pButton icon=\"fa-check\" (click)=\"applySettings()\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"displaySettings=false;\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"gridster-item-content settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n\r\n<div *ngIf=\"currentWidget.controlPosition === 'right'\"\r\n     style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n    <i [class]=\"currentWidget.icon\"></i>\r\n  </div>\r\n  <div style=\"padding-left: 15px; width:100%\">\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\" (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width: 100%;\">{{ currentWidget.name }}</h2>\r\n\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n  </div>\r\n\r\n  <div style=\"padding-left: 15px;padding-top: 15px;\">\r\n\r\n        <p-inputSwitch class=\"gridster-item-content\" [onLabel]=\"currentWidget.toggleLabelOn\" [offLabel]=\"currentWidget.toggleLabelOff\" [(ngModel)]=\"currentWidget.value\" (onChange)=\"sendCommand(currentWidget.value)\" [style]=\"{'float': 'right'}\"></p-inputSwitch>\r\n\r\n  </div>\r\n</div>\r\n<div *ngIf=\"currentWidget.controlPosition === 'bottom'\">\r\n  <div style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n      <i [class]=\"currentWidget.icon\"></i>\r\n    </div>\r\n    <div style=\"padding-left: 15px;\">\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%;\" [(ngModel)]=\"currentWidget.name\" (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width:100%;\">{{ currentWidget.name }}</h2>\r\n\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; \" [placeholder]=\"'Additional info'\" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div style=\"display: flex; flex-direction: column; align-items: center; padding-top:15px;\">\r\n      <div style=\"width: 100%\">\r\n        <p-inputSwitch class=\"gridster-item-content\" [onLabel]=\"currentWidget.toggleLabelOn\" [offLabel]=\"currentWidget.toggleLabelOff\" [(ngModel)]=\"currentWidget.value\" (onChange)=\"sendCommand(currentWidget.value)\" [style]=\"{'float': 'right'}\"></p-inputSwitch>\r\n      </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.ts ***!
  \********************************************************************************************************************/
/*! exports provided: ToggleControlDeviceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ToggleControlDeviceComponent", function() { return ToggleControlDeviceComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _models_frontend_togglewidget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../models/frontend/togglewidget */ "./src/app/models/frontend/togglewidget.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#toggleDeviceControl} Widget. This type of widget is to control
 * an entity (action) of a device. That means it sends commands e.g. toggle a switch
 * to the backend. It uses the {@link ToggleWidget} model to represent a widget.
 */
var ToggleControlDeviceComponent = /** @class */ (function () {
    function ToggleControlDeviceComponent(dataService, databaseService, devicemanager, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.router = router;
        this.devicesList = [];
        this.actionList = [];
        this.displaySettings = false;
        this.icons = [];
    }
    ToggleControlDeviceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData.subscribe(function (value) { return _this.project = value; });
        this.dataService.userData.subscribe(function (value) { return _this.user = value; });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDropdowns();
        this.icons = [
            { value: 'fa fa-power-off fa-2x', icon: 'fa fa-power-off' },
            { value: 'fa fa-thermometer-full fa-2x', icon: 'fa fa-thermometer-full' },
            { value: 'fa fa-volume-down fa-2x', icon: 'fa fa-volume-down' },
            { value: 'fa fa-play-circle-o fa-2x', icon: 'fa fa-play-circle-o' },
            { value: 'fa fa-lightbulb-o fa-2x', icon: 'fa fa-lightbulb-o' },
            { value: 'fa fa-sun-o fa-2x', icon: 'fa fa-sun-o' }
        ];
        // set current selected Icon based on Icon in Database
        for (var _i = 0, _a = this.icons; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item.value === this.currentWidget.icon) {
                this.selectedIcon = item.value;
            }
        }
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedONLabel = this.currentWidget.toggleLabelOn;
        this.selectedOFFLabel = this.currentWidget.toggleLabelOff;
        // if new data is available, the slider state gets updated
        this.dataService.refreshChartNow
            .subscribe(function (result) {
            if (result !== undefined && _this.selectedDevice === result.deviceId &&
                _this.selectedAction === result.entityId) {
                //set action
                _this.currentWidget.value = (result.value === 0) ? false : true;
            }
        });
    };
    ToggleControlDeviceComponent.prototype.initDropdowns = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id).subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have slideable actions
                        if (action.valueable === true) {
                            _this.devicesList.push({ label: device.name, value: device.deviceId });
                            break;
                        }
                    }
                }
            }
            if (_this.currentWidget.deviceId != undefined) {
                // set init device
                for (var _c = 0, _d = _this.devicesList; _c < _d.length; _c++) {
                    var listElem = _d[_c];
                    if (listElem.value === _this.currentWidget.deviceId) {
                        _this.selectedDevice = listElem.value;
                        // check if action is selected
                        _this.devicemanager.getDeviceById(_this.selectedDevice.toString(), _this.user.id, _this.project.id)
                            .subscribe(function (device) {
                            _this.actionList = [];
                            if (device.actions !== null) {
                                for (var _i = 0, _a = device.actions; _i < _a.length; _i++) {
                                    var action = _a[_i];
                                    _this.actionList.push({ label: action.name, value: action.id });
                                }
                            }
                            //set init action
                            for (var _b = 0, _c = _this.actionList; _b < _c.length; _b++) {
                                var listElem2 = _c[_b];
                                if (listElem2.value === _this.currentWidget.entityId) {
                                    _this.selectedAction = listElem2.value;
                                    _this.initializeValue();
                                    break;
                                }
                            }
                        }, function (error) {
                            console.log('Error requesting devices from backend ', error);
                        });
                    }
                }
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend which support
     * this type o widget.
     */
    ToggleControlDeviceComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                if (device.actions.length > 0) { // filter just devices with actions
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // filter for devices which have slideable actions
                        if (action.states !== null) {
                            if (action.valueable === false && action.states.length < 3) {
                                _this.devicesList.push({ label: device.name, value: device.deviceId });
                                break;
                            }
                        }
                    }
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting devices from backend ', err);
        });
        this.devicesList.sort(function (a, b) { return a.label.localeCompare(b.label); });
    };
    /**
     * Updates the actions which you can choose in the action dropdown, so that you can only select capable
     * actions.
     */
    ToggleControlDeviceComponent.prototype.updateActionDropdown = function () {
        var _this = this;
        this.currentWidget.entityId = undefined;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var actions = device.actions;
            _this.actionList = [];
            for (var i = 0; i < actions.length; i++) {
                if (actions[i].states !== null) {
                    if (actions[i].valueable === false && actions[i].states !== undefined && actions[i].states.length === 2) {
                        _this.actionList.push({ label: actions[i].name, value: actions[i].id });
                    }
                }
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device actions could not be pulled  from the backend ', err);
        });
    };
    /**
     * This method sends a command (value) to the backend.
     * @param widgetValue the command set through the widget surface
     */
    ToggleControlDeviceComponent.prototype.sendCommand = function (widgetValue) {
        var _this = this;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            var action = device.actions.find(function (x) { return x.id === _this.selectedAction; });
            var command = 0;
            if (widgetValue) {
                command = 1;
            }
            _this.devicemanager.ChangeActionState(_this.user.id, _this.project.id, device.deviceId, action.id, command)
                .subscribe(function (result) {
                // log result.message
                console.log('new value was sent to backend server');
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('new value could not been sent to backend server', err);
            });
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device could not be pulled from backend', error);
        });
    };
    /**
     * This method gets called when the user presses the apply button in the
     * widget properties. It saves the properties in the database and disables the popup.
     * It call the value initialization.
     */
    ToggleControlDeviceComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.deviceId = this.selectedDevice;
        this.currentWidget.entityId = this.selectedAction;
        this.currentWidget.controlPosition = this.selectedPosition;
        this.currentWidget.icon = this.selectedIcon;
        this.currentWidget.toggleLabelOff = this.selectedOFFLabel;
        this.currentWidget.toggleLabelOn = this.selectedONLabel;
        this.saveInDatabase(this.currentWidget.deviceId, 'deviceId');
        this.saveInDatabase(this.currentWidget.entityId, 'entityId');
        this.saveInDatabase(this.currentWidget.icon, 'icon');
        this.saveInDatabase(this.currentWidget.fontSize, 'fontSize');
        this.saveInDatabase(this.currentWidget.toggleLabelOn, 'toggleLabelOn');
        this.saveInDatabase(this.currentWidget.toggleLabelOff, 'toggleLabelOff');
        this.saveInDatabase(this.currentWidget.controlPosition, 'controlPosition');
        this.initializeValue();
    };
    // reset all changes made in the settings dialog
    ToggleControlDeviceComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedIcon = this.currentWidget.icon;
        this.selectedDevice = this.currentWidget.deviceId;
        this.selectedAction = this.currentWidget.entityId;
        this.selectedONLabel = this.currentWidget.toggleLabelOn;
        this.selectedOFFLabel = this.currentWidget.toggleLabelOff;
    };
    /**
     * This method initializes the value for a widget to display by requesting it from the backend once.
     */
    ToggleControlDeviceComponent.prototype.initializeValue = function () {
        var _this = this;
        this.devicemanager.GetActionValueOrState(this.selectedAction, this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (result) {
            console.log('Value init ', result);
            if (result === 0) {
                _this.currentWidget.value = false;
            }
            else if (result === 1) {
                _this.currentWidget.value = true;
            }
            else {
                console.log('Value could not be initialized. Invalid value: ', result);
            }
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while requesting action state or value', err);
        });
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    ToggleControlDeviceComponent.prototype.saveInDatabase = function (value, field) {
        var _this = this;
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_3__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database entry ', error);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_togglewidget__WEBPACK_IMPORTED_MODULE_5__["ToggleWidget"])
    ], ToggleControlDeviceComponent.prototype, "currentWidget", void 0);
    ToggleControlDeviceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'toggle-control-device',
            template: __webpack_require__(/*! ./toggle-control-device.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.html"),
            styles: [__webpack_require__(/*! ./toggle-control-device.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"], _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"], _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]])
    ], ToggleControlDeviceComponent);
    return ToggleControlDeviceComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.css":
/*!*****************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.css ***!
  \*****************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".center{\r\n  text-align: center;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.html":
/*!******************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.html ***!
  \******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Type configuration\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <span>Please choose types for all sensors of the new device.</span>\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Sensors</h3>\r\n    </div>\r\n    <div *ngFor=\"let sensor of sensors\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">{{sensor.name}}:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"sensorTypes\" optionLabel=\"name\"\r\n                  [filter]=\"true\" [(ngModel)]=\"sensor.type\"\r\n                  [style]=\"{'min-width':'200px'}\" placeholder=\"Select a type\"\r\n                  (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div>\r\n    <!--div class=\"ui-g-12 grid-elem\">\r\n      <h3>Actuators</h3>\r\n    </div>\r\n    <div *ngFor=\"let actuator of actuators\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">{{actuator.name}}:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"actuatorTypes\" optionLabel=\"name\"\r\n                  [filter]=\"true\" [(ngModel)]=\"actuator.type\"\r\n                  [style]=\"{'min-width':'200px'}\" placeholder=\"Select a type\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div-->\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"addTypesToDevice();\" label=\"Apply\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<div style=\"display: flex; flex-direction:column; align-items:left; height:100%; width:100%;\">\r\n  <div style=\"padding-top:15px;\">\r\n    <p-dropdown appendTo=\"body\" [options]=\"platforms\" [filter]=\"true\" [placeholder]=\"'Select a platform'\"\r\n                [(ngModel)]=\"selectedPlatform\" optionLabel=\"name\"\r\n                [style]=\"{'width':'100%'}\" (onChange)=\"updateAddingService()\" (mousedown)=\"$event.stopPropagation()\"\r\n                (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    </p-dropdown>\r\n  </div>\r\n  <div *ngIf=\"addingService == 1\" style=\"padding-top:15px;\">\r\n    <p-dropdown appendTo=\"body\" [options]=\"devices\" [filter]=\"true\" optionLabel=\"name\" [placeholder]=\"'Select a device'\"\r\n                [(ngModel)]=\"selectedDevice\" (onClick)=\"updateDevices()\" [style]=\"{'width':'100%'}\"\r\n                (mousedown)=\"$event.stopPropagation()\"\r\n                (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    </p-dropdown>\r\n  </div>\r\n  <div *ngIf=\"addingService == 1 || addingService == 2\" style=\"padding-top:15px;\">\r\n    <input pInputText [(ngModel)]=\"name\" style=\"width: 100%;\" placeholder=\"Enter name\"\r\n           (mousedown)=\"$event.stopPropagation()\"\r\n           (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n  </div>\r\n  <div *ngIf=\"addingService == 2\" style=\"padding-top:15px;\">\r\n    <input pInputText [(ngModel)]=\"externalDeviceId\" style=\"width: 100%;\" placeholder=\"Enter device id\"\r\n           (mousedown)=\"$event.stopPropagation()\"\r\n           (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n  </div>\r\n  <!--<div style=\"padding-top:15px;\">\r\n    <input pInputText [(ngModel)]=\"serial\" style=\"width: 100%;\" placeholder=\"Enter serialnumber\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n  </div>-->\r\n  <div *ngIf=\"addingService == 1 || addingService == 2\" style=\"padding-top:15px;\">\r\n    <p-dropdown appendTo=\"body\" [options]=\"locations\" [filter]=\"true\" optionLabel=\"name\"\r\n                [placeholder]=\"'Select a location'\"\r\n                [(ngModel)]=\"selectedLocation\" [style]=\"{'width':'100%'}\" (mousedown)=\"$event.stopPropagation()\"\r\n                (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    </p-dropdown>\r\n    <!--p-dropdown [options]=\"locations\" [(ngModel)]=\"selectedLocation\" placeholder=\"Select a City\" optionLabel=\"name\" [showClear]=\"true\"></p-dropdown-->\r\n  </div>\r\n  <div style=\"padding-top:15px; display: flex; flex-direction:row; align-items: center; width:100%;\">\r\n    <div style=\"width: 50%;\">\r\n      <button type=\"'button\" pButton icon=\"fa-check\" (click)=\"addDevice()\" (mousedown)=\"$event.stopPropagation()\"\r\n              style=\"float:right;\" (touchstart)=\"$event.stopPropagation()\" label=\"Add\"\r\n              class=\"gridster-item-content\"></button>\r\n    </div>\r\n\r\n    <div style=\"width: 50%;\">\r\n      <button pButton icon=\"fa fa-undo\" (mousedown)=\"$event.stopPropagation()\" style=\"float:left;\"\r\n              (touchstart)=\"$event.stopPropagation()\" (click)=\"clear()\" class=\"gridster-item-content\"\r\n              label=\"Clear\">\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-success ui-corner-all\"\r\n       *ngIf=\"isSuccess\">\r\n    <span>Device was added.</span>\r\n  </div>\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\"\r\n       *ngIf=\"isLocationFailed\">\r\n    <span>Device was added, but sensors cannot be load.</span>\r\n  </div>\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-success ui-corner-all\"\r\n       *ngIf=\"isSensorUpdated\">\r\n    <span>Sensor information was updated.</span>\r\n  </div>\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-success ui-corner-all\"\r\n       *ngIf=\"isSensorUpdatedFAILED\">\r\n    <span>Sensor could not been updated. Please try again later.</span>\r\n  </div>\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\"\r\n       *ngIf=\"isFail\">\r\n    <span>Device could not been added. Please try again later.</span>\r\n  </div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.ts":
/*!****************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.ts ***!
  \****************************************************************************************************************/
/*! exports provided: AddDeviceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddDeviceComponent", function() { return AddDeviceComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};






var AddDeviceComponent = /** @class */ (function () {
    function AddDeviceComponent(dataService, devicemanager, router) {
        this.dataService = dataService;
        this.devicemanager = devicemanager;
        this.router = router;
        this.protocols = ['protocol1', 'protocol2'];
        this.addingService = 0; // represents which adding fields should be shown. Default: 0- nothing to display , 1- Openhab, 2- Aiotea
    }
    Object.defineProperty(AddDeviceComponent.prototype, "loginStatus", {
        get: function () {
            return this._loginStatus;
        },
        enumerable: true,
        configurable: true
    });
    AddDeviceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData.subscribe(function (value) { return _this.project = value; });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this._loginStatus = value; });
        this.dataService.currentLoginUUID.subscribe(function (value) { return _this.currentLoginUUID = value; });
        this.displaySettings = false;
        this.isFail = false;
        this.isSuccess = false;
        this.isSensorUpdated = false;
        this.isSensorUpdatedFAILED = false;
        this.isLocationFailed = false;
        this.tags = [];
        this.sensorTypes = [];
        this.actuatorTypes = [];
        this.locations = [];
        this.sensors = [];
        this.actuators = [];
        this.devicemanager.getAllPlatforms(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.platforms = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        this.devicemanager.getAllLocations(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.locations = result.map(function (elem) {
                return { name: elem, value: elem };
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        this.devicemanager.getAllSensorTypes(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            console.log(result.types);
            _this.sensorTypes = result.types.map(function (elem) {
                return { name: elem.type, value: elem.type };
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        this.devicemanager.getAllActuatorTypes(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.actuatorTypes = result.map(function (elem) {
                return { name: elem, value: elem };
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    AddDeviceComponent.prototype.updateInput = function () {
        var i = 0;
        while (i < this.tagNumber) {
            i++;
            this.tags.push(i.toString());
        }
    };
    AddDeviceComponent.prototype.updateDevices = function () {
        var _this = this;
        this.selectedDevice = undefined;
        this.devicemanager.searchForDevices(this.selectedPlatform['platformId'], this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.devices = result;
            _this.devices = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    // trackingfunction
    AddDeviceComponent.prototype.trackPlatform = function (index, platform) {
        return platform;
    };
    /**
     * This method updates the {@link addingService} regarding to
     * what the user selected from the platform.
     */
    AddDeviceComponent.prototype.updateAddingService = function () {
        console.log("Selecte Platform: ", this.selectedPlatform);
        if (this.selectedPlatform['platformId'].includes('openHab'))
            this.addingService = 1;
        else if (this.selectedPlatform['platformId'].includes('aiotes'))
            this.addingService = 2;
        else
            this.addingService = 0;
    };
    // closes Pop-up and adds the device to the devicelist
    AddDeviceComponent.prototype.addDevice = function () {
        var _this = this;
        if (this.name === '') {
            this.name = this.selectedDevice;
        }
        this.devicemanager.addDevice(this.name, this.selectedPlatform['platformId'], this.selectedDevice, this.serial, this.tags, this.selectedLocation.value, this.currentLoginUUID, this.project.id, this.externalDeviceId).subscribe(function (result) {
            // log result.message
            console.log('AddDevice was sent to backend server');
            var device;
            _this.devicemanager.getDevicesByLocation(_this.selectedLocation.value, _this.currentLoginUUID, _this.project.id).subscribe(function (list) {
                console.log("list: ", list);
                var _loop_1 = function (device_1) {
                    console.log("device.name ", device_1.name);
                    console.log("selectedDevice ", _this.selectedDevice.name);
                    console.log("this.name ", _this.name);
                    if (device_1.name === _this.selectedDevice.name || device_1.name === _this.name) {
                        // fill dropdown Lists of sensors and actuators
                        console.log("yes");
                        if (device_1.sensors !== undefined && device_1.sensors.length > 0) {
                            _this.sensors = device_1.sensors.map(function (elem) {
                                return { id: elem.id, name: elem.name, type: '', deviceId: device_1.deviceId };
                            });
                            console.log("sensors: ", _this.sensors);
                        }
                        if (device_1.actuators !== undefined && device_1.actuators.length > 0) {
                            _this.actuators = device_1.actuators.map(function (elem) {
                                return { id: elem.id, name: elem.name, type: '' };
                            });
                            console.log("actuators: ", _this.actuators);
                        }
                        if (_this.sensors.length > 0) {
                            _this.displaySettings = true;
                        }
                        else {
                            _this.clear();
                        }
                        return "break";
                    }
                };
                for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
                    var device_1 = list_1[_i];
                    var state_1 = _loop_1(device_1);
                    if (state_1 === "break")
                        break;
                }
                _this.isSuccess = true;
                // now open the popup for the type configuration of the entities
                setTimeout(function () {
                    _this.isSuccess = false;
                }, 3000);
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log(err);
                _this.isLocationFailed = true;
                setTimeout(function () {
                    _this.isLocationFailed = false;
                }, 3000);
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
            _this.isFail = true;
            console.log('AddDevice could not been sent to backend server');
            setTimeout(function () {
                _this.isFail = false;
            }, 3000);
        });
    };
    AddDeviceComponent.prototype.addTypesToDevice = function () {
        var _this = this;
        this.displaySettings = false;
        var observables = [];
        for (var _i = 0, _a = this.sensors; _i < _a.length; _i++) {
            var elem = _a[_i];
            console.log("sensor:", elem);
            observables.push(this.devicemanager.SetSensorType(elem.deviceId, elem.id, elem.type.value, this.currentLoginUUID, this.project.id));
        }
        /*for (const elem of this.actuators) {
          observables.push(this.devicemanager.SetActuatorType(elem.deviceId, elem.id,
            elem.type.value, this.currentLoginUUID, this.project.id));
        }*/
        var observeable = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["forkJoin"])(observables);
        observeable.subscribe(function (results) {
            // All observables in `observables` array have resolved and `dataArray` is an array of result of each observable
            _this.clear();
            _this.isSensorUpdated = true;
            setTimeout(function () {
                _this.isSensorUpdated = false;
            }, 3000);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
            _this.isSensorUpdatedFAILED = true;
            setTimeout(function () {
                _this.isSensorUpdatedFAILED = false;
            }, 3000);
        });
    };
    // reset all input fields
    AddDeviceComponent.prototype.clear = function () {
        console.log('clear');
        this.selectedDevice = '';
        this.selectedPlatform = '';
        this.name = '';
        this.serial = '';
        this.tags = [];
        this.protocols = [];
        this.selectedLocation = '';
        this.devices = [];
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_widget__WEBPACK_IMPORTED_MODULE_4__["Widget"])
    ], AddDeviceComponent.prototype, "currentWidget", void 0);
    AddDeviceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-add-device',
            template: __webpack_require__(/*! ./add-device.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.html"),
            styles: [__webpack_require__(/*! ./add-device.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]])
    ], AddDeviceComponent);
    return AddDeviceComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.css":
/*!***********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.css ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".center{\r\n  text-align: center;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.html":
/*!************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.html ***!
  \************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n<div style=\"display: flex; flex-direction:column; align-items: center; height:100%; width:100%;\">\r\n  <div style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n\r\n  <div style=\"width:100%;\">\r\n    <p-dropdown appendTo=\"body\" [options]=\"devices\" placeholder=\"Select a device\" optionLabel=\"name\"\r\n                [(ngModel)]=\"selectedDevice\" [style]=\"{'width':'100%'}\" class=\"gridster-item-content\" (onClick)=\"updateDevices()\">\r\n    </p-dropdown>\r\n\r\n  </div>\r\n<div style=\"width:fit-content; padding-left: 15px;\">\r\n  <button pButton=\"delete\" icon=\"fa fa-trash\" (mousedown)=\"$event.stopPropagation()\"\r\n          (touchstart)=\"$event.stopPropagation()\" (click)=\"deleteDevice()\" class=\"gridster-item-content\">\r\n  </button>\r\n</div>\r\n  </div>\r\n\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-success ui-corner-all\"\r\n       *ngIf=\"isSuccess\">\r\n    <span>Device was deleted.</span>\r\n  </div>\r\n  <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\"\r\n       *ngIf=\"isFail\">\r\n    <span>Device could not been deleted. Please try again later.</span>\r\n  </div>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.ts":
/*!**********************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.ts ***!
  \**********************************************************************************************************************/
/*! exports provided: DeleteDeviceComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DeleteDeviceComponent", function() { return DeleteDeviceComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var DeleteDeviceComponent = /** @class */ (function () {
    function DeleteDeviceComponent(devicemanager, dataService, router) {
        this.devicemanager = devicemanager;
        this.dataService = dataService;
        this.router = router;
    }
    DeleteDeviceComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.isFail = false;
        this.isSuccess = false;
        this.dataService.currentLoginUUID.subscribe(function (value) { return _this.currentLoginUUID = value; });
        // get all Devices for Dropdown List
        this.devicemanager.getAllDevices(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.devices = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    DeleteDeviceComponent.prototype.updateDevices = function () {
        var _this = this;
        this.devicemanager.getAllDevices(this.currentLoginUUID, this.project.id).subscribe(function (result) {
            _this.devices = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    // function for deleting the selected Device
    DeleteDeviceComponent.prototype.deleteDevice = function () {
        var _this = this;
        this.devicemanager.DeleteDevice(this.selectedDevice['deviceId'], this.currentLoginUUID, this.project.id).subscribe(function (result) {
            // log result.message
            _this.isSuccess = true;
            _this.updateDevices();
            console.log('Device was deleted on backend server');
            setTimeout(function () {
                _this.isSuccess = false;
                _this.selectedDevice = '';
            }, 3000);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            _this.isFail = true;
            setTimeout(function () {
                _this.isFail = false;
            }, 5000);
            console.log('Device could not been deleted on backend server');
            console.log(err);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_widget__WEBPACK_IMPORTED_MODULE_2__["Widget"])
    ], DeleteDeviceComponent.prototype, "currentWidget", void 0);
    DeleteDeviceComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-delete-device',
            template: __webpack_require__(/*! ./delete-device.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.html"),
            styles: [__webpack_require__(/*! ./delete-device.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.css")]
        }),
        __metadata("design:paramtypes", [_services_devicemanager_service__WEBPACK_IMPORTED_MODULE_1__["DeviceManagerService"], _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"]])
    ], DeleteDeviceComponent);
    return DeleteDeviceComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.css":
/*!*******************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.css ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: 95% !important;\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.html":
/*!********************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.html ***!
  \********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Bar Chart Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Preferences</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Type of sensor(s):</div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorType\" value=\"true\" label=\"with numerical values\" [(ngModel)]=\"sensorType\" inputId=\"one\" (click)=\"setIsNumeric('true');\"></p-radioButton></div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorType\" value=\"false\" label=\"with states\" [(ngModel)]=\"sensorType\" inputId=\"many\" (click)=\"setIsNumeric('false');\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Number of sensors:</div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorNumber\" value=\"true\" label=\"one\" [(ngModel)]=\"sensorNumber\" inputId=\"one\" (click)=\"setIsMonoVis('true');\"></p-radioButton></div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorNumber\" value=\"false\" label=\"many\" [(ngModel)]=\"sensorNumber\" inputId=\"many\" (click)=\"setIsMonoVis('false');\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input Data</h3>\r\n    </div>\r\n    <p-accordion [multiple]=\"true\">\r\n      <div *ngFor=\"let group of dropdownList\" class=\"ui-g-12 grid-elem\">\r\n        <p-accordionTab  style=\"align-items: center; overflow: auto; width: 100%;\">\r\n          <p-header>\r\n            Device:\r\n            <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(group.deviceEntity.deviceId)\"\r\n                        [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.deviceId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            Sensor:\r\n            <p-dropdown appendTo=\"body\" [options]=\"group.sensorList\" [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.entityId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\" (onChange)=\"setValueFormat()\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            <button *ngIf=\"!isMonoVis && dropdownList.indexOf(group) > 0\" style = \"margin-left: 10px;\" type=\"button\" pButton icon=\"fa fa-minus\" (click)=\"$event.stopPropagation();$event.preventDefault();deleteDropdowns(group.deviceEntity);\"></button>\r\n\r\n          </p-header>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.label\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Bar color:</div>\r\n            <p-colorPicker [(ngModel)]=\"group.deviceEntity.color\"></p-colorPicker>\r\n          </div>\r\n\r\n        </p-accordionTab>\r\n      </div>\r\n    </p-accordion>\r\n\r\n    <div class=\"ui-g-12\" *ngIf=\"!isMonoVis\">\r\n      <button type=\"button\" pButton icon=\"fa fa-plus\" (click)=\"addNewDropdowns()\"></button>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">X axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.xLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Y axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.yLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\"></div>\r\n      <div class=\"ui-g-2 grid-elem\">to</div>\r\n      <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <!--div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Values per</div>\r\n      <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a time interval'\"\r\n                  [options]=\"timeList\" [(ngModel)]=\"timeType\"\r\n                  [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n      </p-dropdown>\r\n      <div class=\"dropdown\"></div>\r\n    </div-->\r\n    <div *ngIf=\"isNumeric\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Calculation:</div>\r\n      <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a calculation type'\"\r\n                  [options]=\"calculationList\" [(ngModel)]=\"calculationType\"\r\n                  [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n      </p-dropdown>\r\n      <div class=\"dropdown\"></div>\r\n    </div>\r\n    <div *ngIf=\"!isNumeric\" class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\">Frequency:</div>\r\n        <div class=\"ui-g-4\"><p-radioButton name=\"countType\" value=\"count\" label=\"count\" [(ngModel)]=\"frequency\" inputId=\"count\" ></p-radioButton></div>\r\n        <div class=\"ui-g-4\"><p-radioButton name=\"countType\" value=\"percentage\" label=\"percentage\" [(ngModel)]=\"frequency\" inputId=\"percentage\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;isAllowed=false;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n<div style=\"text-align: center;\">\r\n  <p-message *ngIf=\"isEmpty\" severity=\"info\" text=\"You selected device entities without historical data.\"></p-message>\r\n</div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.ts":
/*!******************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.ts ***!
  \******************************************************************************************************************************************/
/*! exports provided: BarChartVisualizationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BarChartVisualizationComponent", function() { return BarChartVisualizationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../models/frontend/barchartwidget */ "./src/app/models/frontend/barchartwidget.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#barChartVisualization} Widget. This type of widget is to display
 * values of an entity in a bar chart. That means it requests data e.g. get data of device x from 02.08.2018 - 03.08.2018
 * from the backend. It uses the {@link BarChartWidget} model to represent a widget.
 */
var BarChartVisualizationComponent = /** @class */ (function () {
    function BarChartVisualizationComponent(dataService, databaseService, devicemanager, visualmanager) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.isMonoVis = true;
        // isMonoVis in string:
        this.sensorNumber = 'true';
        this.isNumeric = false;
        // isNumeric in string:
        this.sensorType = 'false';
        // interval for generating bars
        this.timeType = '';
        // non numerical data's type of calculation
        this.calculationType = _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Avg;
        this.frequency = _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Frequency"].Count;
        this.devicesList = [];
        this.multidevicesList = [];
        this.sensorList = [];
        this.calculationList = [{ label: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Avg, value: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Avg },
            { label: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Min, value: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Min }, { label: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Max, value: _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Max }];
        this.timeList = [{ label: 'day', value: 'day' }, { label: 'week', value: 'week' }, { label: 'month', value: 'month' }];
        this.calculationNonNumericalList = [{ label: 'absolute count', value: 'absolute' }, { label: 'percentage', value: 'percentage' }];
        this.displaySettings = false;
        this.axesOptions = { xLabel: '', yLabel: '', xLabelVisible: true, yLabelVisible: true };
        this.representations = [];
        this.dropdownList = [{
                deviceEntity: {
                    deviceId: '',
                    entityId: '',
                    lineType: '',
                    fillArea: true,
                    showLine: true,
                    color: '#1976D2',
                    label: '',
                    unit: '',
                    axis: ''
                }, sensorList: []
            }];
    }
    BarChartVisualizationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isEmpty = false;
        this.devicesList = [];
        this.multidevicesList = [];
        this.sensorList = [];
        this.chartType = 'bar';
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        if (this.currentWidget.axesOptions !== undefined) {
            this.axesOptions = this.currentWidget.axesOptions;
        }
        if (this.currentWidget.isMonoVis !== undefined) {
            this.isMonoVis = this.currentWidget.isMonoVis;
            this.sensorNumber = this.isMonoVis.toString();
        }
        if (this.currentWidget.isNumerical !== undefined) {
            this.isNumeric = this.currentWidget.isNumerical;
            this.sensorType = this.isNumeric.toString();
        }
        if (this.currentWidget.calculationType !== undefined) {
            this.calculationType = this.currentWidget.calculationType;
        }
        if (this.currentWidget.frequencyType !== undefined) {
            this.frequency = this.currentWidget.frequencyType;
        }
        if (this.currentWidget.interval !== undefined) {
            this.timeType = this.currentWidget.interval;
        }
        if (this.currentWidget.startDate !== undefined && this.currentWidget.endDate !== undefined) {
            this.selectedStart = new Date(this.currentWidget.startDate);
            this.selectedEnd = new Date(this.currentWidget.endDate);
        }
        else {
            this.selectedStart = new Date(2019, 1, 5, 10, 55, 22, 0);
            this.selectedEnd = new Date(2019, 1, 15, 10, 55, 22, 0);
        }
        this.fillDevicesList(true);
        // init chart attributes and chart object
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            scales: {
                xAxes: [{
                        type: 'category',
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'time'
                        },
                    }],
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            max: undefined
                        },
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        }
                    }]
            },
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_2__["Chart"](this.ctx.nativeElement, {
            type: this.chartType,
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
    };
    // generates a timestamp in ISO standard as defined for the backend
    BarChartVisualizationComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    BarChartVisualizationComponent.prototype.initSetDevice = function () {
        var _this = this;
        this.dropdownList = [];
        // create a list with all init selected devices
        var selectedDevices = [];
        var isIncluded = false;
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var widgetElem = _a[_i];
            // check if device is in list
            for (var _b = 0, selectedDevices_1 = selectedDevices; _b < selectedDevices_1.length; _b++) {
                var selectedElem = selectedDevices_1[_b];
                if (selectedElem === widgetElem.deviceId) {
                    isIncluded = true;
                    break;
                }
            }
            if (!isIncluded) {
                selectedDevices.push(widgetElem.deviceId);
            }
        }
        // fill lists for dropdowns
        var numberOfSavedEntities = this.currentWidget.deviceEntities.length;
        // go over all selected devices
        for (var _c = 0, selectedDevices_2 = selectedDevices; _c < selectedDevices_2.length; _c++) {
            var widgetElem = selectedDevices_2[_c];
            var _loop_1 = function (deviceElem) {
                if (deviceElem.value === widgetElem) {
                    // here we have the right device id
                    // get list of all entities of the device
                    var sensorList_1 = [];
                    this_1.devicemanager.getDeviceById(deviceElem.value, this_1.user.id, this_1.project.id)
                        .subscribe(function (device) {
                        // only push sensors if we have stateless data
                        if (device.sensors !== null && _this.isNumeric) {
                            for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                                var sensor = _a[_i];
                                sensorList_1.push({ label: sensor.name, value: sensor.id });
                            }
                        }
                        if (device.actions !== null) {
                            for (var _b = 0, _c = device.actions; _b < _c.length; _b++) {
                                var action = _c[_b];
                                // only push actions with states in sensorList if is not numeric (= stateful data)
                                if (!_this.isNumeric && !action.valueable) {
                                    sensorList_1.push({ label: action.name, value: action.id });
                                }
                                else if (_this.isNumeric && action.valueable) {
                                    // if we have stateless data, push actions without states
                                    sensorList_1.push({ label: action.name, value: action.id });
                                }
                            }
                        }
                        // looking for the right entitiy id
                        for (var _d = 0, sensorList_2 = sensorList_1; _d < sensorList_2.length; _d++) {
                            var sensorElem = sensorList_2[_d];
                            for (var _e = 0, _f = _this.currentWidget.deviceEntities; _e < _f.length; _e++) {
                                var elem = _f[_e];
                                if (sensorElem.value === elem.entityId) {
                                    // here we have the right entity id
                                    // set selected device, list and sensor in dropdownlist
                                    _this.dropdownList.push({
                                        deviceEntity: {
                                            deviceId: deviceElem.value,
                                            entityId: sensorElem.value,
                                            lineType: elem.lineType,
                                            fillArea: elem.fillArea,
                                            showLine: elem.showLine,
                                            color: elem.color,
                                            label: elem.label,
                                            unit: elem.unit,
                                            axis: 'y'
                                        },
                                        sensorList: sensorList_1
                                    });
                                    break;
                                }
                            }
                        }
                        // check dropdownlist for dummydata
                        for (var _g = 0, _h = _this.dropdownList; _g < _h.length; _g++) {
                            var data = _h[_g];
                            if (data['deviceId'] === '') {
                                console.log('Dummy');
                            }
                        }
                        //create and fill chartData from selected sensors if all data is in dropdownList (last finished request)
                        //if (this.dropdownList.length === numberOfSavedEntities) {
                        // this.initRealtimeData(this.myChart);
                        _this.showChart(_this.myChart);
                        //}
                    }, function (error) {
                        console.log('Error requesting devices from backend ', error);
                    });
                }
            };
            var this_1 = this;
            // go over all existing devices
            for (var _d = 0, _e = this.devicesList; _d < _e.length; _d++) {
                var deviceElem = _e[_d];
                _loop_1(deviceElem);
            }
        }
    };
    BarChartVisualizationComponent.prototype.showChart = function (chart) {
        var _this = this;
        // set chart options
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        chart.data.datasets = [];
        chart.data.labels = [];
        var statedata = { 'deviceId': '', 'actionId': '', 'states': [{ number: 0, description: '', value: 0 }] };
        //let color = [];
        var cIndex = 0;
        var _loop_2 = function (selected) {
            this_2.devicemanager.getDeviceById(selected.deviceEntity.deviceId, this_2.user.id, this_2.project.id).subscribe(function (result) {
                // for stateful data values, the states have to be prepared
                if (!_this.isNumeric) {
                    var states = void 0;
                    for (var _i = 0, _a = result.actions; _i < _a.length; _i++) {
                        var action = _a[_i];
                        // get the selected action's states
                        states = [];
                        if (!action.valueable && action.id === selected.deviceEntity.entityId) {
                            for (var _b = 0, _c = action.states; _b < _c.length; _b++) {
                                var state = _c[_b];
                                states.push({ number: state.state, description: state.description, value: 0 });
                            }
                            statedata = { 'deviceId': selected.deviceEntity.deviceId, 'actionId': action.id, 'states': states };
                            break;
                        }
                    }
                }
                // get Data from Backend
                _this.visualmanager.getTimeData(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, _this.generateIsoDateTime(_this.selectedStart), _this.generateIsoDateTime(_this.selectedEnd), 'P5D', _this.user.id, _this.project.id)
                    .subscribe(function (sensorDataModel) {
                    if (sensorDataModel.Values.length > 0) {
                        var valueCount = 0;
                        var dateStart = new Date(sensorDataModel.Values[0].DateTime);
                        var dateEnd = new Date(sensorDataModel.Values[sensorDataModel.Values.length - 1].DateTime);
                        // we have to divide the total time by 3600000 to get hours instead of milliseconds
                        var timeTotal = (dateEnd.getTime() - dateStart.getTime()) / 3600000;
                        // stateless data
                        if (_this.isNumeric) {
                            var value = 0;
                            switch (_this.calculationType) {
                                case _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Avg:
                                    value = _this.calculateAverage(sensorDataModel.Values, timeTotal);
                                    break;
                                case _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Max:
                                    value = _this.calculateMaximum(sensorDataModel.Values);
                                    break;
                                case _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Calculation"].Min:
                                default:
                                    value = _this.calculateMinimum(sensorDataModel.Values);
                                    break;
                            }
                            // add sensor data to the chartData.
                            // create ctxData
                            if (chart.data.labels.length === 0) {
                                chart.data.labels.push(_this.calculationType);
                            }
                            var ctxData = {
                                label: selected.deviceEntity.label,
                                data: [value],
                                backgroundColor: selected.deviceEntity.color,
                                borderColor: selected.deviceEntity.color
                            };
                            console.log('ctxData: ', ctxData);
                            chart.data.datasets.push(ctxData);
                            console.log('after push: ctxData: ', chart.data.datasets);
                            if (chart.data.datasets[0]['label'] === '') {
                                console.log("delete datalabel");
                                //chart.data.datasets.shift();
                            }
                            chart.update();
                            console.log('chartData: ', chart.data);
                            // stateful data
                        }
                        else {
                            for (var _i = 0, _a = sensorDataModel.Values; _i < _a.length; _i++) {
                                var value = _a[_i];
                                var entityValue = void 0;
                                if (value.FloatValue !== null) {
                                    entityValue = value.FloatValue;
                                }
                                else {
                                    var vString = value.StringValue;
                                    // delete Temperature unit, which is added in Openhab
                                    vString = vString.replace(' °C', '');
                                    entityValue = Number(vString);
                                }
                                var len = sensorDataModel.Values.length;
                                for (var _b = 0, _c = statedata.states; _b < _c.length; _b++) {
                                    var state = _c[_b];
                                    if (sensorDataModel.Values.indexOf(value) < len - 1) {
                                        if (entityValue === state.number) {
                                            // count how often the state is represented in the data.
                                            var start = new Date(value.DateTime);
                                            var end = new Date(sensorDataModel.Values[sensorDataModel.Values.indexOf(value) + 1].DateTime);
                                            state.value = state.value + ((end.getTime() - start.getTime()) / 3600000);
                                        }
                                    }
                                }
                                //console.log("stateData: ", statedata);
                                // one time the label of the data points has to be set.
                            }
                            // count or calculate percentage
                            if (_this.frequency === _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["Frequency"].Percentage) {
                                for (var _d = 0, _e = statedata.states; _d < _e.length; _d++) {
                                    var state = _e[_d];
                                    state.value = state.value / timeTotal;
                                }
                            }
                            // add sensor data to the chartData.
                            // create ctxData
                            var stateValues = [];
                            console.log("statedata states: ", statedata.states);
                            var _loop_3 = function (state) {
                                stateValues.push(state.value);
                                checkList = [];
                                checkList = chart.data.labels.filter(function (elem) { return elem === state.number; });
                                if (checkList.length <= 0) {
                                    chart.data.labels.push(state.number);
                                }
                            };
                            var checkList;
                            for (var _f = 0, _g = statedata.states; _f < _g.length; _f++) {
                                var state = _g[_f];
                                _loop_3(state);
                            }
                            var ctxData = {
                                label: selected.deviceEntity.label,
                                data: stateValues,
                                backgroundColor: selected.deviceEntity.color,
                                borderColor: selected.deviceEntity.color
                            };
                            console.log('ctxData: ', ctxData);
                            chart.data.datasets.push(ctxData);
                            if (chart.data.datasets[0]['label'] === '') {
                                // chart.data.datasets.shift();
                            }
                            chart.update();
                            console.log('chartData: ', chart.data);
                        }
                    }
                    else {
                        // if there is no history data, generate Empty data Array
                        _this.isEmpty = true;
                        var ctxData = {
                            label: selected.deviceEntity.label,
                            data: [],
                            backgroundColor: selected.deviceEntity.color,
                            borderColor: selected.deviceEntity.color
                        };
                        console.log('ctxData: ', ctxData);
                        chart.data.datasets.push(ctxData);
                        if (chart.data.datasets[0]['label'] === '') {
                            chart.data.datasets.shift();
                        }
                        chart.update();
                        console.log('chartData: ', chart.data);
                    }
                }, function (err) {
                    console.log('Error requesting historic data from backend ', err);
                });
            }, function (error) {
                console.log('Error requesting device data from backend ');
            });
        };
        var this_2 = this;
        // go through all selected devices
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var selected = _a[_i];
            _loop_2(selected);
        }
    };
    // events
    BarChartVisualizationComponent.prototype.chartClicked = function (e) {
        console.log(e);
    };
    BarChartVisualizationComponent.prototype.chartHovered = function (e) {
        console.log(e);
    };
    // add a new line / dataset to the chart
    BarChartVisualizationComponent.prototype.addDataset = function (chart, dataset) {
        chart.data.datasets.push(dataset);
        if (chart.data.datasets[0]['label'] === '') {
            chart.data.dataset.shift();
        }
        chart.update();
    };
    // removes all datasets which have mor then one data point
    BarChartVisualizationComponent.prototype.removeDatasets = function (chart) {
        chart.data.datasets.forEach(function (dataset) {
            if (dataset.data.lenght > 1) {
                var removalIndex = chart.data.datasets.indexOf(dataset); //Locate index of dataset
                if (removalIndex >= 0) { //make sure this element exists in the array
                    chart.data.datasets.splice(removalIndex, 1);
                }
            }
        });
        // when it was the only data set, remove the labels as well.
        if (chart.data.datasets.length === 0) {
            // for each label, remove one label.
            chart.data.labels.forEach(function (label) {
                chart.data.labels.pop();
            });
        }
        console.log('my LineChart Labels: ', chart.data.labels);
        chart.update();
    };
    // updates an attribute of a chart (sub)object.
    BarChartVisualizationComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    BarChartVisualizationComponent.prototype.applySettings = function () {
        this.isEmpty = false;
        this.displaySettings = false;
        //updating data from dropdowns in current Widget
        this.currentWidget.deviceEntities = [];
        // updating data from dropdowns in current Widget
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.currentWidget.deviceEntities.push(entity.deviceEntity);
        }
        this.currentWidget.chartType = this.chartType;
        this.currentWidget.axesOptions = this.axesOptions;
        this.currentWidget.interval = this.timeType;
        this.currentWidget.isNumerical = this.isNumeric;
        this.currentWidget.isMonoVis = this.isMonoVis;
        this.currentWidget.calculationType = this.calculationType;
        this.currentWidget.frequencyType = this.frequency;
        this.currentWidget.endDate = this.selectedEnd;
        this.currentWidget.startDate = this.selectedStart;
        // remove empty placeholder if neccessary
        if (this.currentWidget.deviceEntities[0].deviceId === '') {
            this.currentWidget.deviceEntities.shift();
        }
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.axesOptions, 'axesOptions');
        this.saveInDatabase(this.currentWidget.interval, 'interval');
        this.saveInDatabase(this.currentWidget.isMonoVis, 'isMonoVis');
        this.saveInDatabase(this.currentWidget.isNumerical, 'isNumerical');
        this.saveInDatabase(this.currentWidget.calculationType, 'calculationType');
        this.saveInDatabase(this.currentWidget.frequencyType, 'frequencyType');
        this.saveInDatabase(this.currentWidget.startDate, 'startDate');
        this.saveInDatabase(this.currentWidget.endDate, 'endDate');
        // get data with new settings
        this.showChart(this.myChart);
    };
    BarChartVisualizationComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        // this.chartType = this.currentWidget.chartType;
        this.selectedEnd = this.currentWidget.endDate;
        this.selectedStart = this.currentWidget.startDate;
        this.axesOptions = this.currentWidget.axesOptions;
        this.timeType = this.currentWidget.interval;
        this.isNumeric = this.currentWidget.isNumerical;
        this.sensorType = (this.isNumeric) ? "true" : "false";
        this.isMonoVis = this.currentWidget.isMonoVis;
        this.sensorNumber = (this.isMonoVis) ? "true" : "false";
        this.calculationType = this.currentWidget.calculationType;
        this.frequency = this.currentWidget.frequencyType;
        this.dropdownList = [{
                deviceEntity: {
                    deviceId: '',
                    entityId: '',
                    lineType: '',
                    fillArea: true,
                    showLine: true,
                    color: '#1976D2',
                    label: '',
                    unit: '',
                    axis: ''
                }, sensorList: []
            }];
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.dropdownList.push({ deviceEntity: entity, sensorList: [] });
            this.setSensorDropdown(entity.deviceId);
        }
        this.dropdownList.shift();
        this.devicesList = [];
        this.multidevicesList = [];
        this.fillDevicesList(false);
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    BarChartVisualizationComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_8__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    BarChartVisualizationComponent.prototype.addNewDropdowns = function () {
        this.dropdownList.push({
            deviceEntity: {
                deviceId: '',
                entityId: '',
                lineType: '',
                fillArea: true,
                showLine: true,
                color: '#1976D2',
                label: '',
                unit: '',
                axis: ''
            }, sensorList: []
        });
        //this.chartData.push({label: '', data: [], borderColor: '', fill: false});
    };
    BarChartVisualizationComponent.prototype.deleteDropdowns = function (group) {
        var i = 0;
        this.chartData = [{ label: '', data: [], borderColor: '#1976D2', backgroundColor: '#1976D2', fill: false }];
        // console.log("Dropdownlist: ", this.dropdownList);
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var elem = _a[_i];
            if (elem.deviceEntity.deviceId === group.deviceId && elem.deviceEntity.entityId === group.entityId) {
                this.dropdownList.splice(i, 1);
                // if the arrays have the same length, the chartData of the entity has to be deleted as well
                if (this.dropdownList.length === (this.chartData.length) - 1) {
                    // this.chartData.splice(i, 1);
                }
                console.log('Dropdownlist after DELETE: ', this.dropdownList);
            }
            i++;
        }
    };
    BarChartVisualizationComponent.prototype.setSensorDropdown = function (deviceId) {
        var _this = this;
        // get list of all entities of the device
        var sensorList = [];
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            // only push sensors if we have stateless and therefore numeric data
            if (_this.isNumeric && device.sensors !== null) {
                for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                    var sensor = _a[_i];
                    // if it has sensors, it has numerical values as well
                    sensorList.push({ label: sensor.name, value: sensor.id });
                }
            }
            if (device.actions !== null) {
                for (var _b = 0, _c = device.actions; _b < _c.length; _b++) {
                    var action = _c[_b];
                    // push actions either when it is stateless (numeric) and has values OR when it has states and is not numeric
                    if ((_this.isNumeric && action.valueable) || (!_this.isNumeric && !action.valueable)) {
                        sensorList.push({ label: action.name, value: action.id });
                    }
                }
            }
            // go through dropdownlist and set sensorList to device
            for (var _d = 0, _e = _this.dropdownList; _d < _e.length; _d++) {
                var dropdowngroup = _e[_d];
                if (dropdowngroup.deviceEntity.deviceId === deviceId) {
                    dropdowngroup.sensorList = sensorList;
                    // if there is only one element in sensorlist, preselect it for the dropdown
                    if (dropdowngroup.sensorList.length === 1) {
                        dropdowngroup.deviceEntity.entityId = dropdowngroup.sensorList[0].value;
                    }
                }
            }
        }, function (error) {
            console.log('Error requesting devices from backend ', error);
        });
    };
    // after changing Sensor Dropdown, set format of Sensor data values to provide uniformity
    BarChartVisualizationComponent.prototype.setValueFormat = function () {
    };
    // to fill the multi device dropdowns with compatible devices
    BarChartVisualizationComponent.prototype.fillDevicesList = function (isInit) {
        var _this = this;
        // reset list:
        this.devicesList = [];
        this.dropdownList = [{
                deviceEntity: {
                    deviceId: '',
                    entityId: '',
                    lineType: '',
                    fillArea: true,
                    showLine: true,
                    color: '#1976D2',
                    label: '',
                    unit: '',
                    axis: ''
                }, sensorList: []
            }];
        // get all devices
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                var isSameType = false;
                // only push device if we have stateless data
                if (_this.isNumeric) {
                    if (device.actions !== null) {
                        //check if it has stateless actuators
                        for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                            var action = _b[_a];
                            if (action.valueable) {
                                isSameType = true;
                                break;
                            }
                        }
                    }
                    if (!isSameType && device.sensors !== null && device.sensors.length > 0) {
                        // if it has sensors, it has numerical values as well
                        isSameType = true;
                    }
                }
                else if (!_this.isNumeric && device.actions !== null) {
                    // check for statefull actuators
                    for (var _c = 0, _d = device.actions; _c < _d.length; _c++) {
                        var action = _d[_c];
                        if (!action.valueable) {
                            isSameType = true;
                            break;
                        }
                    }
                }
                if (isSameType) {
                    _this.devicesList.push({ label: device.name, value: device.deviceId });
                }
            }
            // if call on init, set selected device
            if (isInit && _this.currentWidget.deviceEntities !== undefined && _this.currentWidget.deviceEntities[0].deviceId !== undefined
                && _this.currentWidget.deviceEntities[0].deviceId !== '') {
                _this.initSetDevice();
            }
        }, function (err) {
            console.log(err);
        });
    };
    BarChartVisualizationComponent.prototype.calculateAverage = function (list, totalTime) {
        var avg = 0;
        var start;
        var end;
        var entityValue;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var value = list_1[_i];
            if (list.indexOf(value) < (list.length - 1)) {
                start = new Date(value.DateTime);
                end = new Date(list[list.indexOf(value) + 1].DateTime);
                if (value.FloatValue !== null) {
                    entityValue = value.FloatValue;
                }
                else {
                    var vString = value.StringValue;
                    // delete Temperature unit, which is added in Openhab
                    vString = vString.replace(' °C', '');
                    entityValue = Number(vString);
                }
                avg = avg + ((end.getTime() - start.getTime()) / (totalTime * 3600000)) * entityValue;
            }
        }
        return avg;
    };
    BarChartVisualizationComponent.prototype.calculateMinimum = function (list) {
        var min;
        if (list[0].FloatValue !== null) {
            min = list[0].FloatValue;
        }
        else {
            var vString = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            vString = vString.replace(' °C', '');
            min = Number(vString);
        }
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var value = list_2[_i];
            if (value.FloatValue !== null && value.FloatValue < min) {
                min = value.FloatValue;
            }
            else
                var v2String = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            v2String = v2String.replace(' °C', '');
            if (value.StringValue !== null && Number(v2String) < min) {
                min = Number(v2String);
            }
        }
        return min;
    };
    BarChartVisualizationComponent.prototype.calculateMaximum = function (list) {
        var max;
        if (list[0].FloatValue !== null) {
            max = list[0].FloatValue;
        }
        else {
            var vString = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            vString = vString.replace(' °C', '');
            max = Number(vString);
        }
        for (var _i = 0, list_3 = list; _i < list_3.length; _i++) {
            var value = list_3[_i];
            if (value.FloatValue !== null && value.FloatValue > max) {
                max = value.FloatValue;
            }
            else
                var v2String = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            v2String = v2String.replace(' °C', '');
            if (value.StringValue !== null && Number(v2String) > max) {
                max = Number(v2String);
            }
        }
        return max;
    };
    BarChartVisualizationComponent.prototype.calculateStateDistribution = function (list, states, totalTime) {
    };
    // Because Primeng is stupid and can only use string variables in radiobuttons, we have to set the boolean variables ourselves.
    BarChartVisualizationComponent.prototype.setIsMonoVis = function (value) {
        this.isMonoVis = (value === 'true') ? true : false;
        if (this.dropdownList.length > 1) {
            this.dropdownList = [this.dropdownList[0]];
        }
    };
    BarChartVisualizationComponent.prototype.setIsNumeric = function (value) {
        if (value === 'true') {
            this.isNumeric = true;
        }
        else {
            this.isNumeric = false;
        }
        // change dropdowns
        this.devicesList = [];
        this.multidevicesList = [];
        this.fillDevicesList(false);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], BarChartVisualizationComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_barchartwidget__WEBPACK_IMPORTED_MODULE_7__["BarChartWidget"])
    ], BarChartVisualizationComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BarChartVisualizationComponent.prototype, "resizeFont", void 0);
    BarChartVisualizationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'bar-chart-visualization',
            template: __webpack_require__(/*! ./bar-chart-visualization.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.html"),
            styles: [__webpack_require__(/*! ./bar-chart-visualization.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_5__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__["VisualManagerService"]])
    ], BarChartVisualizationComponent);
    return BarChartVisualizationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.css":
/*!*************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.css ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: 95% !important;\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.html":
/*!**************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.html ***!
  \**************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Bubble Chart Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input Data</h3>\r\n    </div>\r\n    <!--div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Location: </div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"locationsList\"\r\n                  [filter]=\"true\" [(ngModel)]=\"this.selectedLocation\"\r\n                  [style]=\"{'min-width':'200px'}\" (onChange)=\"setDeviceList(this.selectedLocation)\" placeholder=\"Select a distribution\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div-->\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\"></div>\r\n      <div class=\"ui-g-2 grid-elem\">to</div>\r\n      <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <p-tabMenu #menuItems [model]=\"bubbleProperties\" [activeItem]=\"activeProperty\" (click)=\"activateBubbleProperty()\"></p-tabMenu>\r\n    <div [ngSwitch]=\"activeProperty.label\">\r\n      <div *ngSwitchCase=\"'X axis'\">\r\n        <div class=\"ui-g\">\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.selectedX.label\" placeholder=\"Select a name for the x axis\" style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Sensor type:</div>\r\n            <p-dropdown appendTo=\"body\" [options]=\"deviceTypeList\"\r\n                        [(ngModel)]=\"this.selectedX.type\" [group]=\"true\"\r\n                        [style]=\"{'min-width':'200px'}\" placeholder=\"Select a device type\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Calculation:</div>\r\n            <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a calculation type'\"\r\n                        [options]=\"calculationList\" [(ngModel)]=\"this.selectedX.calculation\"\r\n                        [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n            </p-dropdown>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngSwitchCase=\"'Y axis'\">\r\n        <div class=\"ui-g\">\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.selectedY.label\" placeholder=\"Select a name for the y axis\" style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Sensor type:</div>\r\n            <p-dropdown appendTo=\"body\" [options]=\"deviceTypeList\"\r\n                        [(ngModel)]=\"this.selectedY.type\" [group]=\"true\"\r\n                        [style]=\"{'min-width':'200px'}\" placeholder=\"Select a device type\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Calculation:</div>\r\n            <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a calculation type'\"\r\n                        [options]=\"calculationList\" [(ngModel)]=\"this.selectedY.calculation\"\r\n                        [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n            </p-dropdown>\r\n            <div class=\"dropdown\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngSwitchCase=\"'Bubble radius'\">\r\n        <div class=\"ui-g\">\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.selectedR.label\" placeholder=\"Select a name for the radius\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Sensor type:</div>\r\n            <p-dropdown appendTo=\"body\" [options]=\"deviceTypeList\"\r\n                        [(ngModel)]=\"this.selectedR.type\" [group]=\"true\"\r\n                        [style]=\"{'min-width':'200px'}\" placeholder=\"Select a device type\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Calculation:</div>\r\n            <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a calculation type'\"\r\n                        [options]=\"calculationList\" [(ngModel)]=\"this.selectedR.calculation\"\r\n                        [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n            </p-dropdown>\r\n            <div class=\"dropdown\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div *ngSwitchDefault>...</div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n<div style=\"text-align: center;\">\r\n  <p-message *ngIf=\"isEmpty\" severity=\"info\" text=\"You selected device entities without historical data.\"></p-message>\r\n</div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.ts":
/*!************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.ts ***!
  \************************************************************************************************************************************************/
/*! exports provided: BubbleChartVisualizationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BubbleChartVisualizationComponent", function() { return BubbleChartVisualizationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _models_frontend_bubblechartwidget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../models/frontend/bubblechartwidget */ "./src/app/models/frontend/bubblechartwidget.ts");
/* harmony import */ var _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../models/frontend/bubbleChartDeviceEntity */ "./src/app/models/frontend/bubbleChartDeviceEntity.ts");
/* harmony import */ var rxjs_index__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs/index */ "./node_modules/rxjs/index.js");
/* harmony import */ var rxjs_index__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(rxjs_index__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};












/**
 * @author Janina Hüther
 * This component processes a {@link WidgetType#barChartVisualization} Widget. This type of widget is to display
 * values of an entity in a bubble chart. That means it requests data e.g. get data of device x from 02.08.2018 - 03.08.2018
 * from the backend. It uses the {@link BubbleChartWidget} model to represent a widget.
 */
var BubbleChartVisualizationComponent = /** @class */ (function () {
    function BubbleChartVisualizationComponent(dataService, databaseService, devicemanager, visualmanager, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.router = router;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        // non numerical data's type of calculation
        this.calculationType = _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg;
        this.devicesList = [];
        this.sensorList = [];
        this.calculationList = [{ label: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg, value: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg },
            { label: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min, value: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min }, { label: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max, value: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max }];
        this.deviceTypeList = [];
        this.displaySettings = false;
        this.representations = [];
        this.dropdownList = [];
    }
    BubbleChartVisualizationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.isEmpty = false;
        this.devicesList = [];
        this.sensorList = [];
        this.deviceTypeList = [];
        this.bubbleProperties = [
            { label: 'X axis' },
            { label: 'Y axis' },
            { label: 'Bubble radius' }
        ];
        this.activeProperty = this.bubbleProperties[0];
        this.chartType = 'bubble';
        this.selectedX = { label: 'x axis', type: '', calculation: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg };
        this.selectedY = { label: 'y axis', type: '', calculation: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg };
        this.selectedR = { label: 'bubble radius', type: '', calculation: _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg };
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        if (this.currentWidget.startDate !== undefined && this.currentWidget.endDate !== undefined) {
            this.selectedStart = new Date(this.currentWidget.startDate);
            this.selectedEnd = new Date(this.currentWidget.endDate);
        }
        else {
            this.selectedStart = new Date(2019, 1, 5, 10, 55, 22, 0);
            this.selectedEnd = new Date(2019, 1, 15, 10, 55, 22, 0);
        }
        //init devicetypelist
        this.devicemanager.getAllSensorTypes(this.user.id, this.project.id).subscribe(function (result) {
            var sensorItems = result.types.map(function (elem) {
                return { label: elem.type, value: elem.type };
            });
            _this.deviceTypeList = [{ label: 'Types of sensors', value: 'sensorType', items: sensorItems }];
            _this.devicemanager.getAllActuatorTypes(_this.user.id, _this.project.id).subscribe(function (result2) {
                var actuatorItems = result2.map(function (elem) {
                    return { label: elem, value: elem };
                });
                var deviceTypelist2 = _this.deviceTypeList.concat({ label: 'Types of actuators', value: 'actuatorType', items: actuatorItems });
                _this.deviceTypeList = deviceTypelist2;
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log(err);
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        //init locationlist
        this.devicemanager.getAllLocations(this.user.id, this.project.id)
            .subscribe(function (locations) {
            // go through all of the location-based list
            for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {
                var loc = locations_1[_i];
                _this.locationsList.push({ label: loc.name, value: loc.name });
            }
            console.log("all locations: ", _this.locationsList);
        }, function (err) {
            console.log(err);
        });
        // init chart attributes and chart object
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            scales: {
                xAxes: [{
                        ticks: {
                            beginAtZero: true,
                            max: undefined
                        },
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'x'
                        },
                    }],
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            max: undefined
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'y'
                        }
                    }]
            },
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_2__["Chart"](this.ctx.nativeElement, {
            type: this.chartType,
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
    };
    // generates a timestamp in ISO standard as defined for the backend
    BubbleChartVisualizationComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    BubbleChartVisualizationComponent.prototype.showChart = function (chart) {
        var _this = this;
        // set chart options
        chart.data.datasets = [];
        chart.data.labels = [];
        var statedata = { 'deviceId': '', 'actionId': '', 'states': [{ number: 0, description: '', value: 0 }] };
        //let color = [];
        var cIndex = 0;
        var observables = [];
        for (var _i = 0, _a = this.locationsList; _i < _a.length; _i++) {
            var elem = _a[_i];
            observables.push(this.devicemanager.getDevicesByLocation(elem.value, this.user.id, this.project.id));
        }
        var observeable = Object(rxjs_index__WEBPACK_IMPORTED_MODULE_10__["forkJoin"])(observables);
        observeable.subscribe(function (devices) {
            // All observables in `observables` array have resolved and `dataArray` is an array of result of each observable
            console.log("all devices from locations: ", devices);
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var elem = devices_1[_i];
                // sortiere alle devices nach locations ( ist gemacht in "devices"
                // sortiere alle
                if (elem.Values.length > 0) {
                    var valueCount = 0;
                    var dateStart = new Date(elem.Values[0].DateTime);
                    var dateEnd = new Date(elem.Values[elem.Values.length - 1].DateTime);
                    // we have to divide the total time by 3600000 to get hours instead of milliseconds
                    var timeTotal = (dateEnd.getTime() - dateStart.getTime()) / 3600000;
                    var value = 0;
                    switch (_this.calculationType) {
                        case _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg:
                            value = _this.calculateAverage(elem.Values, timeTotal);
                            break;
                        case _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max:
                            value = _this.calculateMaximum(elem.Values);
                            break;
                        case _models_frontend_bubbleChartDeviceEntity__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min:
                        default:
                            value = _this.calculateMinimum(elem.Values);
                            break;
                    }
                    // add sensor data to the chartData.
                    //  chart.data.labels.push(this.deviceEntities[devices.indexOf(elem)].deviceId);
                    chart.data.datasets[0].data.push(value);
                    console.log('chartData: ', chart.data);
                }
            }
            chart.update();
            _this.setChartColors(_this.currentPalette);
        }, function (err) {
            console.log(err);
        });
    };
    BubbleChartVisualizationComponent.prototype.activateBubbleProperty = function () {
        this.activeProperty = this.menu['activeItem'];
    };
    // events
    BubbleChartVisualizationComponent.prototype.chartClicked = function (e) {
        console.log(e);
    };
    BubbleChartVisualizationComponent.prototype.chartHovered = function (e) {
        console.log(e);
    };
    BubbleChartVisualizationComponent.prototype.applySettings = function () {
        this.isEmpty = false;
        this.displaySettings = false;
        //updating data from dropdowns in current Widget
        this.currentWidget.deviceEntities = [];
        // updating data from dropdowns in current Widget
        this.currentWidget.chartType = this.chartType;
        this.currentWidget.endDate = this.selectedEnd;
        this.currentWidget.startDate = this.selectedStart;
        this.currentWidget.x = this.selectedX;
        this.currentWidget.y = this.selectedY;
        this.currentWidget.r = this.selectedR;
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.startDate, 'startDate');
        this.saveInDatabase(this.currentWidget.endDate, 'endDate');
        this.saveInDatabase(this.currentWidget.x, 'x');
        this.saveInDatabase(this.currentWidget.y, 'y');
        this.saveInDatabase(this.currentWidget.r, 'r');
        // get data with new settings
        this.showChart(this.myChart);
    };
    BubbleChartVisualizationComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        // this.chartType = this.currentWidget.chartType;
        this.selectedEnd = this.currentWidget.endDate;
        this.selectedStart = this.currentWidget.startDate;
        // this.selectedLocation = this.currentWidget.locations[0];
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    BubbleChartVisualizationComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_7__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    // to fill the devices List of the location with the selected parameter sensors
    BubbleChartVisualizationComponent.prototype.fillDevicesList = function (isInit) {
        // reset list:
        this.devicesList = [];
        // get all devices
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_2 = devices; _i < devices_2.length; _i++) {
                var device = devices_2[_i];
                var isSameType = false;
                // only push device if we have stateless data
                if (device.actions !== null) {
                    //check if it has stateless actuators
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        if (action.valueable) {
                            isSameType = true;
                            break;
                        }
                    }
                }
                if (!isSameType && device.sensors !== null && device.sensors.length > 0) {
                    // if it has sensors, it has numerical values as well
                    isSameType = true;
                }
            }
            // if call on init, set selected device
            /*if (isInit && this.currentWidget.deviceEntities !== undefined && this.currentWidget.deviceEntities[0].deviceId !== undefined
              && this.currentWidget.deviceEntities[0].deviceId !== '') {
              this.initSetDevice();
            }*/
        }, function (err) {
            console.log(err);
        });
    };
    BubbleChartVisualizationComponent.prototype.calculateAverage = function (list, totalTime) {
        var avg = 0;
        var start;
        var end;
        var entityValue;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var value = list_1[_i];
            if (list.indexOf(value) < (list.length - 1)) {
                start = new Date(value.DateTime);
                end = new Date(list[list.indexOf(value) + 1].DateTime);
                entityValue = (value.FloatValue !== null) ? value.FloatValue : Number(value.StringValue);
                avg = avg + ((end.getTime() - start.getTime()) / (totalTime * 3600000)) * entityValue;
            }
        }
        return avg;
    };
    BubbleChartVisualizationComponent.prototype.calculateMinimum = function (list) {
        var min = (list[0].FloatValue !== null) ? list[0].FloatValue : Number(list[0].StringValue);
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var value = list_2[_i];
            if (value.FloatValue !== null && value.FloatValue < min) {
                min = value.FloatValue;
            }
            else if (value.StringValue !== null && Number(value.StringValue) < min) {
                min = Number(value.StringValue);
            }
        }
        return min;
    };
    BubbleChartVisualizationComponent.prototype.calculateMaximum = function (list) {
        var max = (list[0].FloatValue !== null) ? list[0].FloatValue : Number(list[0].StringValue);
        for (var _i = 0, list_3 = list; _i < list_3.length; _i++) {
            var value = list_3[_i];
            if (value.FloatValue !== null && value.FloatValue > max) {
                max = value.FloatValue;
            }
            else if (value.StringValue !== null && Number(value.StringValue) > max) {
                max = Number(value.StringValue);
            }
        }
        return max;
    };
    // when changing the location, the devicelist has to be renewed
    BubbleChartVisualizationComponent.prototype.setDeviceList = function (location) {
        // get all devices
        this.devicemanager.getDevicesByLocation(location, this.user.id, this.project.id)
            .subscribe(function (devices) {
            var newDeviceEntities = [];
            // go through all devices of the location-based list
            for (var _i = 0, devices_3 = devices; _i < devices_3.length; _i++) {
                var device = devices_3[_i];
                // go through all devices of the type-based list and filter the ones with the selected location
                /* for (const device2 of this.deviceEntities) {
                   if (device.deviceId === device2.deviceId) {
                     newDeviceEntities.push(device2);
                     break;
                   }
                 }*/
            }
            // this.deviceEntities = newDeviceEntities;
            //console.log("endresult device list: ", this.deviceEntities);
        }, function (err) {
            console.log(err);
        });
    };
    // when changing the device type, the devicelist and the locationlist has to be cleared and renewed
    BubbleChartVisualizationComponent.prototype.setLocationList = function (entityType) {
        var _this = this;
        // reset list:
        //this.deviceEntities = [];
        this.locationsList = [];
        // get all devices
        this.devicemanager.getDevicesByEntityType(entityType, this.user.id, this.project.id)
            .subscribe(function (devices) {
            var contains = false;
            // go through all devices
            for (var _i = 0, devices_4 = devices; _i < devices_4.length; _i++) {
                var device = devices_4[_i];
                // go through locationlist
                for (var _a = 0, _b = _this.locationsList; _a < _b.length; _a++) {
                    var loc = _b[_a];
                    // if location of this device is already in list, set boolean variable
                    if (loc['value'] === device.location) {
                        contains = true;
                        break;
                    }
                }
                // if this location is not yet in the list, add it to the list
                if (contains === false) {
                    _this.locationsList.push({ label: device.location, value: device.location });
                }
                // go through all sensors and actuators and add the sensors/actuators with the selected device type to the deviceEntities List
                for (var _c = 0, _d = device.sensors; _c < _d.length; _c++) {
                    var sensor = _d[_c];
                    // if (sensor.deviceType === this.selectedDeviceType){
                    // this.deviceEntities.push({deviceId: device.deviceId, entityId: sensor.id});
                    //}
                }
                for (var _e = 0, _f = device.actions; _e < _f.length; _e++) {
                    var action = _f[_e];
                    //if (action.deviceType === this.selectedDeviceType){
                    // this.deviceEntities.push({deviceId: device.deviceId, entityId: action.id});
                    //}
                }
                //console.log("device List after choosing Type: ", this.deviceEntities);
            }
        }, function (err) {
            console.log(err);
        });
    };
    BubbleChartVisualizationComponent.prototype.setChartColors = function (palette) {
        console.log("palette: ", palette);
        if (!palette)
            palette = this.currentPalette;
        this.currentPalette = palette;
        /*Gradients
          The keys are percentage and the values are the color in a rgba format.
          You can have as many "color stops" (%) as you like.
          0% and 100% is not optional.*/
        var gradient;
        switch (palette) {
            case 'cool':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [220, 237, 200, 1],
                    45: [66, 179, 213, 1],
                    65: [26, 39, 62, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'warm':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [254, 235, 101, 1],
                    45: [228, 82, 27, 1],
                    65: [77, 52, 47, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'neon':
            default:
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [255, 236, 179, 1],
                    45: [232, 82, 133, 1],
                    65: [106, 27, 154, 1],
                    100: [0, 0, 0, 1]
                };
                break;
        }
        //Get a sorted array of the gradient keys
        var gradientKeys = Object.keys(gradient);
        gradientKeys.sort(function (a, b) {
            return +a - +b;
        });
        //Find datasets and length
        var chartType = this.currentWidget.chartType;
        switch (chartType) {
            case "pie":
            case "doughnut":
                var datasets = this.myChart.config.data.datasets[0];
                var setsCount = datasets.data.length;
                break;
            case "bar":
            case "line":
                var datasets = this.myChart.config.data.datasets;
                var setsCount = datasets.length;
                break;
        }
        //Calculate colors
        var chartColors = [];
        for (var i = 0; i < setsCount; i++) {
            var gradientIndex = (i + 1) * (100 / (setsCount + 1)); //Find where to get a color from the gradient
            for (var j = 0; j < gradientKeys.length; j++) {
                var gradientKey = gradientKeys[j];
                if (gradientIndex === +gradientKey) { //Exact match with a gradient key - just get that color
                    chartColors[i] = 'rgba(' + gradient[gradientKey].toString() + ')';
                    break;
                }
                else if (gradientIndex < +gradientKey) { //It's somewhere between this gradient key and the previous
                    var prevKey = gradientKeys[j - 1];
                    var gradientPartIndex = (gradientIndex - Number(prevKey)) / (Number(gradientKey) - Number(prevKey)); //Calculate where
                    var color = [];
                    for (var k = 0; k < 4; k++) { //Loop through Red, Green, Blue and Alpha and calculate the correct color and opacity
                        color[k] = gradient[prevKey][k] - ((gradient[prevKey][k] - gradient[gradientKey][k]) * gradientPartIndex);
                        if (k < 3)
                            color[k] = Math.round(color[k]);
                    }
                    chartColors[i] = 'rgba(' + color.toString() + ')';
                    break;
                }
            }
        }
        //Copy colors to the chart
        for (i = 0; i < setsCount; i++) {
            switch (chartType) {
                case "pie":
                case "doughnut":
                    if (!datasets.backgroundColor)
                        datasets.backgroundColor = [];
                    datasets.backgroundColor[i] = chartColors[i];
                    if (!datasets.borderColor)
                        datasets.borderColor = [];
                    datasets.borderColor[i] = "rgba(255,255,255,1)";
                    break;
                case "bar":
                    datasets[i].backgroundColor = chartColors[i];
                    datasets[i].borderColor = "rgba(255,255,255,0)";
                    break;
                case "line":
                    datasets[i].borderColor = chartColors[i];
                    datasets[i].backgroundColor = "rgba(255,255,255,0)";
                    break;
            }
        }
        //Update the chart to show the new colors
        this.myChart.update();
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], BubbleChartVisualizationComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('menuItems'),
        __metadata("design:type", Array)
    ], BubbleChartVisualizationComponent.prototype, "menu", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_bubblechartwidget__WEBPACK_IMPORTED_MODULE_8__["BubbleChartWidget"])
    ], BubbleChartVisualizationComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], BubbleChartVisualizationComponent.prototype, "resizeFont", void 0);
    BubbleChartVisualizationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'bubble-chart-visualization',
            template: __webpack_require__(/*! ./bubble-chart-visualization.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.html"),
            styles: [__webpack_require__(/*! ./bubble-chart-visualization.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_5__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__["VisualManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_11__["Router"]])
    ], BubbleChartVisualizationComponent);
    return BubbleChartVisualizationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.css":
/*!*********************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.css ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n   width: 100%;\r\n   height: 95% !important;\r\n }\r\n\r\n.graph-button {\r\n   position: absolute;\r\n   top: 135px;\r\n   right: 0;\r\n }\r\n\r\n.device-select {\r\n   transition: all 0.5s;\r\n   position: absolute;\r\n   top: 55px;\r\n }\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n.label {\r\n  line-height: 25px;\r\n}\r\n\r\n.grid-elem {\r\n  padding: .2em;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.html":
/*!**********************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.html ***!
  \**********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Line Chart Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Preferences</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Number of sensors:</div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorNumber\" value=\"true\" label=\"one\" [(ngModel)]=\"sensorNumber\" inputId=\"one\" (click)=\"setIsMonoVis('true');\"></p-radioButton></div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"sensorNumber\" value=\"false\" label=\"many\" [(ngModel)]=\"sensorNumber\" inputId=\"many\" (click)=\"setIsMonoVis('false');\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Type of data:</div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"dataType\" value=\"true\" label=\"realtime\" [(ngModel)]=\"dataType\" inputId=\"realtime\" (click)=\"setIsRealtime('true');\"></p-radioButton></div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"dataType\" value=\"false\" label=\"historical\" [(ngModel)]=\"dataType\" inputId=\"historical\" (click)=\"setIsRealtime('false');\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n    <div class=\"ui-g-4 grid-elem\">Data dependency:</div>\r\n    <div class=\"ui-g-4\"><p-radioButton name=\"dataDependency\" value=\"true\" label=\"time-based\" [(ngModel)]=\"dataDependency\" inputId=\"time\" (click)=\"setIsTimeBased('true');\"></p-radioButton></div>\r\n    <div *ngIf=\"!isMonoVis\" class=\"ui-g-4\"><p-radioButton name=\"dataDependency\" value=\"false\" label=\"value-based\" [(ngModel)]=\"dataDependency\" inputId=\"value\" (click)=\"setIsTimeBased('false');\"></p-radioButton></div>\r\n  </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">X axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.xLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Y axes label:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.axesOptions.yLabel\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <div *ngIf=\"isRealtime === true; else historic\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Number of samples:</div>\r\n      <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"this.selectedNumberOfValues\"  style=\"width: 200px; padding-left: 0;\">\r\n    </div>\r\n    <ng-template #historic>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\"></div>\r\n        <div class=\"ui-g-2 grid-elem\">to</div>\r\n        <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n      </div>\r\n    </ng-template>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input Data</h3>\r\n    </div>\r\n    <div *ngIf=\"(!isMonoVis) && (!isTimeBased)\">\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\">Line color:</div>\r\n        <p-colorPicker [(ngModel)]=\"xElem.deviceEntity.color\"></p-colorPicker>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\">Line type:</div>\r\n        <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a line type'\"\r\n                    [options]=\"lineTypeList\" [(ngModel)]=\"xElem.deviceEntity.lineType\"\r\n                    [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n        </p-dropdown>\r\n        <div class=\"dropdown\"></div>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\"></div>\r\n        <p-checkbox [(ngModel)]=\"xElem.deviceEntity.fillArea\" binary=\"true\"></p-checkbox>fill area under line\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <div class=\"ui-g-4 grid-elem\"></div>\r\n        <p-checkbox [(ngModel)]=\"xElem.deviceEntity.showLine\" binary=\"true\"></p-checkbox>connect data points with a line\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <h4 style=\"margin:0;\">X Axis</h4>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        Device:\r\n        <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(xElem.deviceEntity.deviceId)\"\r\n                    [filter]=\"true\" [(ngModel)]=\"xElem.deviceEntity.deviceId\"\r\n                    [style]=\"{'width':'200px'}\" placeholder=\"Select a device\">\r\n        </p-dropdown>\r\n\r\n        Sensor:\r\n        <p-dropdown appendTo=\"body\" [options]=\"xElem.sensorList\" [filter]=\"true\" [(ngModel)]=\"xElem.deviceEntity.entityId\"\r\n                    [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\">\r\n        </p-dropdown>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        <h4 style=\"margin:0;\">Y Axis</h4>\r\n      </div>\r\n      <div class=\"ui-g-12 grid-elem\">\r\n        Device:\r\n        <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(yElem.deviceEntity.deviceId)\"\r\n                    [filter]=\"true\" [(ngModel)]=\"yElem.deviceEntity.deviceId\"\r\n                    [style]=\"{'width':'200px'}\" placeholder=\"Select a device\">\r\n        </p-dropdown>\r\n\r\n        Sensor:\r\n        <p-dropdown appendTo=\"body\" [options]=\"yElem.sensorList\" [filter]=\"true\" [(ngModel)]=\"yElem.deviceEntity.entityId\"\r\n                    [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\">\r\n        </p-dropdown>\r\n      </div>\r\n    </div>\r\n\r\n    <p-accordion *ngIf=\"isMonoVis || isTimeBased\" [multiple]=\"true\">\r\n      <div *ngFor=\"let group of dropdownList\" class=\"ui-g-12 grid-elem\">\r\n        <p-accordionTab  style=\"align-items: center; overflow: auto; width: 100%;\">\r\n          <p-header>\r\n            Device:\r\n            <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(group.deviceEntity.deviceId)\"\r\n                        [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.deviceId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            Sensor:\r\n            <p-dropdown appendTo=\"body\" [options]=\"group.sensorList\" [filter]=\"true\" [(ngModel)]=\"group.deviceEntity.entityId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            <button *ngIf=\"!isMonoVis\" style = \"margin-left: 10px;\" type=\"button\" pButton icon=\"fa fa-minus\" (click)=\"$event.stopPropagation();$event.preventDefault();deleteDropdowns(group.deviceEntity);\"></button>\r\n\r\n          </p-header>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.label\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data unit:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"group.deviceEntity.unit\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Line color:</div>\r\n            <p-colorPicker [(ngModel)]=\"group.deviceEntity.color\"></p-colorPicker>\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Line type:</div>\r\n            <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a line type'\"\r\n                        [options]=\"lineTypeList\" [(ngModel)]=\"group.deviceEntity.lineType\"\r\n                        [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n            </p-dropdown>\r\n            <div class=\"dropdown\"></div>\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\"></div>\r\n            <p-checkbox [(ngModel)]=\"group.deviceEntity.fillArea\" binary=\"true\"></p-checkbox>fill area under line\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\"></div>\r\n            <p-checkbox [(ngModel)]=\"group.deviceEntity.showLine\" binary=\"true\"></p-checkbox>connect data points with a line\r\n          </div>\r\n        </p-accordionTab>\r\n      </div>\r\n    </p-accordion>\r\n\r\n    <div class=\"ui-g-12\" *ngIf=\"!isMonoVis && isTimeBased\">\r\n      <button type=\"button\" pButton icon=\"fa fa-plus\" (click)=\"addNewDropdowns()\"></button>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;isAllowed=false;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.ts":
/*!********************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.ts ***!
  \********************************************************************************************************************************************/
/*! exports provided: LineChartVisualizationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LineChartVisualizationComponent", function() { return LineChartVisualizationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../models/frontend/linechartwidget */ "./src/app/models/frontend/linechartwidget.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#realtimeChartVisualization} Widget. This type of widget is to display
 * realtime values of an entity in a chart. That means it requests data e.g. get live data of device x
 * from the backend. It uses the {@link RealTimeChartWidget} model to represent a widget.
 */
var LineChartVisualizationComponent = /** @class */ (function () {
    function LineChartVisualizationComponent(dataService, databaseService, devicemanager, visualmanager) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.devicesList = [];
        this.sensorList = [];
        this.lineTypeList = [{ label: 'solid', value: 'solid' }, { label: 'dotted', value: 'dotted' }];
        this.axesOptions = { xLabel: '', yLabel: '', xLabelVisible: true, yLabelVisible: true };
        this.displaySettings = false;
        this.duration = 'P5D';
        this.timeFormat = "DD/MM/YYYY HH:mm:ss";
        this.representations = [];
        this.dropdownList = [{ deviceEntity: { deviceId: '', entityId: '', lineType: 'solid', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: '' }, sensorList: [] }];
        this.xElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'x' }, sensorList: [] };
        this.yElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'y' }, sensorList: [] };
    }
    LineChartVisualizationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.devicesList = [];
        this.sensorList = [];
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.initDeviceDropdown();
        this.representations = [
            { label: 'Linegraph', value: 'line' },
            { label: 'Doughnut', value: 'doughnut' },
            { label: 'Barchart', value: 'bar' }
        ];
        if (this.currentWidget.axesOptions !== undefined) {
            this.axesOptions = this.currentWidget.axesOptions;
        }
        // init chart attributes and chart object
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            scales: {
                xAxes: [{
                        display: true,
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        },
                    }],
                yAxes: [{
                        ticks: {
                            beginAtZero: true,
                        },
                        scaleLabel: {
                            display: true,
                            labelString: ''
                        }
                    }]
            },
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_6__["Chart"](this.ctx.nativeElement, {
            type: "line",
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
        // init isTimebased, isRealtime and isMonoVIS and their string variables
        this.initRepresentationVariables();
        // check if chartType was set before
        this.myChart.type = (this.isTimeBased) ? "line" : "scatter";
        // check if number of values was set before
        if (this.isRealtime && this.currentWidget.numberOfValues !== undefined) {
            this.selectedNumberOfValues = this.currentWidget.numberOfValues;
        }
        else if ((!this.isRealtime) && this.currentWidget.startDate !== undefined && this.currentWidget.endDate !== undefined) {
            this.selectedStart = new Date(this.currentWidget.startDate);
            this.selectedEnd = new Date(this.currentWidget.endDate);
            console.log(this.selectedStart);
        }
        else if (!this.isRealtime) {
            this.selectedStart = new Date(2019, 0, 15, 10, 55, 22, 0);
            this.selectedEnd = new Date(this.generateIsoDateTime(this.selectedStart));
        }
        // if new data is available, the chart gets updated
        this.dataService.refreshChartNow
            .subscribe(function (result) {
            if (_this.isRealtime) {
                var isChanged = false;
                if (_this.isTimeBased) {
                    if (_this.dropdownList[0].deviceEntity.deviceId !== '' && _this.myChart !== undefined && _this.myChart.data !== undefined && _this.myChart.data.datasets !== undefined
                        && _this.myChart.data.datasets[0] !== undefined) {
                        // go through all selected (visualized) Devices
                        for (var _i = 0, _a = _this.dropdownList; _i < _a.length; _i++) {
                            var selected = _a[_i];
                            if (selected.deviceEntity.deviceId === result.deviceId &&
                                selected.deviceEntity.entityId === result.entityId) {
                                isChanged = true;
                                // set new values in data
                                _this.addData(_this.myChart, selected.deviceEntity.label + " in " + selected.deviceEntity.unit, result.label, result.value);
                                // if there are more values than we want to have
                                console.log(_this.myChart.data.datasets[0].data);
                                while (_this.myChart.data.datasets[0].data.length > _this.selectedNumberOfValues) {
                                    // delete the oldest ones and the labels as well
                                    _this.removeData(_this.myChart);
                                }
                            }
                        }
                        console.log("chartData REFRESH NOW: ", _this.myChart.data.datasets);
                    }
                }
                else if (_this.xElem.deviceEntity.deviceId !== '' && _this.yElem.deviceEntity.deviceId !== '') {
                    // value-value based
                    // if change in xElem:
                    if (_this.xElem.deviceEntity.deviceId === result.deviceId &&
                        _this.xElem.deviceEntity.entityId === result.entityId) {
                        isChanged = true;
                        // last yValue:
                        var lastY = _this.myChart.data.datasets[0].data[_this.myChart.data.datasets[0].data.length - 1].y;
                        // set new values in data
                        _this.myChart.data.datasets[0].data.push({ x: result.value, y: lastY });
                        _this.myChart.data.labels.push(result.value);
                    }
                    else if (_this.yElem.deviceEntity.deviceId === result.deviceId &&
                        _this.yElem.deviceEntity.entityId === result.entityId) {
                        // if change in xElem:
                        isChanged = true;
                        // last yValue:
                        var lastX = _this.myChart.data.datasets[0].data[_this.myChart.data.datasets[0].data.length - 1].x;
                        // set new values in data
                        _this.myChart.data.datasets[0].data.push({ x: lastX, y: result.value });
                        _this.myChart.data.labels.push(lastX);
                    }
                    // if there are more values than we want to have
                    console.log("dataaa: ", _this.myChart.data.datasets[0].data);
                    while (_this.myChart.data.datasets[0].data.length > _this.selectedNumberOfValues) {
                        // delete the oldest ones and the labels as well
                        _this.removeData(_this.myChart);
                    }
                    console.log("chartData REFRESHNOW: ", _this.myChart.data.datasets);
                }
            }
        });
    };
    LineChartVisualizationComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    LineChartVisualizationComponent.prototype.initDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
            if (_this.currentWidget.deviceEntities[0].deviceId !== undefined && _this.currentWidget.deviceEntities[0].deviceId !== '') {
                _this.initSetDevice();
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method fills the device dropdown with all devices from the backend. Therefore it describes from the devicemanager service
     */
    LineChartVisualizationComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (data) {
            for (var _i = 0, data_2 = data; _i < data_2.length; _i++) {
                var device = data_2[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
        }, function (err) {
            console.log(err);
        });
    };
    LineChartVisualizationComponent.prototype.initSetDevice = function () {
        var _this = this;
        this.dropdownList = [];
        // create a list with all init selected devices
        var selectedDevices = [];
        var isIncluded = false;
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var widgetElem = _a[_i];
            // check if device is in list
            for (var _b = 0, selectedDevices_1 = selectedDevices; _b < selectedDevices_1.length; _b++) {
                var selectedElem = selectedDevices_1[_b];
                if (selectedElem === widgetElem.deviceId) {
                    isIncluded = true;
                    break;
                }
            }
            if (!isIncluded) {
                selectedDevices.push(widgetElem.deviceId);
            }
        }
        // fill lists for dropdowns
        var numberOfSavedEntities = this.currentWidget.deviceEntities.length;
        // go over all selected devices
        for (var _c = 0, selectedDevices_2 = selectedDevices; _c < selectedDevices_2.length; _c++) {
            var widgetElem = selectedDevices_2[_c];
            var _loop_1 = function (deviceElem) {
                if (deviceElem.value === widgetElem) {
                    // here we have the right device id
                    // get list of all entities of the device
                    var sensorList_1 = [];
                    this_1.devicemanager.getDeviceById(deviceElem.value, this_1.user.id, this_1.project.id)
                        .subscribe(function (device) {
                        if (device.sensors !== null) {
                            for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                                var sensor = _a[_i];
                                sensorList_1.push({ label: sensor.name, value: sensor.id });
                            }
                        }
                        if (device.actions !== null) {
                            for (var _b = 0, _c = device.actions; _b < _c.length; _b++) {
                                var action = _c[_b];
                                sensorList_1.push({ label: action.name, value: action.id });
                            }
                        }
                        // looking for the right entitiy id
                        for (var _d = 0, sensorList_2 = sensorList_1; _d < sensorList_2.length; _d++) {
                            var sensorElem = sensorList_2[_d];
                            for (var _e = 0, _f = _this.currentWidget.deviceEntities; _e < _f.length; _e++) {
                                var elem = _f[_e];
                                if (sensorElem.value === elem.entityId) {
                                    // here we have the right entity id
                                    // set selected device, list and sensor in dropdownlist
                                    _this.dropdownList.push({
                                        deviceEntity: { deviceId: deviceElem.value, entityId: sensorElem.value, lineType: elem.lineType, fillArea: elem.fillArea,
                                            showLine: elem.showLine, color: elem.color, label: elem.label, unit: elem.unit, axis: elem.axis },
                                        sensorList: sensorList_1
                                    });
                                    if (!_this.currentWidget.isMonoVis && !_this.isTimeBased) {
                                        if (elem.axis === "x") {
                                            _this.xElem = { deviceEntity: { deviceId: deviceElem.value, entityId: sensorElem.value,
                                                    lineType: elem.lineType, fillArea: elem.fillArea, showLine: elem.showLine, color: elem.color, label: elem.label, unit: elem.unit, axis: elem.axis },
                                                sensorList: sensorList_1 };
                                        }
                                        else if (elem.axis === "y") {
                                            _this.yElem = { deviceEntity: { deviceId: deviceElem.value, entityId: sensorElem.value,
                                                    lineType: elem.lineType, fillArea: elem.fillArea, showLine: elem.showLine, color: elem.color, label: elem.label, unit: elem.unit, axis: elem.axis },
                                                sensorList: sensorList_1 };
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        // check dropdownlist for dummydata
                        for (var _g = 0, _h = _this.dropdownList; _g < _h.length; _g++) {
                            var data = _h[_g];
                            if (data['deviceId'] === '') {
                                console.log('Dummy');
                            }
                        }
                        //create and fill chartData from selected sensors if all data is in dropdownList (last finished request)
                        if (_this.dropdownList.length === numberOfSavedEntities) {
                            if (_this.isRealtime) {
                                console.log("initRTData");
                                _this.initRealtimeData(_this.myChart);
                            }
                            else {
                                console.log("showChart");
                                _this.showChart(_this.myChart);
                            }
                        }
                    }, function (error) {
                        console.log('Error requesting devices from backend ', error);
                    });
                }
            };
            var this_1 = this;
            // go over all existing devices
            for (var _d = 0, _e = this.devicesList; _d < _e.length; _d++) {
                var deviceElem = _e[_d];
                _loop_1(deviceElem);
            }
        }
    };
    /**
     * This method pulls the realtime data from the backend once to get the first values for the chart
     * when widget is starting or input parameter are changing
     */
    LineChartVisualizationComponent.prototype.initRealtimeData = function (chart) {
        var _this = this;
        // set chart options
        console.log("initRT");
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        chart.labels = [];
        chart.data.datasets = [];
        var start = new Date();
        var cIndex = 0;
        if (this.isTimeBased) {
            // go through all selected sensors
            console.log("drodpownlist: ", this.dropdownList);
            var _loop_2 = function (selected) {
                // set saved sensor settings
                var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                    data: [], borderColor: selected.deviceEntity.color, backgroundColor: selected.deviceEntity.color,
                    borderDash: (selected.deviceEntity.lineType === 'solid') ? [] : [5, 5], fill: selected.deviceEntity.fillArea, showLine: selected.deviceEntity.showLine };
                // get newest data value from the sensor
                this_2.visualmanager.getNowData(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_2.user.id, this_2.project.id)
                    .subscribe(function (sensorDataModel) {
                    var value = sensorDataModel.Values[0];
                    console.log("value: ", value);
                    // fill sensor data field with one value
                    if (value.FloatValue != null) {
                        ctxData.data.push({ x: start, y: value.FloatValue });
                    }
                    else if (value.StringValue != null) {
                        var yString = value.StringValue;
                        // delete Temperature unit, which is added in Openhab
                        yString = yString.replace(' °C', '');
                        ctxData.data.push({ x: start, y: Number(yString) });
                    }
                    // add sensor data to the chartData.
                    chart.data.datasets.push(ctxData);
                    // not needed anymore:
                    /*if (chart.data.datasets[0]['label'] === '') {
                      chart.data.dataset.shift();
                    }*/
                    chart.update();
                    console.log("chartINIT Data: ", chart.data.datasets);
                }, function (err) {
                    console.log('Error requesting data from backend: ', err);
                });
            };
            var this_2 = this;
            for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
                var selected = _a[_i];
                _loop_2(selected);
            }
        }
        else {
            // value: value based
            var ctxData_1 = { label: this.xElem.deviceEntity.label + ' in ' + this.xElem.deviceEntity.unit,
                data: [], borderColor: this.xElem.deviceEntity.color, backgroundColor: this.xElem.deviceEntity.color, fill: this.xElem.deviceEntity.fillArea, showLine: this.xElem.deviceEntity.showLine,
                borderDash: (this.xElem.deviceEntity.lineType === 'solid') ? [] : [5, 5] };
            var xData_1 = [{ DateTime: "", value: undefined }];
            // fill data field
            this.visualmanager.getNowData(this.xElem.deviceEntity.deviceId, this.xElem.deviceEntity.entityId, this.user.id, this.project.id)
                .subscribe(function (sensorDataModel) {
                var xValue;
                var value = sensorDataModel.Values[0];
                if (value.FloatValue != null) {
                    xValue = value.FloatValue;
                }
                else if (value.StringValue != null) {
                    var xString = value.StringValue;
                    // delete Temperature unit, which is added in Openhab
                    xString = xString.replace(' °C', '');
                    xValue = Number(xString);
                }
                xData_1.shift();
                // now get yElem Data
                _this.visualmanager.getNowData(_this.yElem.deviceEntity.deviceId, _this.yElem.deviceEntity.entityId, _this.user.id, _this.project.id)
                    .subscribe(function (sensorDataModelY) {
                    var yValue = sensorDataModelY.Values[0];
                    if (yValue.FloatValue != null) {
                        ctxData_1.data.push({ x: xValue, y: yValue.FloatValue });
                    }
                    else if (yValue.StringValue != null) {
                        // delete Temperature unit, which is added in Openhab
                        yValue.StringValue = yValue.StringValue.replace(' °C', '');
                        ctxData_1.data.push({ x: xValue, y: Number(yValue.StringValue) });
                    }
                    //chart.data.labels.push(sensorDataModelY.Values[0].DateTime);
                    // add sensor data to the chartData.
                    console.log("data: ", ctxData_1.data);
                    chart.data.datasets.push(ctxData_1);
                    // set chart type
                    _this.myChart.type = (_this.isTimeBased) ? "line" : "scatter";
                    chart.update();
                });
            }, function (err) {
                console.log('Error requesting historic data from backend ', err);
            });
        }
    };
    // realtime data chart fill method // only pulls new data from backend if it is not available in list
    LineChartVisualizationComponent.prototype.updateRealtimeData = function (chart) {
        var _this = this;
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        var cIndex = 0;
        if (this.isTimeBased) {
            var _loop_3 = function (selected) {
                // set saved sensor settings
                var isAvailable = false;
                var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                    data: [], borderColor: selected.deviceEntity.color, backgroundColor: selected.deviceEntity.color, fill: selected.deviceEntity.fillArea, showLine: selected.deviceEntity.showLine,
                    borderDash: (selected.deviceEntity.lineType === 'solid') ? [] : [5, 5] };
                for (var _i = 0, _a = chart.data.datasets; _i < _a.length; _i++) {
                    var dataset = _a[_i];
                    // check if dataset is in datasets
                    if (dataset.label === ctxData.label) {
                        isAvailable = true;
                        // empty dataset until only one value is left.
                        while (dataset.data.length > 1) {
                            dataset.data.shift();
                        }
                        // updating other attributes
                        dataset.borderColor = selected.deviceEntity.color;
                        dataset.borderDash = (selected.deviceEntity.lineType === 'solid') ? [] : [5, 5];
                        dataset.showLine = selected.deviceEntity.showLine;
                        dataset.fill = selected.deviceEntity.fillArea;
                        break;
                    }
                }
                if (!isAvailable) {
                    // get newest data value from the sensor.
                    this_3.visualmanager.getNowData(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_3.user.id, this_3.project.id)
                        .subscribe(function (sensorDataModel) {
                        var value = sensorDataModel.Values[0];
                        // fill sensor data field with one value
                        if (value.FloatValue != null) {
                            ctxData.data.push({ x: new Date(value.DateTime), y: value.FloatValue });
                        }
                        else if (value.StringValue != null) {
                            var yString = value.StringValue;
                            // delete Temperature unit, which is added in Openhab
                            yString = yString.replace(' °C', '');
                            ctxData.data.push({ x: new Date(value.DateTime), y: Number(yString) });
                        }
                        // one time the label of the data points has to be set if there is no label available
                        if (cIndex === 0 && chart.data.labels.length === 0) {
                            //chart.data.labels.push(value.DateTime);
                            cIndex++;
                        }
                        _this.addDataset(chart, ctxData);
                        console.log("INITchartData: ", _this.myChart.data.datasets);
                        // set chart type
                        _this.myChart.type = (_this.isTimeBased) ? "line" : "scatter";
                    }, function (err) {
                        console.log('Error requesting data from backend: ', err);
                    });
                }
                // remove remaining datasets.
                this_3.removeDatasets(chart);
            };
            var this_3 = this;
            // go through all selected sensors
            for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
                var selected = _a[_i];
                _loop_3(selected);
            }
            // remove all datasets which where deleted
        }
        else {
            // value: value based
            this.initRealtimeData(chart);
        }
    };
    // historical data chart fill method
    LineChartVisualizationComponent.prototype.showChart = function (chart) {
        var _this = this;
        this.setChartOptions();
        // set manually changeable chart options
        chart.options.scales.xAxes[0].scaleLabel.labelString = this.axesOptions.xLabel;
        chart.options.scales.yAxes[0].scaleLabel.labelString = this.axesOptions.yLabel;
        chart.options.scales.xAxes[0].scaleLabel.display = this.axesOptions.xLabelVisible;
        chart.options.scales.yAxes[0].scaleLabel.display = this.axesOptions.yLabelVisible;
        // empty chart
        chart.data.datasets = [];
        chart.data.labels = [];
        if (!this.isTimeBased) {
            // create a Data object
            var ctxData_2 = { label: this.xElem.deviceEntity.label + ' in ' + this.xElem.deviceEntity.unit,
                data: [], borderColor: this.xElem.deviceEntity.color, backgroundColor: this.xElem.deviceEntity.color, fill: this.xElem.deviceEntity.fillArea, showLine: this.xElem.deviceEntity.showLine,
                borderDash: (this.xElem.deviceEntity.lineType === 'solid') ? [] : [5, 5] };
            var xData_2 = [{ "DateTime": "", 'value': undefined }];
            // fill data field
            this.visualmanager.getTimeData(this.xElem.deviceEntity.deviceId, this.xElem.deviceEntity.entityId, this.generateIsoDateTime(this.selectedStart), this.generateIsoDateTime(this.selectedEnd), this.duration, this.user.id, this.project.id)
                .subscribe(function (sensorDataModel) {
                for (var _i = 0, _a = sensorDataModel.Values; _i < _a.length; _i++) {
                    var value = _a[_i];
                    if (value.FloatValue != null) {
                        xData_2.push({ "DateTime": value.DateTime, 'value': value.FloatValue });
                    }
                    else if (value.StringValue != null) {
                        var yString = value.StringValue;
                        // delete Temperature unit, which is added in Openhab
                        yString = yString.replace(' °C', '');
                        xData_2.push({ "DateTime": value.DateTime, 'value': Number(yString) });
                    }
                }
                xData_2.shift();
                // now get yElem Data
                _this.visualmanager.getTimeData(_this.yElem.deviceEntity.deviceId, _this.yElem.deviceEntity.entityId, _this.generateIsoDateTime(_this.selectedStart), _this.generateIsoDateTime(_this.selectedEnd), _this.duration, _this.user.id, _this.project.id)
                    .subscribe(function (sensorDataModel) {
                    var checkedXValues = 1;
                    console.log("xdata length: ", xData_2.length);
                    for (var _i = 0, _a = sensorDataModel.Values; _i < _a.length; _i++) {
                        var yValue = _a[_i];
                        for (var _b = 0, xData_3 = xData_2; _b < xData_3.length; _b++) {
                            var xValue = xData_3[_b];
                            if (yValue.DateTime === xValue.DateTime) {
                                // we found a match! -> save it in the chart Data ctx!
                                console.log("i have found a match!");
                                if (yValue.FloatValue != null) {
                                    ctxData_2.data.push({ x: xValue.value, y: yValue.FloatValue });
                                }
                                else if (yValue.StringValue != null) {
                                    var yString = yValue.StringValue;
                                    // delete Temperature unit, which is added in Openhab
                                    yString = yString.replace(' °C', '');
                                    ctxData_2.data.push({ x: xValue.value, y: Number(yString) });
                                }
                                //chart.data.labels.push(yValue.DateTime);
                                // delete all values in xData before the used one (not working)
                                //xData.splice(0, checkedXValues);
                                // reset checkedXValues
                                checkedXValues = 0;
                            }
                            checkedXValues++;
                        }
                    }
                    // add sensor data to the chartData.
                    console.log("data: ", ctxData_2);
                    chart.data.datasets.push(ctxData_2);
                    // set chart type
                    chart.type = (_this.isTimeBased) ? "line" : "scatter";
                    console.log("data CHART: ", chart.data.datasets);
                    console.log("chart type: ", chart.type);
                    chart.update();
                });
            }, function (err) {
                console.log('Error requesting historic data from backend ', err);
            });
        }
        else {
            var _loop_4 = function (selected) {
                // when it is not the first sensor, add them:
                var ctxData = { label: selected.deviceEntity.label + ' in ' + selected.deviceEntity.unit,
                    data: [], borderColor: selected.deviceEntity.color, backgroundColor: selected.deviceEntity.color, fill: selected.deviceEntity.fillArea, showLine: selected.deviceEntity.showLine,
                    borderDash: (selected.deviceEntity.lineType === 'solid') ? [] : [5, 5] };
                this_4.visualmanager.getTimeData(selected.deviceEntity.deviceId, selected.deviceEntity.entityId, this_4.generateIsoDateTime(this_4.selectedStart), this_4.generateIsoDateTime(this_4.selectedEnd), this_4.duration, this_4.user.id, this_4.project.id)
                    .subscribe(function (sensorDataModel) {
                    var i = 0;
                    console.log("sensor values: ", sensorDataModel.Values);
                    for (var _i = 0, _a = sensorDataModel.Values; _i < _a.length; _i++) {
                        var value = _a[_i];
                        if (value.FloatValue != null) {
                            ctxData.data.push({ x: new Date(value.DateTime), y: value.FloatValue });
                        }
                        else if (value.StringValue != null) {
                            var yString = value.StringValue;
                            // delete Temperature unit, which is added in Openhab
                            yString = yString.replace(' °C', '');
                            ctxData.data.push({ x: new Date(value.DateTime), y: Number(yString) });
                        }
                    }
                    // add sensor data to the chartData.
                    chart.data.datasets.push(ctxData);
                    if (chart.data.datasets[0]['label'] === '') {
                        chart.data.dataset.shift();
                    }
                    // set chart type
                    _this.myChart.type = (_this.isTimeBased) ? "line" : "scatter";
                    chart.update();
                }, function (err) {
                    console.log('Error requesting historic data from backend ', err);
                });
            };
            var this_4 = this;
            // time-based Data
            for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
                var selected = _a[_i];
                _loop_4(selected);
            }
        }
    };
    // events
    LineChartVisualizationComponent.prototype.chartClicked = function (e) {
        // console.log(e);
    };
    LineChartVisualizationComponent.prototype.chartHovered = function (e) {
        // console.log(e);
    };
    // add one Data value to each dataset of the chart as well as the label
    LineChartVisualizationComponent.prototype.addData = function (chart, entityLabel, label, data) {
        if (!this.isTimeBased) {
            chart.data.labels.push(new Date(label));
        }
        chart.data.datasets.forEach(function (dataset) {
            if (entityLabel === dataset.label) {
                console.log("It is the entity label!");
                dataset.data.push({ x: new Date(label), y: data });
            }
            else {
                // fill the other datasets with the latest data value
                var elem = dataset.data.pop();
                dataset.data.push(elem);
                dataset.data.push({ x: new Date(label), y: elem.y });
            }
        });
        chart.update();
    };
    // add a new line / dataset to the chart
    LineChartVisualizationComponent.prototype.addDataset = function (chart, dataset) {
        chart.data.datasets.push(dataset);
        chart.update();
    };
    // removes the oldest data value of all datasets in the chart
    LineChartVisualizationComponent.prototype.removeData = function (chart) {
        console.log("delete data because maximum is reached.");
        chart.data.labels.shift();
        chart.data.datasets.forEach(function (dataset) {
            dataset.data.shift();
        });
        chart.update();
    };
    // removes all datasets which have mor then one data point
    LineChartVisualizationComponent.prototype.removeDatasets = function (chart) {
        chart.data.datasets.forEach(function (dataset) {
            if (dataset.data.lenght > 1) {
                var removalIndex = chart.data.datasets.indexOf(dataset); //Locate index of dataset
                if (removalIndex >= 0) { //make sure this element exists in the array
                    chart.data.datasets.splice(removalIndex, 1);
                }
            }
        });
        if (!this.isTimeBased) {
            // when it was the only data set, remove the labels as well.
            if (chart.data.datasets.length === 0) {
                // for each label, remove one label.
                chart.data.labels.forEach(function (label) {
                    chart.data.labels.pop();
                });
            }
        }
        chart.update();
    };
    // updates an attribute of a chart (sub)object.
    LineChartVisualizationComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    LineChartVisualizationComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.deviceEntities = [];
        this.currentWidget.isMonoVis = this.isMonoVis;
        this.currentWidget.isRealtime = this.isRealtime;
        this.currentWidget.isTimeBased = this.isTimeBased;
        this.chartType = (this.isTimeBased) ? "line" : "scatter";
        console.log("axes: ", this.axesOptions);
        // updating data from dropdowns in current Widget
        if (!this.isMonoVis && !this.isTimeBased) {
            this.currentWidget.deviceEntities.push(this.xElem.deviceEntity);
            this.currentWidget.deviceEntities.push(this.yElem.deviceEntity);
        }
        else {
            if (this.isMonoVis) {
                this.currentWidget.deviceEntities.push(this.dropdownList[0].deviceEntity);
            }
            else {
                for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
                    var entity = _a[_i];
                    this.currentWidget.deviceEntities.push(entity.deviceEntity);
                }
            }
        }
        this.currentWidget.axesOptions = this.axesOptions;
        // remove empty placeholder if neccessary
        if (this.currentWidget.deviceEntities[0].deviceId === '') {
            this.currentWidget.deviceEntities.shift();
        }
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.isMonoVis, 'isMonoVis');
        this.saveInDatabase(this.currentWidget.isRealtime, 'isRealtime');
        this.saveInDatabase(this.currentWidget.isTimeBased, 'isTimeBased');
        this.saveInDatabase(this.currentWidget.axesOptions, 'axesOptions');
        console.log('deviceEntities after APPLY: ', this.currentWidget.deviceEntities);
        console.log("realtime: ", this.isRealtime);
        if (this.isRealtime) {
            this.currentWidget.numberOfValues = this.selectedNumberOfValues;
            this.currentWidget.startDate = undefined;
            this.currentWidget.endDate = undefined;
            this.currentWidget.interval = undefined;
            this.saveInDatabase(this.currentWidget.numberOfValues, 'numberOfValues');
            this.saveInDatabase(this.currentWidget.interval, 'interval');
            this.saveInDatabase(this.currentWidget.startDate, 'startDate');
            this.saveInDatabase(this.currentWidget.endDate, 'endDate');
            // get realtime data with new settings
            if (this.currentWidget.chartType !== this.chartType) {
                this.setChartOptions();
                // this.initRealtimeData(this.myChart);
            }
            this.initRealtimeData(this.myChart);
            this.currentWidget.chartType = this.chartType;
            //this.updateRealtimeData(this.myChart);
        }
        else {
            this.currentWidget.numberOfValues = undefined;
            this.currentWidget.endDate = this.selectedEnd;
            this.currentWidget.startDate = this.selectedStart;
            console.log("apply: Date", this.selectedStart);
            this.currentWidget.interval = 'P3W';
            this.saveInDatabase(this.currentWidget.numberOfValues, 'numberOfValues');
            this.saveInDatabase(this.currentWidget.interval, 'interval');
            this.saveInDatabase(this.generateIsoDateTime(this.currentWidget.startDate), 'startDate');
            this.saveInDatabase(this.generateIsoDateTime(this.currentWidget.endDate), 'endDate');
            // get historical data with new settings
            this.showChart(this.myChart);
        }
    };
    LineChartVisualizationComponent.prototype.abortChanges = function () {
        // reset changes
        this.displaySettings = false;
        this.chartType = this.currentWidget.chartType;
        this.initRepresentationVariables();
        this.chartType = (this.currentWidget.isTimeBased) ? "line" : "scatter";
        this.xElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'x' }, sensorList: [] };
        this.yElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'y' }, sensorList: [] };
        this.axesOptions = this.currentWidget.axesOptions;
        this.dropdownList = [{ deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '', label: '', unit: '', axis: '' }, sensorList: [] }];
        for (var _i = 0, _a = this.currentWidget.deviceEntities; _i < _a.length; _i++) {
            var entity = _a[_i];
            this.dropdownList.push({ deviceEntity: entity, sensorList: [] });
            this.setSensorDropdown(entity.deviceId);
        }
        if (this.dropdownList.length > 1) {
            this.dropdownList.shift();
        }
        if (this.isTimeBased && this.dropdownList.length > 0) {
            this.xElem = this.dropdownList[0];
            this.xElem.deviceEntity.axis = "x";
            if (!this.isMonoVis && this.dropdownList.length > 1) {
                this.yElem = this.dropdownList[1];
                this.yElem.deviceEntity.axis = "y";
            }
        }
        if (this.isRealtime) {
            this.selectedNumberOfValues = this.currentWidget.numberOfValues;
        }
        else {
            this.selectedEnd = this.currentWidget.endDate;
            this.selectedStart = this.currentWidget.startDate;
            //this.selectedInterval = this.currentWidget.interval;
        }
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    LineChartVisualizationComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_8__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    LineChartVisualizationComponent.prototype.addNewDropdowns = function () {
        this.dropdownList.push({ deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '', label: '', unit: '', axis: '' }, sensorList: [] });
        //this.chartData.push({label: '', data: [], borderColor: '', fill: false});
    };
    LineChartVisualizationComponent.prototype.deleteDropdowns = function (group) {
        var i = 0;
        this.chartData = [{ label: '', data: [], borderColor: '#1976D2', fill: false, showLine: true }];
        // console.log("Dropdownlist: ", this.dropdownList);
        var dropdownListCopy = this.dropdownList;
        for (var _i = 0, _a = this.dropdownList; _i < _a.length; _i++) {
            var elem = _a[_i];
            if (elem.deviceEntity.deviceId === group.deviceId && elem.deviceEntity.entityId === group.entityId) {
                dropdownListCopy.splice(i, 1);
                // if the arrays have the same length, the chartData of the entity has to be deleted as well
                if (this.dropdownList.length === (this.chartData.length) - 1) {
                    // this.chartData.splice(i, 1);
                }
                console.log('Dropdownlist after DELETE: ', this.dropdownList);
            }
            i++;
        }
        this.dropdownList = dropdownListCopy;
    };
    LineChartVisualizationComponent.prototype.setSensorDropdown = function (deviceId) {
        var _this = this;
        // get list of all entities of the device
        var sensorList = [];
        console.log("chart: ", this.myChart.data.datasets);
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            if (device.sensors !== null) {
                for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                    var sensor = _a[_i];
                    sensorList.push({ label: sensor.name, value: sensor.id });
                }
            }
            if (device.actions !== null) {
                for (var _b = 0, _c = device.actions; _b < _c.length; _b++) {
                    var action = _c[_b];
                    sensorList.push({ label: action.name, value: action.id });
                }
            }
            if (_this.isTimeBased) {
                // go trhough dropdownlist and set sensorList to device
                for (var _d = 0, _e = _this.dropdownList; _d < _e.length; _d++) {
                    var dropdowngroup = _e[_d];
                    if (dropdowngroup.deviceEntity.deviceId === deviceId) {
                        dropdowngroup.sensorList = sensorList;
                    }
                }
            }
            else {
                if (_this.xElem.deviceEntity.deviceId === deviceId) {
                    _this.xElem.sensorList = sensorList;
                }
                else if (_this.yElem.deviceEntity.deviceId === deviceId) {
                    _this.yElem.sensorList = sensorList;
                }
            }
        }, function (error) {
            console.log('Error requesting devices from backend ', error);
        });
    };
    // Because Primeng is stupid and can only use string variables in radiobuttons, we have to set the boolean variables ourselves.
    LineChartVisualizationComponent.prototype.setIsMonoVis = function (value) {
        this.isMonoVis = (value === "true") ? true : false;
        if (value === "true") {
            this.isTimeBased = true;
            this.dataDependency = value;
            this.axesOptions.xLabel = "time";
            // if there is more then one element in the dropdownList, delete the unnecessary ones.
            if (this.dropdownList.length > 1) {
                this.dropdownList = [this.dropdownList[0]];
            }
        }
        else {
            if (!this.isTimeBased && this.xElem.deviceEntity.deviceId !== "" && this.dropdownList.length > 0) {
                this.xElem = this.dropdownList[0];
                if (this.dropdownList.length > 1) {
                    this.yElem = this.dropdownList[1];
                }
            }
        }
    };
    LineChartVisualizationComponent.prototype.initRepresentationVariables = function () {
        if (this.currentWidget.isTimeBased !== undefined) {
            this.isTimeBased = this.currentWidget.isTimeBased;
            this.dataDependency = (this.isTimeBased === true) ? 'true' : 'false';
        }
        else {
            this.isTimeBased = true;
            this.dataDependency = 'true';
        }
        this.setChartOptions();
        if (this.currentWidget.isRealtime !== undefined) {
            this.isRealtime = this.currentWidget.isRealtime;
            this.dataType = (this.isRealtime === true) ? 'true' : 'false';
        }
        else {
            this.isRealtime = true;
            this.dataType = 'true';
        }
        if (this.currentWidget.isMonoVis !== undefined) {
            this.isMonoVis = this.currentWidget.isMonoVis;
            this.sensorNumber = (this.isMonoVis === true) ? 'true' : 'false';
        }
        else {
            this.isMonoVis = true;
            this.sensorNumber = 'true';
        }
    };
    LineChartVisualizationComponent.prototype.setIsRealtime = function (value) {
        this.isRealtime = (value === "true") ? true : false;
    };
    LineChartVisualizationComponent.prototype.setIsTimeBased = function (value) {
        this.isTimeBased = (value === "true") ? true : false;
        if (value === "true") {
            this.axesOptions.xLabel = "time";
        }
        else {
            if (!this.isTimeBased && this.xElem.deviceEntity.deviceId === "" && this.dropdownList.length > 0) {
                this.xElem = this.dropdownList[0];
                console.log("here");
                this.xElem.deviceEntity.axis = "x";
                if (this.dropdownList.length > 1) {
                    this.yElem = this.dropdownList[1];
                    this.yElem.deviceEntity.axis = "y";
                }
                else {
                    this.yElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'y' }, sensorList: [] };
                }
            }
            else {
                this.xElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'x' }, sensorList: [] };
                this.yElem = { deviceEntity: { deviceId: '', entityId: '', lineType: '', fillArea: true, showLine: true, color: '#1976D2', label: '', unit: '', axis: 'y' }, sensorList: [] };
            }
        }
    };
    LineChartVisualizationComponent.prototype.setChartOptions = function () {
        console.log("setOptions");
        if (this.isTimeBased) {
            this.chartOptions = {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    display: true,
                    position: 'top'
                },
                scales: {
                    xAxes: [{
                            type: "time",
                            time: {
                                parser: this.timeFormat,
                                tooltipFormat: 'll',
                                displayFormats: {
                                    'millisecond': 'HH:mm:ss',
                                    'second': 'HH:mm:ss',
                                    'minute': 'HH:mm:ss',
                                    'hour': 'MMM DD YY',
                                    'day': 'MMM DD YY',
                                    'week': 'MMM DD YY',
                                    'month': 'MMM DD YY',
                                    'quarter': 'MMM DD YY',
                                    'year': 'MMM DD YY',
                                }
                            },
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Date'
                            },
                        }],
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: ''
                            }
                        }]
                }
            };
        }
        else {
            this.chartOptions = {
                maintainAspectRatio: false,
                responsive: true,
                legend: {
                    display: true,
                    position: 'top'
                },
                scales: {
                    xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: ''
                            },
                            type: 'linear',
                            position: 'bottom'
                        }],
                    yAxes: [{
                            ticks: {
                                beginAtZero: true,
                            },
                            scaleLabel: {
                                display: true,
                                labelString: ''
                            }
                        }]
                },
                onResize: function (chart, size) {
                    //chart.options.legend.display = size.width > 400;
                    //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                    //console.log();
                    //chart.update();
                }
            };
        }
        this.myChart.options = this.chartOptions;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_linechartwidget__WEBPACK_IMPORTED_MODULE_7__["LineChartWidget"])
    ], LineChartVisualizationComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], LineChartVisualizationComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], LineChartVisualizationComponent.prototype, "resizeFont", void 0);
    LineChartVisualizationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'chart-visualization',
            template: __webpack_require__(/*! ./line-chart-visualization.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.html"),
            styles: [__webpack_require__(/*! ./line-chart-visualization.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_4__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_2__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_3__["VisualManagerService"]])
    ], LineChartVisualizationComponent);
    return LineChartVisualizationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.css":
/*!****************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.css ***!
  \****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: 95% !important;\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.html":
/*!*****************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.html ***!
  \*****************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Doughnut Chart Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input Data</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Distribution of</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"distributionList\"\r\n                  [filter]=\"true\" [(ngModel)]=\"this.selectedDistribution\"\r\n                  [style]=\"{'min-width':'200px'}\" (onChange)=\"setDistributionParameters()\" placeholder=\"Select a distribution\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div *ngIf=\"(this.selectedDistribution === 'actuator')\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\" *ngIf=\"(this.selectedDistribution === 'actuator')\">\r\n      <div class=\"ui-g-4 grid-elem\"></div>\r\n      <div class=\"ui-g-2 grid-elem\">to</div>\r\n      <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <p-accordion *ngIf=\"this.selectedDistribution === 'actuator'\">\r\n        <p-accordionTab  style=\"align-items: center; overflow: auto; width: 100%;\">\r\n          <p-header>\r\n            Device:\r\n            <p-dropdown appendTo=\"body\" [options]=\"devicesList\" (onChange)=\"setSensorDropdown(deviceEntities[0].deviceId)\"\r\n                        [filter]=\"true\" [(ngModel)]=\"deviceEntities[0].deviceId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n            Sensor:\r\n            <p-dropdown appendTo=\"body\" [options]=\"sensorList\" [filter]=\"true\" [(ngModel)]=\"deviceEntities[0].entityId\"\r\n                        [style]=\"{'width':'200px'}\" placeholder=\"Select a sensor\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n            </p-dropdown>\r\n\r\n          </p-header>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data label:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"deviceEntities[0].label\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n          <div class=\"ui-g-12 grid-elem\">\r\n            <div class=\"ui-g-4 grid-elem\">Data unit:</div>\r\n            <input pInputText class=\"gridster-item-content\" [(ngModel)]=\"deviceEntities[0].unit\"  style=\"width: 200px; padding-left: 0;\">\r\n          </div>\r\n        </p-accordionTab>\r\n    </p-accordion>\r\n\r\n    <div *ngIf=\"(this.selectedDistribution === 'device')\" class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Devices:</div>\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12 grid-elem\" *ngFor=\"let device of deviceEntities\">\r\n          <p-dropdown appendTo=\"body\" [options]=\"allDevicesList\"\r\n                      [filter]=\"true\" [(ngModel)]=\"device.deviceId\"\r\n                      [style]=\"{'min-width':'200px'}\" placeholder=\"Select a device\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n          </p-dropdown>\r\n          <button *ngIf=\"deviceEntities.length > 1\" style = \"margin-left: 10px;\" type=\"button\" pButton icon=\"fa fa-minus\" (click)=\"$event.stopPropagation();$event.preventDefault();deleteDropdowns(device);\"></button>\r\n        </div>\r\n        <div class=\"ui-g-12\">\r\n          <button type=\"button\" pButton icon=\"fa fa-plus\" (click)=\"addNewDropdowns()\"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Doughnut circle:</div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"isCircleFull\" value=\"true\" label=\"full circle\" [(ngModel)]=\"isCircleFull\" inputId=\"full\"></p-radioButton></div>\r\n      <div class=\"ui-g-4\"><p-radioButton name=\"isCircleFull\" value=\"false\" label=\"half circle\" [(ngModel)]=\"isCircleFull\" inputId=\"half\"></p-radioButton></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Color family:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"colorPaletteList\" [filter]=\"true\" [(ngModel)]=\"currentPalette\"\r\n                  [style]=\"{'width':'200px'}\" placeholder=\"Select a color family\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n<div style=\"text-align: center;\">\r\n  <p-message *ngIf=\"isEmpty\" severity=\"info\" text=\"You selected device entities without historical data.\"></p-message>\r\n</div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.ts":
/*!***************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.ts ***!
  \***************************************************************************************************************************************/
/*! exports provided: DoughnutChartComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DoughnutChartComponent", function() { return DoughnutChartComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_add_observable_interval__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! rxjs/add/observable/interval */ "./node_modules/rxjs-compat/_esm5/add/observable/interval.js");
/* harmony import */ var _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../../../../../models/frontend/doughnutchartwidget */ "./src/app/models/frontend/doughnutchartwidget.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var DoughnutChartComponent = /** @class */ (function () {
    function DoughnutChartComponent(dataService, databaseService, devicemanager, visualmanager) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.devicesList = [];
        this.allDevicesList = [];
        this.sensorList = [];
        this.colorPaletteList = [{ label: "warm", value: "warm" }, { label: "cool", value: "cool" },
            { label: "neon", value: "neon" }];
        this.distributionList = [{ label: "the states of all devices", value: "all" },
            { label: "the states of a single actuator (%)", value: "actuator" }, { label: "device types", value: "device" }];
        this.deviceEntities = [{
                deviceId: '',
                entityId: '',
                label: '',
                unit: '',
            }];
        this.displaySettings = false;
    }
    DoughnutChartComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.devicesList = [];
        this.allDevicesList = [];
        this.sensorList = [];
        this.chartType = 'doughnut';
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            rotation: -Math.PI / 2,
            circumference: 2 * Math.PI,
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        //if (this.currentWidget.interval !== undefined) {this.timeType = this.currentWidget.interval;}
        // fill deviceList for dropdown
        this.fillDevicesList();
        var dte = new Date();
        dte.setDate(dte.getDate() - 2);
        this.selectedStart = (this.currentWidget.startDate !== undefined) ? new Date(this.currentWidget.startDate) : dte;
        this.selectedEnd = (this.currentWidget.endDate !== undefined) ? new Date(this.currentWidget.endDate) : new Date();
        if (this.currentWidget.deviceEntities[0] !== undefined && this.currentWidget.deviceEntities[0].deviceId !== '') {
            this.deviceEntities = this.currentWidget.deviceEntities;
            if (this.currentWidget.deviceEntities[0].deviceId !== undefined) {
                this.setSensorDropdown(this.currentWidget.deviceEntities[0].deviceId);
            }
        }
        ;
        this.currentPalette = (this.currentWidget.colorPalette !== undefined) ? this.currentWidget.colorPalette : this.colorPaletteList[0].value;
        this.selectedDistribution = (this.currentWidget.distribution !== undefined) ? this.currentWidget.distribution : this.distributionList[0].value;
        this.isCircleFull = (this.currentWidget.isCircleFull !== undefined) ? this.currentWidget.isCircleFull : "true";
        // init chart attributes and chart object
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_2__["Chart"](this.ctx.nativeElement, {
            type: this.chartType,
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
        this.setDoughnutCircle();
        this.showChart(this.myChart);
    };
    // generates a timestamp in ISO standard as defined for the backend
    DoughnutChartComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    DoughnutChartComponent.prototype.showChart = function (chart) {
        chart.data.labels = [];
        var statedata = { 'deviceId': '', 'actionId': '', 'states': [{ number: 0, description: '', value: 0 }] };
        //let color = [];
        var cIndex = 0;
        // go through all selected devices
        switch (this.selectedDistribution) {
            case "actuator":
                this.setSingleChart();
                break;
            case "device":
                this.setDeviceDistributionChart();
                break;
            case "all":
            default:
                this.setAllChart();
                break;
        }
    };
    DoughnutChartComponent.prototype.setSingleChart = function () {
        var _this = this;
        this.devicemanager.getDeviceById(this.deviceEntities[0].deviceId, this.user.id, this.project.id).subscribe(function (result) {
            // for stateful data values, the states have to be prepared
            var states = [];
            for (var _i = 0, _a = result.actions; _i < _a.length; _i++) {
                var action = _a[_i];
                // get the selected action's states
                if (!action.valueable && action.id === _this.deviceEntities[0].entityId) {
                    for (var _b = 0, _c = action.states; _b < _c.length; _b++) {
                        var state = _c[_b];
                        states.push({ number: state.state, description: state.description, value: 0 });
                    }
                    break;
                }
            }
            console.log("single states: ", states);
            // get Data from Backend
            _this.visualmanager.getTimeData(_this.deviceEntities[0].deviceId, _this.deviceEntities[0].entityId, _this.generateIsoDateTime(_this.selectedStart), _this.generateIsoDateTime(_this.selectedEnd), 'P5D', _this.user.id, _this.project.id)
                .subscribe(function (sensorDataModel) {
                console.log("result: ", sensorDataModel);
                if (sensorDataModel.Values.length > 0) {
                    var valueCount = 0;
                    var dateStart = new Date(sensorDataModel.Values[0].DateTime);
                    var dateEnd = new Date(sensorDataModel.Values[sensorDataModel.Values.length - 1].DateTime);
                    // we have to divide the total time by 3600000 to get hours instead of milliseconds
                    var timeTotal = (dateEnd.getTime() - dateStart.getTime()) / 3600000;
                    for (var _i = 0, _a = sensorDataModel.Values; _i < _a.length; _i++) {
                        var value = _a[_i];
                        var entityValue = void 0;
                        if (value.FloatValue !== null) {
                            entityValue = value.FloatValue;
                        }
                        else {
                            var vString = value.StringValue;
                            // delete Temperature unit, which is added in Openhab
                            vString = vString.replace(' °C', '');
                            entityValue = Number(vString);
                        }
                        var len = sensorDataModel.Values.length;
                        for (var _b = 0, states_1 = states; _b < states_1.length; _b++) {
                            var state = states_1[_b];
                            if (sensorDataModel.Values.indexOf(value) < len - 1) {
                                if (entityValue === state.number) {
                                    // count how often the state is represented in the data.
                                    var start = new Date(value.DateTime);
                                    var end = new Date(sensorDataModel.Values[sensorDataModel.Values.indexOf(value) + 1].DateTime);
                                    state.value = state.value + ((end.getTime() - start.getTime()) / 3600000);
                                }
                            }
                        }
                        //console.log("stateData: ", statedata);
                    }
                    var total = 0;
                    for (var _c = 0, states_2 = states; _c < states_2.length; _c++) {
                        var state = states_2[_c];
                        total = total + state.value;
                    }
                    // add sensor data to the chartData.
                    // create ctxData
                    var stateValues = [];
                    for (var _d = 0, states_3 = states; _d < states_3.length; _d++) {
                        var state = states_3[_d];
                        // change values of states to percentage
                        stateValues.push(Math.round(state.value * 100 / total));
                        if (state.decription !== undefined) {
                            _this.myChart.data.labels.push("state " + state.number + " (" + state.decription + ")");
                        }
                        else {
                            _this.myChart.data.labels.push("state " + state.number);
                        }
                    }
                    var ctxData = {
                        data: stateValues,
                    };
                    console.log('ctxData: ', ctxData);
                    _this.myChart.data.datasets = [ctxData];
                    console.log("single data: ", _this.myChart.data.datasets);
                    _this.setChartColors(_this.currentPalette);
                    _this.myChart.update();
                }
            }, function (err) {
                console.log('Error requesting historic data from backend ', err);
            });
        }, function (error) {
            console.log('Error requesting device data from backend ');
        });
    };
    DoughnutChartComponent.prototype.setDeviceDistributionChart = function () {
        var _this = this;
        var chartdata = [0, 0];
        var labels = ["actuators", "sensors"];
        var observables = [];
        for (var _i = 0, _a = this.deviceEntities; _i < _a.length; _i++) {
            var elem = _a[_i];
            observables.push(this.devicemanager.getDeviceById(elem.deviceId, this.user.id, this.project.id));
        }
        var observeable = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["forkJoin"])(observables);
        observeable.subscribe(function (dataArray) {
            // All observables in `observables` array have resolved and `dataArray` is an array of result of each observable
            console.log("array subscriptions: ", dataArray);
            for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {
                var elem = dataArray_1[_i];
                chartdata[0] = chartdata[0] + elem.actions.length;
                chartdata[1] = chartdata[1] + elem.sensors.length;
            }
            _this.myChart.data.datasets = [{ data: chartdata }];
            _this.myChart.data.labels = labels;
            _this.myChart.update();
            _this.setChartColors(_this.currentPalette);
        }, function (err) {
            console.log(err);
        });
    };
    DoughnutChartComponent.prototype.setAllChart = function () {
        var _this = this;
        var chartdata = [0, 0, 0, 0];
        var labels = ["offline", "online", "maintenance", "error"];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            console.log("number of devices: ", devices.length);
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                chartdata[Number(device.status)] = chartdata[Number(device.status)] + 1;
            }
            console.log("all chartData: ", chartdata);
            _this.myChart.data.datasets = [{ data: chartdata }];
            _this.myChart.data.labels = labels;
            _this.myChart.update();
            _this.setChartColors(_this.currentPalette);
        }, function (err) {
            console.log(err);
        });
    };
    // events
    DoughnutChartComponent.prototype.chartClicked = function (e) {
    };
    DoughnutChartComponent.prototype.chartHovered = function (e) {
    };
    // updates an attribute of a chart (sub)object.
    DoughnutChartComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    DoughnutChartComponent.prototype.applySettings = function () {
        console.log("dropdown: ", this.selectedDistribution);
        this.displaySettings = false;
        this.currentWidget.deviceEntities = this.deviceEntities;
        this.currentWidget.chartType = this.chartType;
        this.currentWidget.isCircleFull = this.isCircleFull;
        this.currentWidget.colorPalette = this.currentPalette;
        this.setDoughnutCircle();
        //this.currentWidget.interval = this.timeType;
        this.currentWidget.endDate = this.selectedEnd;
        this.currentWidget.startDate = this.selectedStart;
        this.currentWidget.distribution = this.selectedDistribution;
        this.saveInDatabase(this.currentWidget.deviceEntities, 'deviceEntities');
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.isCircleFull, 'isCircleFull');
        this.saveInDatabase(this.currentWidget.colorPalette, 'colorPalette');
        this.saveInDatabase(this.currentWidget.distribution, 'distribution');
        //this.saveInDatabase(this.currentWidget.interval, 'interval');
        this.saveInDatabase(this.currentWidget.startDate, 'startDate');
        this.saveInDatabase(this.currentWidget.endDate, 'endDate');
        // get data with new settings
        this.showChart(this.myChart);
    };
    DoughnutChartComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        // this.chartType = this.currentWidget.chartType;
        this.selectedEnd = this.currentWidget.endDate;
        this.selectedStart = this.currentWidget.startDate;
        this.isCircleFull = this.currentWidget.isCircleFull;
        this.currentPalette = this.currentWidget.colorPalette;
        this.selectedDistribution = this.currentWidget.distribution;
        //this.timeType = this.currentWidget.interval;
        this.deviceEntities = this.currentWidget.deviceEntities;
        this.setSensorDropdown(this.currentWidget.deviceEntities[0].deviceId);
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    DoughnutChartComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_9__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    DoughnutChartComponent.prototype.setSensorDropdown = function (deviceId) {
        var _this = this;
        // get list of all entities of the device
        this.sensorList = [];
        this.devicemanager.getDeviceById(deviceId, this.user.id, this.project.id)
            .subscribe(function (device) {
            if (device.actions !== null) {
                for (var _i = 0, _a = device.actions; _i < _a.length; _i++) {
                    var action = _a[_i];
                    // push actions only when they have states
                    if (action.states !== null && action.states.length > 0) {
                        _this.sensorList.push({ label: action.name, value: action.id });
                    }
                }
            }
            // if there is only one element in sensorlist, preselect it for the dropdown
            if (_this.sensorList.length === 1) {
                _this.deviceEntities[0].entityId = _this.sensorList[0].value;
            }
        }, function (error) {
            console.log('Error requesting devices from backend ', error);
        });
    };
    // to fill the multi device dropdowns with compatible devices
    DoughnutChartComponent.prototype.fillDevicesList = function () {
        var _this = this;
        // reset lists:
        this.devicesList = [];
        this.allDevicesList = [];
        // get all devices
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_2 = devices; _i < devices_2.length; _i++) {
                var device = devices_2[_i];
                var isCompatible = false;
                if (device.actions !== null) {
                    for (var _a = 0, _b = device.actions; _a < _b.length; _a++) {
                        var action = _b[_a];
                        // only add devices with stateful actuators to the list
                        if (action.states.length > 0) {
                            isCompatible = true;
                            break;
                        }
                    }
                    if (isCompatible) {
                        _this.devicesList.push({ label: device.name, value: device.deviceId });
                    }
                }
                _this.allDevicesList.push({ label: device.name, value: device.deviceId });
            }
        }, function (err) {
            console.log(err);
        });
    };
    DoughnutChartComponent.prototype.setDoughnutCircle = function () {
        if (this.isCircleFull === "true") {
            this.myChart.options.rotation = -Math.PI / 2;
            this.myChart.options.circumference = 2 * Math.PI;
        }
        else {
            this.myChart.options.rotation = -Math.PI;
            this.myChart.options.circumference = Math.PI;
        }
    };
    DoughnutChartComponent.prototype.calculateStateDistribution = function (list, states, totalTime) {
    };
    // function to set color-blinded-friendly colors to the doughnut
    DoughnutChartComponent.prototype.setChartColors = function (palette) {
        console.log("palette: ", palette);
        if (!palette)
            palette = this.currentPalette;
        this.currentPalette = palette;
        /*Gradients
          The keys are percentage and the values are the color in a rgba format.
          You can have as many "color stops" (%) as you like.
          0% and 100% is not optional.*/
        var gradient;
        switch (palette) {
            case 'cool':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [220, 237, 200, 1],
                    45: [66, 179, 213, 1],
                    65: [26, 39, 62, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'warm':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [254, 235, 101, 1],
                    45: [228, 82, 27, 1],
                    65: [77, 52, 47, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'neon':
            default:
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [255, 236, 179, 1],
                    45: [232, 82, 133, 1],
                    65: [106, 27, 154, 1],
                    100: [0, 0, 0, 1]
                };
                break;
        }
        //Get a sorted array of the gradient keys
        var gradientKeys = Object.keys(gradient);
        gradientKeys.sort(function (a, b) {
            return +a - +b;
        });
        //Find datasets and length
        var chartType = this.currentWidget.chartType;
        switch (chartType) {
            case "pie":
            case "doughnut":
                var datasets = this.myChart.config.data.datasets[0];
                var setsCount = datasets.data.length;
                break;
            case "bar":
            case "line":
                var datasets = this.myChart.config.data.datasets;
                var setsCount = datasets.length;
                break;
        }
        //Calculate colors
        var chartColors = [];
        for (var i = 0; i < setsCount; i++) {
            var gradientIndex = (i + 1) * (100 / (setsCount + 1)); //Find where to get a color from the gradient
            for (var j = 0; j < gradientKeys.length; j++) {
                var gradientKey = gradientKeys[j];
                if (gradientIndex === +gradientKey) { //Exact match with a gradient key - just get that color
                    chartColors[i] = 'rgba(' + gradient[gradientKey].toString() + ')';
                    break;
                }
                else if (gradientIndex < +gradientKey) { //It's somewhere between this gradient key and the previous
                    var prevKey = gradientKeys[j - 1];
                    var gradientPartIndex = (gradientIndex - Number(prevKey)) / (Number(gradientKey) - Number(prevKey)); //Calculate where
                    var color = [];
                    for (var k = 0; k < 4; k++) { //Loop through Red, Green, Blue and Alpha and calculate the correct color and opacity
                        color[k] = gradient[prevKey][k] - ((gradient[prevKey][k] - gradient[gradientKey][k]) * gradientPartIndex);
                        if (k < 3)
                            color[k] = Math.round(color[k]);
                    }
                    chartColors[i] = 'rgba(' + color.toString() + ')';
                    break;
                }
            }
        }
        //Copy colors to the chart
        for (i = 0; i < setsCount; i++) {
            switch (chartType) {
                case "pie":
                case "polar":
                case "doughnut":
                    if (!datasets.backgroundColor)
                        datasets.backgroundColor = [];
                    datasets.backgroundColor[i] = chartColors[i];
                    if (!datasets.borderColor)
                        datasets.borderColor = [];
                    datasets.borderColor[i] = "rgba(255,255,255,1)";
                    break;
                case "bar":
                    datasets[i].backgroundColor = chartColors[i];
                    datasets[i].borderColor = "rgba(255,255,255,0)";
                    break;
                case "line":
                    datasets[i].borderColor = chartColors[i];
                    datasets[i].backgroundColor = "rgba(255,255,255,0)";
                    break;
            }
        }
        //Update the chart to show the new colors
        this.myChart.update();
    };
    DoughnutChartComponent.prototype.setDistributionParameters = function () {
        // if we have device type, we need to empty the entity parameter
        if (this.selectedDistribution === "device") {
            this.deviceEntities[0].entityId === undefined;
        }
        else if (this.selectedDistribution === "actuator") {
            // delete all deviceentities but the first
            while (this.deviceEntities.length > 1) {
                this.deviceEntities.pop();
            }
        }
        else if (this.selectedDistribution === "all") {
            //this.deviceEntities = [];
        }
    };
    DoughnutChartComponent.prototype.addNewDropdowns = function () {
        this.deviceEntities.push({ deviceId: '', entityId: '', label: '', unit: '' });
        //this.chartData.push({label: '', data: [], borderColor: '', fill: false});
    };
    DoughnutChartComponent.prototype.deleteDropdowns = function (group) {
        var i = 0;
        // console.log("Dropdownlist: ", this.dropdownList);
        var dropdownListCopy = this.deviceEntities;
        for (var _i = 0, _a = this.deviceEntities; _i < _a.length; _i++) {
            var elem = _a[_i];
            if (elem.deviceId === group.deviceId) {
                dropdownListCopy.splice(i, 1);
                // if the arrays have the same length, the chartData of the entity has to be deleted as well
                console.log('Dropdownlist after DELETE: ', dropdownListCopy);
            }
            i++;
        }
        this.deviceEntities = dropdownListCopy;
        console.log('Dropdownlist final: ', this.deviceEntities);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], DoughnutChartComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_doughnutchartwidget__WEBPACK_IMPORTED_MODULE_8__["Doughnutchartwidget"])
    ], DoughnutChartComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], DoughnutChartComponent.prototype, "resizeFont", void 0);
    DoughnutChartComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'doughnut-chart-visualization',
            template: __webpack_require__(/*! ./doughnut-chart.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.html"),
            styles: [__webpack_require__(/*! ./doughnut-chart.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_5__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_4__["VisualManagerService"]])
    ], DoughnutChartComponent);
    return DoughnutChartComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.css":
/*!************************************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.css ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".widgetDesign {\r\n  position: relative;\r\n  width: 12vw;\r\n  height: 18vh;\r\n  float: left;\r\n  margin: 2vh 2vw 0 0;\r\n  background-color: white;\r\n  border-radius: 25px;\r\n  box-shadow: 3px 3px 2px lightgrey;\r\n  transition: all 0.3s;\r\n  border-color: #668BCC;\r\n  border-style: solid;\r\n  border-width: 0 0 0 5px;\r\n  padding-left: 1vw;\r\n  overflow: hidden;\r\n  -o-object-fit: scale-down;\r\n     object-fit: scale-down;\r\n}\r\n\r\n.widgetDesign:hover {\r\n  background-color: #eeeeee;\r\n  overflow: visible;\r\n}\r\n\r\n.ui-widget-overlay\r\n{\r\n  z-index: 0;\r\n}\r\n\r\n.ui-dialog{\r\n  z-index: 20;\r\n}\r\n\r\n.nameChanger {\r\n  width: 5vw;\r\n}\r\n\r\n.settingsDialog {\r\n  width: 500px !important;\r\n  height: 600px !important;\r\n}\r\n\r\n.ui-tieredmenu{\r\n  left: -200px !important;\r\n}\r\n\r\n.interval-input{\r\n  width: 60px;\r\n}\r\n\r\n.widgetContainer {\r\n  padding: 0 1vw 1vh 2vw;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n}\r\n\r\n.graph-canvas{\r\n  width: 100%;\r\n  height: 95% !important;\r\n}\r\n\r\n.graph-button {\r\n  position: absolute;\r\n  top: 135px;\r\n  right: 0;\r\n}\r\n\r\n.device-select {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  top: 55px;\r\n}\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.html":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.html ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Polar Area Chart Settings\" [modal]=true appendTo=\"body\" [width]=\"700\"\r\n          [(visible)]=\"displaySettings\" [closable]=\"false\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Input Data</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Sensor Type:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"deviceTypeList\"\r\n                  [(ngModel)]=\"this.selectedDeviceType\" [group]=\"true\"\r\n                  [style]=\"{'min-width':'200px'}\" (onChange)=\"calculateLocationNumber();\" placeholder=\"Select a device type\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n     There is/are currently {{this.numberOfLocations}} device(s) with this type.\r\n    </div>\r\n    <!--div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Location: </div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"locationsList\"\r\n                  [filter]=\"true\" [(ngModel)]=\"this.selectedLocation\"\r\n                  [style]=\"{'min-width':'200px'}\" (onChange)=\"setDeviceList(this.selectedLocation)\" placeholder=\"Select a location\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div-->\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Time Period:</div>\r\n      <div class=\"ui-g-2 grid-elem\">from</div>\r\n      <p-calendar [(ngModel)]=\"selectedStart\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\"></div>\r\n      <div class=\"ui-g-2 grid-elem\">to</div>\r\n      <p-calendar [(ngModel)]=\"selectedEnd\" [showTime]=\"true\" [showIcon]=\"true\" [monthNavigator]=\"true\" [yearNavigator]=\"true\" yearRange=\"1970:2020\" appendTo=\"body\"></p-calendar>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Calculation:</div>\r\n      <p-dropdown [autoWidth]=\"true\" [placeholder]=\"'Select a calculation type'\"\r\n                  [options]=\"calculationList\" [(ngModel)]=\"calculationType\"\r\n                  [style]=\"{'width':'200px'}\"  appendTo=\"body\">\r\n      </p-dropdown>\r\n      <div class=\"dropdown\"></div>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <h3>Representation</h3>\r\n    </div>\r\n    <div class=\"ui-g-12 grid-elem\">\r\n      <div class=\"ui-g-4 grid-elem\">Color family:</div>\r\n      <p-dropdown appendTo=\"body\" [options]=\"colorPaletteList\" [filter]=\"true\" [(ngModel)]=\"currentPalette\"\r\n                  [style]=\"{'width':'200px'}\" placeholder=\"Select a color family\" (onClick)=\"$event.stopPropagation();$event.preventDefault();\">\r\n      </p-dropdown>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"button\" pButton icon=\"fa-check\" (click)=\"applySettings();\" label=\"Apply\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\"\r\n        (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"\r\n        [hidden]=\" !(loginStatus>1 && currentWidget.isDeveloped)\"></button>\r\n<!--*ngIf=\"myChart != undefined && myChart.data!= undefined && myChart.data.datasets != []\"-->\r\n<div  class=\"graph-canvas\">\r\n  <canvas #chart>{{myChart}}</canvas>\r\n</div>\r\n<!--div style=\"text-align: center;\">\r\n  <p-message *ngIf=\"isEmpty\" severity=\"info\" text=\"You selected device entities without historical data.\"></p-message>\r\n</div-->\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.ts":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.ts ***!
  \***********************************************************************************************************************************************************************/
/*! exports provided: PolarAreaChartVisualizationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PolarAreaChartVisualizationComponent", function() { return PolarAreaChartVisualizationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_index__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/index */ "./node_modules/rxjs/index.js");
/* harmony import */ var rxjs_index__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs_index__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! chart.js */ "./node_modules/chart.js/dist/Chart.js");
/* harmony import */ var chart_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(chart_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../../../../../../models/frontend/polarareachartwidget */ "./src/app/models/frontend/polarareachartwidget.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var PolarAreaChartVisualizationComponent = /** @class */ (function () {
    function PolarAreaChartVisualizationComponent(dataService, databaseService, devicemanager, visualmanager, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.router = router;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.calculationType = _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg;
        this.devicesList = [];
        this.colorPaletteList = [{ label: "warm", value: "warm" }, { label: "cool", value: "cool" },
            { label: "neon", value: "neon" }];
        this.calculationList = [{ label: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg, value: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg },
            { label: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min, value: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min }, { label: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max, value: _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max }];
        this.deviceTypeList = [];
        this.locationsList = [];
        this.deviceEntities = [];
        this.displaySettings = false;
    }
    PolarAreaChartVisualizationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.devicesList = [];
        this.chartType = 'polarArea';
        this.chartOptions = {
            maintainAspectRatio: false,
            responsive: true,
            legend: {
                display: true,
                position: 'top'
            },
            //rotation : -Math.PI / 2,
            onResize: function (chart, size) {
                //chart.options.legend.display = size.width > 400;
                //chart.options.legend.position = (size.width > size.height) ? 'right' : 'bottom';
                //console.log();
                //chart.update();
            }
        };
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.dataService.userData
            .subscribe(function (value) {
            _this.user = value;
        });
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        var dte = new Date();
        dte.setDate(dte.getDate() - 2);
        this.selectedStart = (this.currentWidget.startDate !== undefined) ? new Date(this.currentWidget.startDate) : dte;
        this.selectedEnd = (this.currentWidget.endDate !== undefined) ? new Date(this.currentWidget.endDate) : new Date();
        this.currentPalette = (this.currentWidget.colorPalette !== undefined) ? this.currentWidget.colorPalette : this.colorPaletteList[0].value;
        // init chart attributes and chart object
        this.myChart = new chart_js__WEBPACK_IMPORTED_MODULE_2__["Chart"](this.ctx.nativeElement, {
            type: this.chartType,
            data: {
                labels: [],
                datasets: []
            },
            options: this.chartOptions
        });
        //init devicetypelist
        this.devicemanager.getAllSensorTypes(this.user.id, this.project.id).subscribe(function (result) {
            var sensorItems = result.types.map(function (elem) {
                return { label: elem.type, value: elem.type };
            });
            _this.deviceTypeList = [{ label: 'Types of sensors', value: 'sensorType', items: sensorItems }];
            _this.devicemanager.getAllActuatorTypes(_this.user.id, _this.project.id).subscribe(function (result2) {
                var actuatorItems = result2.map(function (elem) {
                    return { label: elem, value: elem };
                });
                var deviceTypelist2 = _this.deviceTypeList.concat({ label: 'Types of actuators', value: 'actuatorType', items: actuatorItems });
                _this.deviceTypeList = deviceTypelist2;
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log(err);
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        // init Devicetype
        if (this.currentWidget.deviceType !== '') {
            this.selectedDeviceType = this.currentWidget.deviceType;
            this.calculateLocationNumber();
            this.applySettings();
            //this.setDevicesByTypeList(this.currentWidget.deviceType);
        }
    };
    // generates a timestamp in ISO standard as defined for the backend
    PolarAreaChartVisualizationComponent.prototype.generateIsoDateTime = function (date) {
        var year = date.getFullYear();
        var month = date.getMonth() + 1;
        var day = date.getDate();
        var hours = date.getHours();
        var minutes = date.getMinutes();
        var seconds = date.getSeconds();
        var yearString = year.toString();
        var dayString = day.toString();
        var monthString = month.toString();
        var hoursString = hours.toString();
        var minutesString = minutes.toString();
        var secondsString = seconds.toString();
        if (day < 10) {
            dayString = '0' + dayString;
        }
        if (month < 10) {
            monthString = '0' + monthString;
        }
        if (hours < 10) {
            hoursString = '0' + hoursString;
        }
        if (minutes < 10) {
            minutesString = '0' + minutesString;
        }
        if (seconds < 10) {
            secondsString = '0' + secondsString;
        }
        return yearString + '-' + monthString + '-' + dayString + 'T' + hoursString + ':' + minutesString + ':' + secondsString;
    };
    PolarAreaChartVisualizationComponent.prototype.showChart = function (chart) {
        var _this = this;
        console.log("showchart");
        chart.data.labels = [];
        chart.data.datasets = [{ data: [], backgroundColor: [] }];
        console.log("chart at beginnung: ", chart.data);
        console.log("deviceEntities at beginning: ", this.deviceEntities);
        //let color = [];
        var cIndex = 0;
        var ctxData = { labels: [], data: [] };
        var observables = [];
        for (var _i = 0, _a = this.deviceEntities; _i < _a.length; _i++) {
            var elem = _a[_i];
            console.log("elem: ", elem);
            observables.push(this.visualmanager.getTimeData(elem.deviceId, elem.entityId, this.generateIsoDateTime(this.selectedStart), this.generateIsoDateTime(this.selectedEnd), 'P5D', this.user.id, this.project.id));
        }
        console.log("observebales length: ", observables.length);
        var observeable = Object(rxjs_index__WEBPACK_IMPORTED_MODULE_1__["forkJoin"])(observables);
        observeable.subscribe(function (dataArray) {
            // All observables in `observables` array have resolved and `dataArray` is an array of result of each observable
            console.log("array subscriptions: ", dataArray);
            var _loop_1 = function (elem) {
                console.log("elem dataArray: ", elem);
                if (elem.Values.length > 0) {
                    var valueCount = 0;
                    var dateStart = new Date(elem.Values[0].DateTime);
                    var dateEnd = new Date(elem.Values[elem.Values.length - 1].DateTime);
                    // we have to divide the total time by 3600000 to get hours instead of milliseconds
                    var timeTotal = (dateEnd.getTime() - dateStart.getTime()) / 3600000;
                    var value_1 = 0;
                    switch (_this.calculationType) {
                        case _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Avg:
                            value_1 = _this.calculateAverage(elem.Values, timeTotal);
                            break;
                        case _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Max:
                            value_1 = _this.calculateMaximum(elem.Values);
                            break;
                        case _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["Calculation"].Min:
                        default:
                            value_1 = _this.calculateMinimum(elem.Values);
                            break;
                    }
                    // add sensor data to the chartData.
                    _this.devicemanager.getDeviceById(_this.deviceEntities[dataArray.indexOf(elem)].deviceId, _this.user.id, _this.project.id).subscribe(function (result) {
                        chart.data.labels.push(result.location);
                        chart.data.datasets[0].data.push(value_1);
                        if (chart.data.datasets[0].data.length >= chart.data.datasets[0].backgroundColor.length) {
                            _this.setChartColors(_this.currentPalette);
                            chart.update();
                        }
                    });
                }
            };
            for (var _i = 0, dataArray_1 = dataArray; _i < dataArray_1.length; _i++) {
                var elem = dataArray_1[_i];
                _loop_1(elem);
            }
        }, function (err) {
            console.log(err);
        });
    };
    // events
    PolarAreaChartVisualizationComponent.prototype.chartClicked = function (e) {
    };
    PolarAreaChartVisualizationComponent.prototype.chartHovered = function (e) {
    };
    // updates an attribute of a chart (sub)object.
    PolarAreaChartVisualizationComponent.prototype.updateChartOption = function (chart, chartField, value) {
        chartField = value;
        chart.update();
    };
    PolarAreaChartVisualizationComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.chartType = this.chartType;
        this.currentWidget.colorPalette = this.currentPalette;
        console.log("color: ", this.currentPalette);
        //this.currentWidget.interval = this.timeType;
        this.currentWidget.endDate = this.selectedEnd;
        this.currentWidget.startDate = this.selectedStart;
        this.currentWidget.calculationType = this.calculationType;
        this.currentWidget.deviceType = this.selectedDeviceType;
        this.currentWidget.location = this.selectedLocation;
        this.saveInDatabase(this.currentWidget.chartType, 'chartType');
        this.saveInDatabase(this.currentWidget.colorPalette, 'colorPalette');
        this.saveInDatabase(this.currentWidget.calculationType, 'calculationType');
        //this.saveInDatabase(this.currentWidget.interval, 'interval');
        this.saveInDatabase(this.currentWidget.startDate, 'startDate');
        this.saveInDatabase(this.currentWidget.endDate, 'endDate');
        this.saveInDatabase(this.currentWidget.location, 'location');
        this.saveInDatabase(this.currentWidget.deviceType, 'deviceType');
        // get data with new settings
        this.setDevicesByTypeList(this.selectedDeviceType);
    };
    PolarAreaChartVisualizationComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        // this.chartType = this.currentWidget.chartType;
        this.selectedEnd = this.currentWidget.endDate;
        this.selectedStart = this.currentWidget.startDate;
        this.currentPalette = this.currentWidget.colorPalette;
        //this.timeType = this.currentWidget.interval;
        this.selectedDeviceType = this.currentWidget.deviceType;
        this.selectedLocation = this.currentWidget.location;
        this.calculationType = this.currentWidget.calculationType;
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    PolarAreaChartVisualizationComponent.prototype.saveInDatabase = function (value, field) {
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_5__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            console.log('Error updating database entry ', error);
        });
    };
    // when changing the location, the devicelist has to be renewed
    PolarAreaChartVisualizationComponent.prototype.setDeviceList = function (location) {
        var _this = this;
        // get all devices
        this.devicemanager.getDevicesByLocation(location, this.user.id, this.project.id)
            .subscribe(function (devices) {
            var newDeviceEntities = [];
            // go through all devices of the location-based list
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
                var device = devices_1[_i];
                // go through all devices of the type-based list and filter the ones with the selected location
                for (var _a = 0, _b = _this.deviceEntities; _a < _b.length; _a++) {
                    var device2 = _b[_a];
                    if (device.deviceId === device2.deviceId) {
                        newDeviceEntities.push(device2);
                        break;
                    }
                }
            }
            _this.deviceEntities = newDeviceEntities;
            console.log("endresult device list: ", _this.deviceEntities);
        }, function (err) {
            console.log(err);
        });
    };
    PolarAreaChartVisualizationComponent.prototype.calculateLocationNumber = function () {
        var _this = this;
        // reset list:
        this.locationsList = [];
        // get all devices
        this.devicemanager.getDevicesByEntityType(this.selectedDeviceType, this.user.id, this.project.id)
            .subscribe(function (devices) {
            var contains = false;
            // go through all devices
            for (var _i = 0, devices_2 = devices; _i < devices_2.length; _i++) {
                var device = devices_2[_i];
                // go through locationlist
                for (var _a = 0, _b = _this.locationsList; _a < _b.length; _a++) {
                    var loc = _b[_a];
                    // if location of this device is already in list, set boolean variable
                    if (loc['value'] === device.location) {
                        contains = true;
                        break;
                    }
                }
                // if this location is not yet in the list, add it to the list
                if (contains === false) {
                    _this.locationsList.push({ label: device.location, value: device.location });
                }
            }
            _this.numberOfLocations = _this.locationsList.length;
        }, function (err) {
            console.log(err);
        });
    };
    // when changing the device type, the devicelist has to be cleared and renewed
    PolarAreaChartVisualizationComponent.prototype.setDevicesByTypeList = function (entityType) {
        var _this = this;
        // reset list:
        this.deviceEntities = [];
        this.locationsList = [];
        // get all devices
        //let sensorType =
        this.devicemanager.getDevicesByEntityType(entityType, this.user.id, this.project.id)
            .subscribe(function (devices) {
            console.log("devices ", devices);
            var contains = false;
            // go through all devices
            for (var _i = 0, devices_3 = devices; _i < devices_3.length; _i++) {
                var device = devices_3[_i];
                // go through all sensors and actuators and add the sensors/actuators with the selected device type to the deviceEntities List
                for (var _a = 0, _b = device.sensors; _a < _b.length; _a++) {
                    var sensor = _b[_a];
                    if (sensor.type === _this.selectedDeviceType) {
                        _this.deviceEntities.push({ deviceId: device.deviceId, entityId: sensor.id });
                    }
                }
                for (var _c = 0, _d = device.actions; _c < _d.length; _c++) {
                    var action = _d[_c];
                    if (action.type === _this.selectedDeviceType) {
                        _this.deviceEntities.push({ deviceId: device.deviceId, entityId: action.id });
                    }
                }
            }
            // get Data from Devices
            console.log("deviceEntities: ", _this.deviceEntities);
            if (_this.deviceEntities.length > 0) {
                _this.showChart(_this.myChart);
            }
        }, function (err) {
            console.log(err);
        });
    };
    // function to set color-blinded-friendly colors
    PolarAreaChartVisualizationComponent.prototype.setChartColors = function (palette) {
        console.log("palette: ", palette);
        if (!palette)
            palette = this.currentPalette;
        this.currentPalette = palette;
        /*Gradients
          The keys are percentage and the values are the color in a rgba format.
          You can have as many "color stops" (%) as you like.
          0% and 100% is not optional.*/
        var gradient;
        switch (palette) {
            case 'cool':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [220, 237, 200, 1],
                    45: [66, 179, 213, 1],
                    65: [26, 39, 62, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'warm':
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [254, 235, 101, 1],
                    45: [228, 82, 27, 1],
                    65: [77, 52, 47, 1],
                    100: [0, 0, 0, 1]
                };
                break;
            case 'neon':
            default:
                gradient = {
                    0: [255, 255, 255, 1],
                    20: [255, 236, 179, 1],
                    45: [232, 82, 133, 1],
                    65: [106, 27, 154, 1],
                    100: [0, 0, 0, 1]
                };
                break;
        }
        //Get a sorted array of the gradient keys
        var gradientKeys = Object.keys(gradient);
        gradientKeys.sort(function (a, b) {
            return +a - +b;
        });
        //Find datasets and length
        var chartType = this.currentWidget.chartType;
        switch (chartType) {
            case "pie":
            case "doughnut":
            case "polarArea":
                var datasets = this.myChart.config.data.datasets[0];
                var setsCount = datasets.data.length;
                break;
            case "bubble":
            case "bar":
            case "line":
                var datasets = this.myChart.config.data.datasets;
                var setsCount = datasets.length;
                break;
        }
        console.log("setscount: ", setsCount);
        //Calculate colors
        var chartColors = [];
        for (var i = 0; i < setsCount; i++) {
            var gradientIndex = (i + 1) * (100 / (setsCount + 1)); //Find where to get a color from the gradient
            for (var j = 0; j < gradientKeys.length; j++) {
                var gradientKey = gradientKeys[j];
                if (gradientIndex === +gradientKey) { //Exact match with a gradient key - just get that color
                    chartColors[i] = 'rgba(' + gradient[gradientKey].toString() + ')';
                    break;
                }
                else if (gradientIndex < +gradientKey) { //It's somewhere between this gradient key and the previous
                    var prevKey = gradientKeys[j - 1];
                    var gradientPartIndex = (gradientIndex - Number(prevKey)) / (Number(gradientKey) - Number(prevKey)); //Calculate where
                    var color = [];
                    for (var k = 0; k < 4; k++) { //Loop through Red, Green, Blue and Alpha and calculate the correct color and opacity
                        color[k] = gradient[prevKey][k] - ((gradient[prevKey][k] - gradient[gradientKey][k]) * gradientPartIndex);
                        if (k < 3)
                            color[k] = Math.round(color[k]);
                    }
                    chartColors[i] = 'rgba(' + color.toString() + ')';
                    break;
                }
            }
        }
        //Copy colors to the chart
        for (i = 0; i < setsCount; i++) {
            switch (chartType) {
                case "pie":
                case "polarArea":
                case "doughnut":
                    if (!datasets.backgroundColor)
                        datasets.backgroundColor = [];
                    datasets.backgroundColor[i] = chartColors[i];
                    if (!datasets.borderColor)
                        datasets.borderColor = [];
                    datasets.borderColor[i] = "rgba(255,255,255,1)";
                    break;
                case "bubble":
                case "bar":
                    datasets[i].backgroundColor = chartColors[i];
                    datasets[i].borderColor = "rgba(255,255,255,0)";
                    break;
                case "line":
                    datasets[i].borderColor = chartColors[i];
                    datasets[i].backgroundColor = "rgba(255,255,255,0)";
                    break;
            }
        }
        //Update the chart to show the new colors
        this.myChart.update();
    };
    PolarAreaChartVisualizationComponent.prototype.calculateAverage = function (list, totalTime) {
        var avg = 0;
        var start;
        var end;
        var entityValue;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var value = list_1[_i];
            if (list.indexOf(value) < (list.length - 1)) {
                start = new Date(value.DateTime);
                end = new Date(list[list.indexOf(value) + 1].DateTime);
                if (value.FloatValue !== null) {
                    entityValue = value.FloatValue;
                }
                else {
                    var vString = value.StringValue;
                    // delete Temperature unit, which is added in Openhab
                    vString = vString.replace(' °C', '');
                    entityValue = Number(vString);
                }
                avg = avg + ((end.getTime() - start.getTime()) / (totalTime * 3600000)) * entityValue;
            }
        }
        return avg;
    };
    PolarAreaChartVisualizationComponent.prototype.calculateMinimum = function (list) {
        var min;
        if (list[0].FloatValue !== null) {
            min = list[0].FloatValue;
        }
        else {
            var vString = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            vString = vString.replace(' °C', '');
            min = Number(vString);
        }
        for (var _i = 0, list_2 = list; _i < list_2.length; _i++) {
            var value = list_2[_i];
            if (value.FloatValue !== null && value.FloatValue < min) {
                min = value.FloatValue;
            }
            else
                var v2String = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            v2String = v2String.replace(' °C', '');
            if (value.StringValue !== null && Number(v2String) < min) {
                min = Number(v2String);
            }
        }
        return min;
    };
    PolarAreaChartVisualizationComponent.prototype.calculateMaximum = function (list) {
        var max;
        if (list[0].FloatValue !== null) {
            max = list[0].FloatValue;
        }
        else {
            var vString = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            vString = vString.replace(' °C', '');
            max = Number(vString);
        }
        for (var _i = 0, list_3 = list; _i < list_3.length; _i++) {
            var value = list_3[_i];
            if (value.FloatValue !== null && value.FloatValue > max) {
                max = value.FloatValue;
            }
            else
                var v2String = list[0].StringValue;
            // delete Temperature unit, which is added in Openhab
            v2String = v2String.replace(' °C', '');
            if (value.StringValue !== null && Number(v2String) > max) {
                max = Number(v2String);
            }
        }
        return max;
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('chart'),
        __metadata("design:type", Object)
    ], PolarAreaChartVisualizationComponent.prototype, "ctx", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_polarareachartwidget__WEBPACK_IMPORTED_MODULE_9__["PolarAreaChartWidget"])
    ], PolarAreaChartVisualizationComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], PolarAreaChartVisualizationComponent.prototype, "resizeFont", void 0);
    PolarAreaChartVisualizationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'polar-area-chart-visualization',
            template: __webpack_require__(/*! ./polar-area-chart-visualization.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.html"),
            styles: [__webpack_require__(/*! ./polar-area-chart-visualization.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_4__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_6__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_7__["VisualManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]])
    ], PolarAreaChartVisualizationComponent);
    return PolarAreaChartVisualizationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.css":
/*!************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.css ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".angular-with-newlines {\r\n  white-space: nowrap;\r\n}\r\n\r\n.settings-button {\r\n  transition: all 0.5s;\r\n  position: absolute;\r\n  right: 75px;\r\n  top: 5px;\r\n}\r\n\r\n.realTimeFont{\r\n  /*font-size: 40px;*/\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.html":
/*!*************************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.html ***!
  \*************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-dialog header=\"Visualization Data Settings\" [modal]=true appendTo=\"body\" [width]=\"550\" [closable]=\"false\" [visible]= \"displaySettings\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Representation settings</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Real Time Type:</div>\r\n      <p-dropdown [autoWidth]=\"true\"\r\n                  [options]=\"preSelect\" placeholder=\"Select an entity\" [(ngModel)]=\"selectedEntityType\"\r\n                  [style]=\"{'width':'200px'}\" (onChange)=\"refreshDeviceDropdown()\" appendTo=\"body\">\r\n      </p-dropdown>\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n    <div class=\"ui-g-12\">\r\n      <h3>Input settings</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Device:</div>\r\n      <div class=\"ui-g-8\">\r\n        <p-dropdown appendTo=\"body\" [options]=\"devicesList\" placeholder=\"Select a device\" [(ngModel)]=\"selectedDevice\"\r\n                    (onChange)=\"updateDropdowns()\" [style]=\"{'width':'200px'}\">\r\n        </p-dropdown>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"selectedEntityType === valueType.sensor\" class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Sensor:</div>\r\n      <div class=\"ui-g-8\">\r\n        <p-dropdown appendTo=\"body\" [options]=\"sensorList\" placeholder=\"Select a sensor\" [(ngModel)]=\"selectedEntity\"\r\n                    [style]=\"{'width':'200px'}\"(onChange)=\"this.setCompletedField(true);\">\r\n        </p-dropdown>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"selectedEntityType  === valueType.action\" class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Action:</div>\r\n      <div class=\"ui-g-8\">\r\n        <p-dropdown [autoWidth]=\"true\"\r\n                    [options]=\"actionList\" placeholder=\"Select an action\" [(ngModel)]=\"selectedEntity\"\r\n                   [style]=\"{'width':'200px'}\" (onChange)=\"this.setCompletedField(true);\">\r\n        </p-dropdown>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Position:</div>\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\"><p-radioButton  name=\"positionGroup\" value=\"right\" label=\"right\" [(ngModel)]=\"selectedPosition\" ></p-radioButton></div>\r\n        <div class=\"ui-g-12\"><p-radioButton name=\"positionGroup\" value=\"bottom\" label=\"bottom\" [(ngModel)]=\"selectedPosition\" ></p-radioButton></div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button type=\"'button\" pButton icon=\"fa-check\" (click)=\"applySettings()\" label=\"Apply\" [disabled]=\"!isCompletedField\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"abortChanges()\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n<button [hidden]=\"!(loginStatus>1 && currentWidget.isDeveloped)\" pButton icon=\"fa fa-cog\" style=\"z-index: 6;\" class=\"settings-button transparentButton tbutton ui-button-secondary\" (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" (click)=\"displaySettings=true;\"  ></button>\r\n\r\n<div *ngIf=\"selectedPosition === 'bottom'\">\r\n  <div style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%;\">\r\n    <div>\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; min-width:150px;\" [(ngModel)]=\"currentWidget.name\"\r\n             (ngModelChange)=\"saveInDatabase($event, 'name')\" class=\"gridster-item-content\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\">\r\n      <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width:100%;\">{{ currentWidget.name }}</h2>\r\n\r\n      <input pInputText *ngIf=\"currentWidget.isDeveloped\" [placeholder]=\"'Additional info'\" style=\"width:100%; min-width:150px; \" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n             (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n      <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"selectedEntityType === valueType.sensor\" #container4 style=\"width:100%; height:100%;\">\r\n    <div [fittext]=\"true\" [activateOnResize]=\"true\" [container]=\"container4\" [modelToWatch]=\"currentWidget.value\" class=\"angular-with-newlines\" style=\"text-align: center; vertical-align: middle;\">{{currentWidget.value}}\r\n    </div>\r\n\r\n  </div>\r\n  <div *ngIf=\"selectedEntityType === valueType.action\" #container3 style=\"width:100%; height:100%;\">\r\n    <div [fittext]=\"true\" [activateOnResize]=\"true\" [container]=\"container3\" [modelToWatch]=\"currentWidget.value\" class=\"angular-with-newlines\" style=\"text-align: center; vertical-align: middle;\">{{currentWidget.value}}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"selectedPosition === 'right'\" style=\"display: flex; flex-direction:row; align-items: center; height:100%; width:100%; \">\r\n  <div>\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; min-width:150px;\" [(ngModel)]=\"currentWidget.name\" (ngModelChange)=\"saveInDatabase($event, 'name')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <h2 *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; width:100%;\">{{ currentWidget.name }}</h2>\r\n\r\n    <input pInputText *ngIf=\"currentWidget.isDeveloped\" style=\"width:100%; min-width:150px; \" [(ngModel)]=\"currentWidget.additionalInfo\" (ngModelChange)=\"saveInDatabase($event, 'additionalInfo')\"\r\n           (mousedown)=\"$event.stopPropagation()\" (touchstart)=\"$event.stopPropagation()\" class=\"gridster-item-content\">\r\n    <div *ngIf=\"!currentWidget.isDeveloped\" style=\"margin: 0; color: grey; width:100%;\">{{ currentWidget.additionalInfo }}</div>\r\n  </div>\r\n\r\n  <div *ngIf=\"selectedEntityType === valueType.sensor\" #container1 style=\"padding-left: 15px; text-align: center; width:100%; height:100%;min-width: 39px\">\r\n    <div [fittext]=\"true\" [activateOnResize]=\"true\" [container]=\"container1\" [modelToWatch]=\"currentWidget.value\" class=\"angular-with-newlines\" style=\"text-align: center; vertical-align: middle;\">{{ currentWidget.value }}\r\n      <!--input display = \"!(this.currentWidget.graphType==='realtime')\"  width=\"auto\" type=\"text\" pInputText [(ngModel)]=\"realTimeUnit\"/-->\r\n  </div>\r\n\r\n  </div>\r\n  <div *ngIf=\"selectedEntityType === valueType.action\" #container2 style=\"width: 100%;height:100%;min-width: 39px;text-align: center; padding-left: 15px;\">\r\n    <div [fittext]=\"true\" [activateOnResize]=\"true\" [container]=\"container1\" [modelToWatch]=\"currentWidget.value\" class=\"angular-with-newlines\" style=\"text-align: center; vertical-align: middle;\">{{ currentWidget.value }}\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.ts":
/*!***********************************************************************************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.ts ***!
  \***********************************************************************************************************************************************/
/*! exports provided: RealtimeValueVisualizationComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RealtimeValueVisualizationComponent", function() { return RealtimeValueVisualizationComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../../../../services/visualmanager.service */ "./src/app/services/visualmanager.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../../../../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../../../../../models/frontend/valueviewwidget */ "./src/app/models/frontend/valueviewwidget.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../../../../../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









/**
 * @author Janina Hüther, Chinaedu Onwukwe
 * This component processes a {@link WidgetType#realtimeValueVisualization} Widget. This type of widget is to represent
 * the status of an entity of a device. That means it handles the representation of e.g. a action of a switch
 * or the value of a sensor in realtime. It uses the {@link ValueViewWidget} model to represent a widget.
 */
var RealtimeValueVisualizationComponent = /** @class */ (function () {
    function RealtimeValueVisualizationComponent(dataService, databaseService, devicemanager, visualmanager, fb, router) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.devicemanager = devicemanager;
        this.visualmanager = visualmanager;
        this.fb = fb;
        this.router = router;
        this.resizeFont = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * Types for user's preselection which devices to display.
         */
        this.valueType = _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"];
        /**
         * Indicates if the settings popup is visible or not
         */
        this.displaySettings = false;
        /**
         * An array to represent the device selection dropdown
         */
        this.devicesList = [];
        /**
         * An array to represent the sensor selection dropdown
         */
        this.sensorList = [];
        /**
         * An array to represent the action selection dropdown
         */
        this.actionList = [];
        /**
         * Array for user's preselection if he want to display a sensor's or an action's entity.
         */
        this.preSelect = [];
    }
    RealtimeValueVisualizationComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.dataService.userData.subscribe(function (value) { return _this.user = value; });
        this.dataService.projectData.subscribe(function (value) {
            _this.project = value;
        });
        this.initDeviceDropdown();
        this.preSelect = [
            { label: 'Sensor', value: _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].sensor },
            { label: 'Action', value: _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].action }
        ];
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedEntityType = this.currentWidget.entityType;
        if (this.currentWidget.entityId !== '' && this.currentWidget.deviceId !== '') {
            this.selectedDevice = this.currentWidget.deviceId;
            this.selectedEntity = this.currentWidget.entityId;
            this.getRealtimeData();
        }
        this.checkCompletedField();
    };
    RealtimeValueVisualizationComponent.prototype.initDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id).subscribe(function (data) {
            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
                var device = data_1[_i];
                _this.devicesList.push({ label: device.name, value: device.deviceId });
            }
            if (_this.currentWidget.deviceId != undefined) {
                //init device
                for (var _a = 0, _b = _this.devicesList; _a < _b.length; _a++) {
                    var listElem = _b[_a];
                    if (listElem.value === _this.currentWidget.deviceId) {
                        //set this device as selected in dropdown
                        console.log("set Selected Device: ", listElem.value);
                        _this.selectedDevice = listElem.value;
                        //create Sensor/Action Lists
                        _this.devicemanager.getDeviceById(_this.selectedDevice, _this.user.id, _this.project.id)
                            .subscribe(function (device) {
                            if (_this.selectedEntityType === String(_models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].sensor)) {
                                _this.sensorList = [];
                                for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                                    var sensor = _a[_i];
                                    //push all sensor values to sensorList
                                    _this.sensorList.push({ label: sensor.name, value: sensor.id });
                                    _this.setCompletedField(false);
                                }
                                // look for selected sensor
                                for (var _b = 0, _c = _this.sensorList; _b < _c.length; _b++) {
                                    var sensor = _c[_b];
                                    if (sensor.value === _this.currentWidget.entityId) {
                                        //set selected sensor
                                        _this.selectedEntity = sensor.value;
                                        _this.getRealtimeData();
                                    }
                                }
                            }
                            else if (_this.selectedEntityType === String(_models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].action)) {
                                _this.actionList = [];
                                for (var _d = 0, _e = device.actions; _d < _e.length; _d++) {
                                    var action = _e[_d];
                                    //push all sensor values to sensorList
                                    _this.actionList.push({ label: action.name, value: action.id });
                                    _this.setCompletedField(false);
                                }
                                // look for selected sensor
                                for (var _f = 0, _g = _this.actionList; _f < _g.length; _f++) {
                                    var action = _g[_f];
                                    if (action.value === _this.currentWidget.entityId) {
                                        //set selected sensor
                                        _this.selectedEntity = action.value;
                                        _this.getRealtimeData();
                                    }
                                }
                            }
                        }, function (error) {
                            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                                _this.router.navigate(['unauthorized']);
                            }
                            console.log('Devices could not been pulled from backend: ', error);
                        });
                    }
                }
            }
        }, function (err) {
            console.log(err);
        });
    };
    /**
     * This method builds the device selection dropdown menu.
     */
    RealtimeValueVisualizationComponent.prototype.refreshDeviceDropdown = function () {
        var _this = this;
        this.devicesList = [];
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (devices) {
            for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) { // TODO fehler, eine action kann auch ein valuetyp repräsentieren und ein sensor kann auch ein action haben
                var device = devices_1[_i];
                if (_this.selectedEntityType === _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].sensor && device.sensors.length > 0) { // just add devices to dropdown that have a sensor
                    _this.devicesList.push({ label: device.name, value: device.deviceId });
                }
                else if (_this.selectedEntityType === _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].action && device.actions.length > 0) { // just add devices to dropdown that have an action
                    _this.devicesList.push({ label: device.name, value: device.deviceId });
                }
            }
            _this.setCompletedField(false);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('error devicemanager');
            console.log(err);
        });
    };
    /**
     * This method decides whether to build the sensor or the dropdown menu.
     */
    RealtimeValueVisualizationComponent.prototype.updateDropdowns = function () {
        if (this.selectedEntityType === _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["EntityType"].action) {
            this.updateActionDropdown();
        }
        else {
            this.updateSensorDropdown();
        }
    };
    /**
     * This metod builds the sensor selection dropdown.
     */
    RealtimeValueVisualizationComponent.prototype.updateSensorDropdown = function () {
        var _this = this;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            _this.sensorList = [];
            for (var _i = 0, _a = device.sensors; _i < _a.length; _i++) {
                var sensor = _a[_i];
                _this.sensorList.push({ label: sensor.name, value: sensor.id });
                _this.setCompletedField(false);
            }
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Devices could not been pulled from backend: ', error);
        });
    };
    /** This method builds the action selection dropdown.
     *
     */
    RealtimeValueVisualizationComponent.prototype.updateActionDropdown = function () {
        var _this = this;
        this.devicemanager.getDeviceById(this.selectedDevice, this.user.id, this.project.id)
            .subscribe(function (device) {
            _this.actionList = [];
            for (var _i = 0, _a = device.actions; _i < _a.length; _i++) {
                var action = _a[_i];
                _this.actionList.push({ label: action.name, value: action.id });
                _this.setCompletedField(false);
            }
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Devices could not been pulled from backend: ', error);
        });
    };
    // TODO make initMethode daraus, sonst websocket
    /**
     * This method pulls the realtime data from the backend once.
     */
    RealtimeValueVisualizationComponent.prototype.getRealtimeData = function () {
        var _this = this;
        this.visualmanager.getNowData(this.selectedDevice, this.selectedEntity, this.user.id, this.project.id)
            .subscribe(function (sensorDataModel) {
            if (sensorDataModel.Values[0].FloatValue !== null) {
                _this.currentWidget.value = sensorDataModel.Values[0].FloatValue.toString();
                //this.triggerResizeFontEvent();
            }
            else {
                _this.currentWidget.value = sensorDataModel.Values[0].StringValue;
                //this.triggerResizeFontEvent();
            }
            _this.unit = sensorDataModel.Unit;
            _this.label = sensorDataModel.Values[0].DateTime;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error requesting data from backend: ', err);
        });
    };
    /**
     * This method gets called when the user applies his widget setttings.
     */
    RealtimeValueVisualizationComponent.prototype.applySettings = function () {
        this.displaySettings = false;
        this.currentWidget.deviceId = this.selectedDevice;
        this.currentWidget.entityType = this.selectedEntityType;
        this.currentWidget.entityId = this.selectedEntity;
        this.currentWidget.controlPosition = this.selectedPosition;
        this.getRealtimeData();
        //this.triggerResizeFontEvent();
        this.saveInDatabase(this.currentWidget.entityType, 'entityType');
        this.saveInDatabase(this.currentWidget.deviceId, 'deviceId');
        this.saveInDatabase(this.currentWidget.entityId, 'entityId');
        this.saveInDatabase(this.currentWidget.controlPosition, 'controlPosition');
    };
    RealtimeValueVisualizationComponent.prototype.abortChanges = function () {
        this.displaySettings = false;
        this.selectedEntityType = this.currentWidget.entityType;
        this.selectedPosition = this.currentWidget.controlPosition;
        this.selectedDevice = this.currentWidget.deviceId;
        this.selectedEntity = this.currentWidget.entityId;
    };
    /**
     * This method saves the selected options into the database.
     * @param value the value
     * @param field the field where to store
     */
    RealtimeValueVisualizationComponent.prototype.saveInDatabase = function (value, field) {
        var _this = this;
        this.databaseService.updateDocument(this.databaseService.WIDGETSCOLLECTION, this.currentWidget.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_6__["Fieldvalue"](field, value))
            .subscribe(function (result) {
        }, function (error) {
            if (error['error'] === 'Session invalid' || error['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database entry ', error);
        });
    };
    RealtimeValueVisualizationComponent.prototype.setCompletedField = function (bool) {
        this.isCompletedField = bool;
    };
    RealtimeValueVisualizationComponent.prototype.checkCompletedField = function () {
        if (this.currentWidget.deviceId && this.currentWidget.entityType && this.currentWidget.entityId) {
            this.setCompletedField(true);
        }
        else {
            this.setCompletedField(false);
        }
    };
    // resize Font event to autoadjust font size of device value
    RealtimeValueVisualizationComponent.prototype.triggerResizeFontEvent = function () {
        // trigger dynamically resizefont event
        var elements = document.getElementsByClassName('realTimeFont');
        for (var i = 0; i < elements.length; i++) {
            this.resizeFont.emit(elements[i]);
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _models_frontend_valueviewwidget__WEBPACK_IMPORTED_MODULE_5__["ValueViewWidget"])
    ], RealtimeValueVisualizationComponent.prototype, "currentWidget", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], RealtimeValueVisualizationComponent.prototype, "resizeFont", void 0);
    RealtimeValueVisualizationComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'realtime-value-visualization',
            template: __webpack_require__(/*! ./realtime-value-visualization.component.html */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.html"),
            styles: [__webpack_require__(/*! ./realtime-value-visualization.component.css */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_4__["DeviceManagerService"],
            _services_visualmanager_service__WEBPACK_IMPORTED_MODULE_3__["VisualManagerService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"],
            _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"]])
    ], RealtimeValueVisualizationComponent);
    return RealtimeValueVisualizationComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.css":
/*!**********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.css ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".buttonSideMenu {\r\n  margin-top: 0.1em;\r\n  margin-bottom: 0.1em;\r\n  margin-right: 0;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.html":
/*!***********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.html ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!-- Notifications-->\r\n<!-- Dialog for confirmation messages-->\r\n<p-confirmDialog></p-confirmDialog>\r\n<p-menu id=\"sidebarM\" [model]=\"\"></p-menu>\r\n<div style=\" position: absolute; left: 0; right: 0; top: 0; height: 100%\">\r\n\r\n  <!--div style=\"display: table-row; text-align: center; visibility: hidden\">\r\n    <button  class=\"buttonSideMenu\" pButton icon=\"fa fa-tint\"></button>\r\n    <button class=\"buttonSideMenu\" pButton icon=\"fa fa-eyedropper\"></button>\r\n    <button class=\"buttonSideMenu\" pButton icon=\"fa fa-object-ungroup\"></button>\r\n    <button class=\"buttonSideMenu\" pButton icon=\"fa fa-font\"></button>\r\n    <button class=\"buttonSideMenu\" pButton icon=\"fa fa-pie-chart\"></button>\r\n  </div-->\r\n  <div style=\"text-align: center; padding: 10px 10px 5px 10px;\">\r\n    <i (click)=\"op.toggle($event)\" style=\"text-align: center; cursor: pointer; font-size: 1.5em; margin-top: 5px; margin-bottom: 5px\" class=\"fa fa-th-large\"></i><br>\r\n    <!--<i style=\"cursor: pointer; font-size: 1.5em; margin-top: 5px; margin-bottom: 5px\" class=\"fa fa-eye\"></i><br>\r\n    <i style=\"cursor: pointer; font-size: 1.5em; margin-top: 5px; margin-bottom: 5px\"  class=\"fa fa-cart-plus\"></i!-->\r\n  </div>\r\n  <p-menu #menu [popup]=\"true\" [model]=\"itemsDelete\" appendTo=\"body\"></p-menu>\r\n  <div style=\" text-align: center; padding: 5px 10px 10px 10px; \">\r\n    <i (click)=\"menu.toggle($event)\" style=\"cursor: pointer;  font-size: 1.5em\" class=\"fa fa-trash\"></i>\r\n  </div>\r\n</div>\r\n\r\n<p-overlayPanel #op appendTo=\"body\">\r\n  <!--<div class=\"ui-inputgroup\">\r\n    <input id=\"input\" style=\"width: 100%;\" type=\"text\" pInputText placeholder=\"Widgetname\">\r\n    <button pButton type=\"button\" icon=\"fa fa-search\"></button>\r\n  </div>-->\r\n\r\n  <div>\r\n    <p-panelMenu [model]=\"items\" [style]=\"{'width':'300px'}\"></p-panelMenu>\r\n  </div>\r\n</p-overlayPanel>\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.ts ***!
  \*********************************************************************************/
/*! exports provided: SidebarContentComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SidebarContentComponent", function() { return SidebarContentComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../models/frontend/widget */ "./src/app/models/frontend/widget.ts");
/* harmony import */ var _rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../rules/service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/* tslint:disable */








var SidebarContentComponent = /** @class */ (function () {
    function SidebarContentComponent(databaseService, dataService, confirmationService, projectService, ruleCreationService, router) {
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.confirmationService = confirmationService;
        this.projectService = projectService;
        this.ruleCreationService = ruleCreationService;
        this.router = router;
        this.msgs = [];
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    SidebarContentComponent.prototype.showRuleCreationDialog = function () {
        this.displayRuleCreationDialog = true;
        this.ruleCreationService.displayStatusUpdated.emit(this.displayRuleCreationDialog);
        this.ruleCreationService.displayManagementStatusUpdated.emit(false);
    };
    SidebarContentComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData
            .subscribe(function (project) { return _this.project = project; });
        this.dataService.currentDashboardId
            .subscribe(function (dashboardId) { return _this.currentDashboardId = dashboardId; });
        this.dataService.currentSheetId
            .subscribe(function (sheetId) { return _this.currentSheetId = sheetId; });
        this.dataService.currentSheet.subscribe(function (cSheet) { return _this.currentSheet = cSheet; });
        this.dataService.currentDashboardID.subscribe(function (id) { return _this.dashboardID = id; });
        this.dataService.currentProjectID.subscribe(function (value) { return _this.projectID = value; });
        var barDaughter = document.getElementById('sidebarM').children.item(0);
        barDaughter.style.width = '50px';
        barDaughter.style.height = '100%';
        barDaughter.style.textAlign = 'center';
        this.dialogOpened = false;
        this.ruleCreationService.displayStatusUpdated.subscribe(function (response) {
            _this.displayRuleCreationDialog = response;
        });
        this.items = [
            {
                label: 'Device Management',
                icon: 'fa fa-laptop',
                items: [
                    {
                        label: 'Add Device', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].addDevice.toString());
                        }
                    },
                    {
                        label: 'Delete Device', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].deleteDevice.toString());
                        }
                    }
                ]
            },
            {
                label: 'Device Control',
                icon: 'fa fa-sliders',
                items: [
                    {
                        label: 'Slider',
                        command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].sliderDeviceControl.toString());
                        }
                    },
                    {
                        label: 'Toggle', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].toggleDeviceControl.toString());
                        }
                    },
                    {
                        label: 'State Changer', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].stateDeviceControl.toString());
                        }
                    }
                ]
            },
            {
                label: 'Device Visualization',
                icon: 'fa fa-bar-chart',
                items: [
                    {
                        label: 'Bar Chart', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].barChartVisualization.toString());
                        }
                    },
                    /* {
                       label: 'Bubble Chart', command: (event: Event) => {
                         this.projectService.generateWidget(WidgetType.bubbleChartVisualization.toString());
                       }
                     },*/
                    {
                        label: 'Doughnut Chart', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].doughnutChartVisualization.toString());
                        }
                    },
                    {
                        label: 'Line Chart', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].lineChartVisualization.toString());
                        }
                    },
                    {
                        label: 'Polar Area Chart', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].polarAreaChartVisualization.toString());
                        }
                    },
                    {
                        label: 'Realtime Value', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].realtimeValueVisualization.toString());
                        }
                    }
                ]
            },
            {
                label: 'Anomaly Detection',
                icon: 'fa fa-binoculars',
                items: [
                    {
                        label: 'History Anomaly Detection', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].historyAnomaly.toString());
                        }
                    },
                    {
                        label: 'Realtime Anomaly Detection', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].realtimeAnomaly.toString());
                        }
                    }
                ]
            },
            {
                label: 'Rules',
                icon: 'fa fa-code-fork',
                items: [
                    { label: 'Creation', command: function (event) { _this.showRuleCreationDialog(); } },
                    {
                        label: 'Management', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].ruleManagementView.toString());
                        }
                    },
                    { label: 'Notification', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].ruleNotificationView.toString());
                        } },
                    { label: 'Sharing', command: function (event) {
                            _this.projectService.generateWidget(_models_frontend_widget__WEBPACK_IMPORTED_MODULE_6__["WidgetType"].ruleSharingViewWidget.toString());
                        } }
                ]
            }
        ];
        this.itemsDelete = [
            {
                label: 'Delete Dashboard',
                command: function (event1) { return _this.deleteConfirmation(); }
            },
            {
                label: 'Delete Project',
                command: function (event1) { return _this.deleteProjectConfirmation(); }
            }
        ];
    };
    SidebarContentComponent.prototype.deleteConfirmation = function () {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete current dashboard ?',
            header: 'Delete Dashboard',
            icon: 'fa fa-trash',
            accept: function () {
                // delete sheet
                _this.projectService.deleteDashboard(_this.currentDashboardId);
                _this.msgs = [{ severity: 'success', summary: 'Confirmed', detail: 'Dashboard deleted' }];
                _this.msgs.push();
            },
            reject: function () {
                _this.msgs = [{ severity: 'info', summary: 'Canceled', detail: 'Canceled deletion.' }];
            }
        });
    };
    SidebarContentComponent.prototype.deleteProjectConfirmation = function () {
        var _this = this;
        this.confirmationService.confirm({
            message: 'Do you want to delete current project ?',
            header: 'Delete Project',
            icon: 'fa fa-trash',
            accept: function () {
                // delete sheet
                _this.projectService.deleteProject();
                _this.msgs = [{ severity: 'success', summary: 'Confirmed', detail: 'Project deleted' }];
                _this.msgs.push();
            },
            reject: function () {
                _this.msgs = [{ severity: 'info', summary: 'Canceled', detail: 'Canceled deletion.' }];
            }
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], SidebarContentComponent.prototype, "messageEvent", void 0);
    SidebarContentComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-sidebar-content',
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"]],
            template: __webpack_require__(/*! ./sidebar-content.component.html */ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.html"),
            styles: [__webpack_require__(/*! ./sidebar-content.component.css */ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.css")]
        }),
        __metadata("design:paramtypes", [_services_database_service__WEBPACK_IMPORTED_MODULE_3__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"],
            primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"],
            _services_project_service__WEBPACK_IMPORTED_MODULE_5__["ProjectService"],
            _rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_7__["RuleCreationService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"]])
    ], SidebarContentComponent);
    return SidebarContentComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/main-menu.component.css":
/*!**************************************************!*\
  !*** ./src/app/skeleton/main-menu.component.css ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".clickDigitalLogo {\r\n  width: 124px;\r\n  position:absolute;\r\n  left:7px;\r\n  top: 7px;\r\n}\r\n\r\n::ng-deep .ui-menubar {\r\n  padding-left: 148px;\r\n}\r\n\r\n::ng-deep .ui-menuitem {\r\n  white-space: nowrap;\r\n}\r\n\r\n.ui-menuitem-text {\r\n  color: #222222 !important;\r\n}\r\n\r\n.ui-menuitem-icon {\r\n  color: #222222 !important;\r\n}\r\n\r\n@media only screen and (min-width: 840px){\r\n  .verticalMenu {\r\n    display: none !important;\r\n  }\r\n}\r\n\r\n@media only screen and (max-width: 840px){\r\n  .horizontalMenu {\r\n    display: none !important;\r\n  }\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/main-menu.component.html":
/*!***************************************************!*\
  !*** ./src/app/skeleton/main-menu.component.html ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<!--Main Menu Bar with User profile, Platforms, ...-->\r\n<div id=\"topBar\">\r\n\r\n\r\n  <p-overlayPanel #op>\r\n    <app-user-settings (messageEvent)=\"forwardMsgToDashboardComponent($event)\"></app-user-settings></p-overlayPanel>\r\n  <p-menubar [model]=\"items\" class=\"horizontalMenu\">\r\n    <p-menu #menuThemeHor [popup]=\"true\" [model]=\"itemsTheme\"></p-menu>\r\n    <app-notify-message></app-notify-message>\r\n    <button type=\"button\" pButton icon=\"fa fa-paint-brush\" (click)=\"menuThemeHor.toggle($event)\"></button>\r\n    <button type=\"button\" pButton icon=\"fa fa-user\" (click)=\"op.toggle($event)\"></button>\r\n    <img class=\"clickDigitalLogo\" src=\"assets/img/clickdigitallogo.svg\">\r\n  </p-menubar>\r\n\r\n\r\n  <p-menubar *ngIf=\"items !== undefined\" [model]=\"items\" class=\"verticalMenu\">\r\n    <p-menu #mobileMenuIcon [model]=\"items\" [popup]=\"true\"></p-menu>\r\n    <p-menu #menuTheme [popup]=\"true\" [model]=\"itemsTheme\"></p-menu>\r\n    <button type=\"button\" pButton icon=\"fa fa-paint-brush\" (click)=\"menuTheme.toggle($event)\"></button>\r\n    <button type=\"button\" pButton icon=\"fa fa-user\" (click)=\"op.toggle($event)\"></button>\r\n    <button type=\"button\" pButton icon=\"fa fa-bars\" (click)=\"mobileMenuIcon.toggle($event)\"></button>\r\n    <img class=\"clickDigitalLogo\" src=\"assets/img/clickdigitallogo.svg\">\r\n  </p-menubar>\r\n\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/main-menu.component.ts":
/*!*************************************************!*\
  !*** ./src/app/skeleton/main-menu.component.ts ***!
  \*************************************************/
/*! exports provided: MainMenuComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainMenuComponent", function() { return MainMenuComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _models_database_sheet__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../models/database/sheet */ "./src/app/models/database/sheet.ts");
/* harmony import */ var _models_database_dashboard__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/database/dashboard */ "./src/app/models/database/dashboard.ts");
/* harmony import */ var _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../models/frontend/fieldvalue */ "./src/app/models/frontend/fieldvalue.ts");
/* harmony import */ var _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../models/frontend/sheet */ "./src/app/models/frontend/sheet.ts");
/* harmony import */ var _models_frontend_dashboard__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/frontend/dashboard */ "./src/app/models/frontend/dashboard.ts");
/* harmony import */ var _dashboard_rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dashboard/rules/service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};














var MainMenuComponent = /** @class */ (function () {
    function MainMenuComponent(dataService, databaseService, route, router, usermanager, devicemanager, projectService, ruleCreationService) {
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.route = route;
        this.router = router;
        this.usermanager = usermanager;
        this.devicemanager = devicemanager;
        this.projectService = projectService;
        this.ruleCreationService = ruleCreationService;
        this.projectMenue = [];
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    MainMenuComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.userData
            .subscribe(function (user) { return _this.user = user; });
        this.dataService.projectData
            .subscribe(function (value) { return _this.project = value; });
        this.buildTopMenu();
        this.onSetTheme(this.project.theme);
        this.buildThemeMenu();
        this.dataService.currentDashboardId
            .subscribe(function (value) { return _this.currentDashboardId = value; });
        this.dataService.refreshMenu
            .subscribe(function (result) {
            _this.buildTopMenu();
        });
        // this.checkDevices();
    };
    MainMenuComponent.prototype.forwardMsgToDashboardComponent = function ($event) {
        this.messageEvent.emit($event);
    };
    MainMenuComponent.prototype.buildThemeMenu = function () {
        var _this = this;
        this.itemsTheme = [
            {
                label: 'Omega',
                command: function (event) {
                    _this.onSetTheme('omega');
                }
            },
            {
                label: 'Lightness',
                command: function (event) {
                    _this.onSetTheme('lightness');
                }
            },
            {
                label: 'Bootstrap',
                command: function (event) {
                    _this.onSetTheme('bootstrap');
                }
            },
            {
                label: 'Cruze',
                command: function (event) {
                    _this.onSetTheme('cruze');
                }
            },
            {
                label: 'Cupertino',
                command: function (event) {
                    _this.onSetTheme('cupertino');
                }
            },
            {
                label: 'Darkness',
                command: function (event) {
                    _this.onSetTheme('darkness');
                }
            },
            {
                label: 'Flick',
                command: function (event) {
                    _this.onSetTheme('flick');
                }
            },
            {
                label: 'Home',
                command: function (event) {
                    _this.onSetTheme('home');
                }
            },
            {
                label: 'Kasper',
                command: function (event) {
                    _this.onSetTheme('kasper');
                }
            },
            {
                label: 'Ludvig',
                command: function (event) {
                    _this.onSetTheme('ludvig');
                }
            },
            {
                label: 'Pepper-Grinder',
                command: function (event) {
                    _this.onSetTheme('pepper-grinder');
                }
            },
            {
                label: 'Redmond',
                command: function (event) {
                    _this.onSetTheme('redmond');
                }
            },
            {
                label: 'Rocket',
                command: function (event) {
                    _this.onSetTheme('rocket');
                }
            },
            {
                label: 'South-Street',
                command: function (event) {
                    _this.onSetTheme('south-street');
                }
            },
            {
                label: 'Start',
                command: function (event) {
                    _this.onSetTheme('start');
                }
            },
            {
                label: 'Trontastic',
                command: function (event) {
                    _this.onSetTheme('trontastic');
                }
            },
            {
                label: 'Voclain',
                command: function (event) {
                    _this.onSetTheme('voclain');
                }
            }
        ];
    };
    MainMenuComponent.prototype.buildTopMenu = function () {
        var _this = this;
        var projectMenue = new Array(this.user.projects.length); // TODO has to be length +1 when adding item to add new dashboard
        this.databaseService.getDocuments(this.databaseService.PROJECTSCOLLECTION, this.user.projects)
            .subscribe(function (value) {
            _this.ruleCreationService.projectsUpdate.emit(value);
            var _loop_1 = function (i) {
                var menuItem_1 = {};
                menuItem_1['label'] = value[i].name;
                menuItem_1['command'] = function (event) {
                    _this.projectService.loadNewProject(value[i].id, true);
                };
                projectMenue[i] = menuItem_1;
            };
            for (var i = 0; i < value.length; i++) {
                _loop_1(i);
            }
            var menuItem = {};
            menuItem['label'] = 'New project';
            menuItem['command'] = function (event) {
                _this.projectService.generateProject();
            };
            menuItem['icon'] = 'fa fa-plus';
            // projectMenue[projectMenue.length - 1] = menuItem; // for the item to add a new project
            _this.projectMenue = projectMenue;
            _this.items = [
                {
                    label: 'Projects',
                    items: _this.projectMenue,
                    icon: 'fa fa-suitcase'
                },
                {
                    label: 'Dashboards',
                    items: _this.getDashboards(),
                    icon: 'fa fa-dashboard'
                },
                {
                    label: 'Platforms',
                    routerLink: ['/platform-settings'],
                    icon: 'fa fa-connectdevelop'
                } /*,
                {
                  label: 'Share with client',
                  routerLink: ['/project-sharing'],
                  icon: 'fa fa-share-alt'
                }*/
            ];
        });
    };
    MainMenuComponent.prototype.getDashboards = function () {
        var _this = this;
        var dashboardMenue;
        dashboardMenue = new Array(this.project.dashboards.length); // TODO has to be length +1 when adding item to add new dashboard
        var _loop_2 = function (i) {
            var menuItem_2 = {};
            menuItem_2.label = this_1.project.dashboards[i].name;
            menuItem_2.command = function (event) {
                console.log("change Dashboard to: ", _this.project.dashboards[i].id);
                _this.changeDashboard(_this.project.dashboards[i].id);
            };
            dashboardMenue[i] = menuItem_2;
        };
        var this_1 = this;
        for (var i = 0; i < this.project.dashboards.length; i++) {
            _loop_2(i);
        }
        var menuItem = {};
        menuItem['label'] = 'New dashboard';
        menuItem['command'] = function (event) {
            _this.generateDashboard();
        };
        menuItem['icon'] = 'fa fa fa-plus';
        //dashboardMenue[dashboardMenue.length - 1] = menuItem; // for the item to add new dashboards
        return dashboardMenue;
    };
    MainMenuComponent.prototype.generateDashboard = function () {
        var _this = this;
        var newSheet = new _models_frontend_sheet__WEBPACK_IMPORTED_MODULE_11__["Sheet"](uuid_v4__WEBPACK_IMPORTED_MODULE_7___default()(), 'Sheet 1', []);
        var newDashboard = new _models_frontend_dashboard__WEBPACK_IMPORTED_MODULE_12__["Dashboard"](uuid_v4__WEBPACK_IMPORTED_MODULE_7___default()(), "Dashboard " + (this.project.dashboards.length + 1), [newSheet]);
        this.databaseService.insertDocument(this.databaseService.SHEETSSCOLLECTION, new _models_database_sheet__WEBPACK_IMPORTED_MODULE_8__["SheetDB"](newSheet.id, newSheet.name, []))
            .subscribe(function (result) {
            _this.databaseService.insertDocument(_this.databaseService.DASHBOARDSCOLLECTION, new _models_database_dashboard__WEBPACK_IMPORTED_MODULE_9__["DashboardDB"](newDashboard.id, newDashboard.name, [newDashboard.sheets[0].id]))
                .subscribe(function (result) {
                _this.databaseService.pushToDocumentsList(_this.databaseService.PROJECTSCOLLECTION, _this.project.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_10__["Fieldvalue"]('dashboards', newDashboard.id))
                    .subscribe(function (result) {
                    _this.project.dashboards.push(newDashboard);
                    _this.buildTopMenu();
                    _this.changeDashboard(newDashboard.id);
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('Error while inserting into database ', err);
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Error while inserting into database ', err);
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error while inserting into database ', err);
        });
    };
    /**
     * This method changes the theme of a project
     * @param theme the theme to set to
     */
    MainMenuComponent.prototype.onSetTheme = function (theme) {
        var _this = this;
        var themeLink = document.getElementById('theme-css');
        themeLink.href = './assets/resources/themes/' + theme + '/theme.css';
        this.dataService.changeTheme(theme);
        this.databaseService.updateDocument(this.databaseService.PROJECTSCOLLECTION, this.project.id, new _models_frontend_fieldvalue__WEBPACK_IMPORTED_MODULE_10__["Fieldvalue"]('theme', theme))
            .subscribe(function (result) {
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Error updating database', err);
        });
    };
    /**
     * This method changes the current displayed dashboard
     * @param id the id of the dashboard to display
     */
    MainMenuComponent.prototype.changeDashboard = function (id) {
        this.dataService.changeCurrentDashboardId(id);
        this.dataService.changeCurrentSheetId(this.project.dashboards.find(function (x) { return x.id === id; }).sheets[0].id); // set the first sheet of the new dashboard
    };
    /*Tracking function for ngFor Directive in dashboard.component.html*/
    MainMenuComponent.prototype.trackDashboard = function (index, item) {
        return item;
    };
    MainMenuComponent.prototype.trackProject = function (index, item) {
        return item;
    };
    MainMenuComponent.prototype.checkDevices = function () {
        var _this = this;
        this.devicemanager.getAllDevices(this.user.id, this.project.id)
            .subscribe(function (result) {
            // log result.message
            console.log('Got all Devices');
            console.log(result);
            var devices = result;
            _this.updateDevices(devices);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Device could not been pulled from the backend server.');
            console.log(err);
        });
    };
    // Http Requests to the backendserver to check for updates
    MainMenuComponent.prototype.updateDevices = function (devices) {
        var _this = this;
        var report;
        var successDevices = [];
        var successCount = 0;
        var failCount = 0;
        var failDevices = [];
        var failReports = [];
        var _loop_3 = function (device) {
            this_2.devicemanager.UpdateDevice(device.deviceId, this_2.user.id, this_2.project.id)
                .subscribe(function (result) {
                // log result.message
                console.log('Update checked successfully.');
                report = result.status;
                switch (report) {
                    // if update failed
                    case 0: {
                        failDevices.push(device.name);
                        failReports.push(result.errorReport);
                        failCount++;
                        break;
                    }
                    // if update succeeded
                    case 1: {
                        successDevices.push(device.name);
                        successCount++;
                        break;
                    }
                    // if there is no update
                    default:
                        break;
                }
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                console.log('Update could not be checked.');
                console.log(err);
            });
        };
        var this_2 = this;
        // request updates for all devices
        for (var _i = 0, devices_1 = devices; _i < devices_1.length; _i++) {
            var device = devices_1[_i];
            _loop_3(device);
        }
        // TODO PrimeNG popup
        /*
        const info: string = successCount + ' devices were updated and ' + failCount + ' devices failed to update.';
        if (this.loginStatus > 0) {
        this.snackBarRef = this.snackBar.open(info, 'more...', {
          duration: 2000
        }).onAction().subscribe(() => {
          // Todo: here could be a dialog with all the devices and failReports.
        });
        }*/
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], MainMenuComponent.prototype, "messageEvent", void 0);
    MainMenuComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'main-menu',
            template: __webpack_require__(/*! ./main-menu.component.html */ "./src/app/skeleton/main-menu.component.html"),
            styles: [__webpack_require__(/*! ./main-menu.component.css */ "./src/app/skeleton/main-menu.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"],
            _angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"],
            _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"],
            _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_5__["DeviceManagerService"],
            _services_project_service__WEBPACK_IMPORTED_MODULE_6__["ProjectService"],
            _dashboard_rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_13__["RuleCreationService"]])
    ], MainMenuComponent);
    return MainMenuComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/platform-settings/platform-settings.component.css":
/*!****************************************************************************!*\
  !*** ./src/app/skeleton/platform-settings/platform-settings.component.css ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#siteContainer {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: table-row;\r\n  background: white;\r\n  padding: 4px;\r\n}\r\n#menuContainer{\r\n  display: table-row;\r\n}\r\n.expansion-panel{\r\nposition: relative;\r\n  margin: 20px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n.rightside {\r\n  position: absolute;\r\n  right: 20px;\r\n  bottom: 3px;\r\n}\r\n.bottom_toolbar {\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n}\r\n.devices{\r\n  text-align: right;\r\n}\r\n.edit-button {\r\n  position: absolute;\r\n  right: 50px;\r\n}\r\n.delete-button {\r\n  position: absolute;\r\n  right: 90px;\r\n}\r\n.add-sign{\r\n  color: gray;\r\n  font-size: 200px;\r\n}\r\n.button-circle-middle{\r\n  margin-bottom: 10px;\r\n}\r\n.textNoPlatforms{\r\n\r\n}\r\n.container-NoPlatforms{\r\n  position: absolute;\r\n  top:40%;\r\n  left: 35%;\r\n  text-align: center;\r\n}\r\n::ng-deep .ui-accordion-header{\r\n  overflow: auto;\r\n  align-items: center !important;\r\n  margin-top: auto !important;\r\n  margin-bottom: auto !important;\r\n  padding: 0 !important;\r\n}\r\n::ng-deep .ng-tns-c6-23 {\r\n  padding: 0;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/platform-settings/platform-settings.component.html":
/*!*****************************************************************************!*\
  !*** ./src/app/skeleton/platform-settings/platform-settings.component.html ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"siteWrapper\" style=\"min-height: 100%; width: 100%; display: table;\">\r\n  <div id=\"menuContainer\">\r\n    <main-menu></main-menu>\r\n  </div>\r\n\r\n  <div id=\"siteContainer\">\r\n<!-- Iot Platform Verwaltungsseite -->\r\n  <p-confirmDialog [closable]=\"false\"></p-confirmDialog>\r\n  <p-dialog [modal]=\"true\" header=\"Connect a Platform\" [(visible)]=\"displayEdit\" [closable]=\"false\">\r\n    <div class=\"center\">\r\n      <div class=\"ui-message ui-messages-info ui-corner-all\"><i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i> If you want to add a new platform over Aiotes, please make sure that the ip adress of Aiotes is configured in the config-file.</div>\r\n      <p>Please select the platform you want to add:</p>\r\n      <p-dropdown [autoWidth]=\"true\"\r\n                  [style]=\"{'width': '100%'}\" [options]=\"allPlatforms\" placeholder=\"Select a Platform\" [(ngModel)]=\"selectedPlatform\"></p-dropdown>\r\n      <p>Please enter the connection data for the platform:</p>\r\n\r\n        <input type=\"text\" style=\"margin-bottom : 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"name\" placeholder = 'Name'>\r\n   <br>\r\n        <input type=\"text\" style=\"margin-bottom : 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"ip\" placeholder = 'IP Adress'>\r\n      <br>\r\n         <input type=\"number\" style=\"margin-bottom : 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"port\" placeholder = 'Port'>\r\n       <!--<br><input type=\"text\" style=\"margin-bottom : 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"username\" placeholder = 'Username'>\r\n     <br>\r\n        <input type=\"password\" style=\"margin-bottom : 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"password\" placeholder = 'Password'>-->\r\n\r\n    </div>\r\n    <p-footer>\r\n      <button type=\"button\" pButton icon=\"fa-check\" (click)=\"addPlatform();\" label=\"Connect\"></button>\r\n      <button type=\"button\" pButton icon=\"fa-close\" (click)=\"displayEdit=false;\" label=\"Cancel\"></button>\r\n    </p-footer>\r\n  </p-dialog>\r\n   <div style=\"padding: 5px;\">\r\n  <h3>Setup Aiotes Bridge to SIL</h3>\r\n     <input type=\"text\" style=\"margin-bottom : 0.9em; margin-right: 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"systemIp\" placeholder = 'Local System IP Adress'>\r\n     <input type=\"number\" style=\"margin-bottom : 0.9em; margin-right: 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"clickdigitalPort\" placeholder = 'Local ClickDigital Port'>\r\n    <input type=\"text\" style=\"margin-bottom : 0.9em; margin-right: 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"bridgeIp\" placeholder = 'Aiotes IP Adress'>\r\n    <input type=\"number\" style=\"margin-bottom : 0.9em; margin-right: 0.9em;\" size=\"20\" pInputText [(ngModel)]=\"bridgePort\" placeholder = 'Aiotes Port'>\r\n    <p-button style=\"padding-top: 0.5em;\" *ngIf=\"loginStatus > 0\" label = \"Connect to Aiotes\" (onClick)=\"changeBridge()\">\r\n    </p-button>\r\n    <h3>Platforms</h3>\r\n    <div *ngIf=\" connectedPlatforms.length != 0;\">\r\n       <p-accordion [multiple]=\"true\">\r\n        <div *ngFor=\"let platform of connectedPlatforms\">\r\n          <p-accordionTab  style=\"align-items: center; overflow: auto;\">\r\n            <p-header>\r\n                  {{ platform['name'] }}\r\n              <span style=\" position: absolute; right: 0;\">\r\n                <p-button *ngIf=\"loginStatus > 0\"  icon=\"fa fa-pencil-square-o\" (onClick)=\"showEditDialog()\">\r\n                  </p-button>\r\n                <p-button *ngIf=\"loginStatus > 0\" icon=\"fa fa-trash\"  (onClick)=\"deletePlatform(platform)\">\r\n                  </p-button>\r\n              </span>\r\n            </p-header>\r\n           <p>IP: {{ platform['ip'] }}</p>\r\n           <p> Username : {{ platform['username'] }}</p>\r\n         </p-accordionTab>\r\n        </div>\r\n       </p-accordion>\r\n    </div>\r\n    <p-button style=\"padding-top: 0.5em;\" *ngIf=\"loginStatus > 0\"  icon=\"fa fa-plus\" label = \"New Platform\" (onClick)=\"showEditDialog()\">\r\n    </p-button>\r\n   </div>\r\n\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/platform-settings/platform-settings.component.ts":
/*!***************************************************************************!*\
  !*** ./src/app/skeleton/platform-settings/platform-settings.component.ts ***!
  \***************************************************************************/
/*! exports provided: PlatformSettingsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformSettingsComponent", function() { return PlatformSettingsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/devicemanager.service */ "./src/app/services/devicemanager.service.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _models_backend_platform__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../models/backend/platform */ "./src/app/models/backend/platform.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var PlatformSettingsComponent = /** @class */ (function () {
    function PlatformSettingsComponent(dataService, overlayContainer, devicemanager, confirmService, router) {
        this.dataService = dataService;
        this.overlayContainer = overlayContainer;
        this.devicemanager = devicemanager;
        this.confirmService = confirmService;
        this.router = router;
        this.connectedPlatforms = [];
        this.allPlatforms = [];
        this.displayEdit = false;
        this.msgs = [];
    }
    PlatformSettingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.projectData
            .subscribe(function (value) {
            _this.project = value;
        });
        this.displayEdit = false;
        this.dataService.currentLoginStatus.subscribe(function (status) { return _this.loginStatus = status; });
        console.log('CURRYLS ', this.loginStatus);
        this.dataService.currentTheme.subscribe(function (value) { return _this.changeTheme(value); });
        this.dataService.currentLoginUUID.subscribe(function (uid) { return _this.userId = uid; });
        this.devicemanager.getAllPlatforms(this.userId, this.project.id)
            .subscribe(function (result) {
            _this.connectedPlatforms = result;
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        this.refreshPlatformDropdown();
    };
    /*Function to add a new Platform*/
    PlatformSettingsComponent.prototype.addPlatform = function () {
        var _this = this;
        var platform = new _models_backend_platform__WEBPACK_IMPORTED_MODULE_5__["Platform"](this.name, this.ip, String(this.port), this.username, this.password, this.selectedPlatform.platformId, this.userId, this.project.id, this.selectedPlatform.externalPlatformId);
        console.log('Platform: ', platform);
        this.devicemanager.connectPlatform(platform)
            .subscribe(function (result) {
            // log result.message
            //console.log('SLP: ' + this.selectedPlatform);
            console.log(result);
            _this.refreshPlatformList();
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
        this.refreshPlatformDropdown();
        this.displayEdit = false;
    };
    PlatformSettingsComponent.prototype.changeBridge = function () {
        var _this = this;
        this.devicemanager.changeAiotesBridge(this.bridgeIp, this.bridgePort, this.systemIp, this.clickdigitalPort, this.userId, this.project.id)
            .subscribe(function (result) {
            // log result.message
            console.log(result);
            _this.msgs = [{ severity: 'info', summary: 'Confirmed', detail: 'Updated Aiotes Bridge.' }];
            _this.msgs.push();
            _this.refreshPlatformDropdown();
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    // selected Platform gets deleted
    PlatformSettingsComponent.prototype.deletePlatform = function (platform) {
        var _this = this;
        this.confirmService.confirm({
            message: 'Do you want to delete this platform?',
            header: 'Delete Platform',
            icon: 'fa fa-trash',
            accept: function () {
                // delete platform
                _this.devicemanager.deletePlatform(platform['platformId'], _this.userId, _this.project.id).subscribe(function (result) {
                    // log result.message
                    console.log('DeletePlatform was sent to backend server');
                    console.log(result);
                    _this.refreshPlatformList();
                    _this.msgs = [{ severity: 'info', summary: 'Confirmed', detail: 'Platform deleted' }];
                    _this.msgs.push();
                }, function (err) {
                    if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                        _this.router.navigate(['unauthorized']);
                    }
                    console.log('DeleteDevice could not been sent to backend server');
                    console.log(err);
                });
            },
            reject: function () {
                _this.msgs = [{ severity: 'info', summary: 'Canceled', detail: 'Canceled deletion.' }];
                _this.msgs.push();
            }
        });
        this.refreshPlatformDropdown();
    };
    PlatformSettingsComponent.prototype.showEditDialog = function () {
        this.displayEdit = true;
        this.refreshPlatformDropdown();
    };
    ;
    PlatformSettingsComponent.prototype.changeTheme = function (theme) {
        if (theme !== undefined) {
            this.overlayContainer.getContainerElement().classList.add(theme);
            this.componentCssClass = theme;
        }
        else {
            this.router.navigate(['dashboard']);
        }
    };
    PlatformSettingsComponent.prototype.refreshPlatformList = function () {
        var _this = this;
        this.devicemanager.getAllPlatforms(this.userId, this.project.id).subscribe(function (result) {
            _this.connectedPlatforms = result;
            console.log('Platform request success');
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    PlatformSettingsComponent.prototype.refreshPlatformDropdown = function () {
        var _this = this;
        console.log("refreh Platform Dropdown");
        this.allPlatforms = [];
        this.devicemanager.searchForPlatforms(this.userId, this.project.id)
            .subscribe(function (result) {
            _this.allPlatforms = result.map(function (elem) {
                return { label: elem['name'], value: elem };
            });
            console.log("refreh Platform Dropdown2");
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log(err);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], PlatformSettingsComponent.prototype, "componentCssClass", void 0);
    PlatformSettingsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-platform-settings',
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"]],
            template: __webpack_require__(/*! ./platform-settings.component.html */ "./src/app/skeleton/platform-settings/platform-settings.component.html"),
            styles: [__webpack_require__(/*! ./platform-settings.component.css */ "./src/app/skeleton/platform-settings/platform-settings.component.css")]
        }),
        __metadata("design:paramtypes", [_services_data_service__WEBPACK_IMPORTED_MODULE_1__["DataService"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__["OverlayContainer"], _services_devicemanager_service__WEBPACK_IMPORTED_MODULE_3__["DeviceManagerService"], primeng_api__WEBPACK_IMPORTED_MODULE_4__["ConfirmationService"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]])
    ], PlatformSettingsComponent);
    return PlatformSettingsComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/project-sharing/project-sharing.component.css":
/*!************************************************************************!*\
  !*** ./src/app/skeleton/project-sharing/project-sharing.component.css ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "#siteContainer {\r\n  height: 100%;\r\n  width: 100%;\r\n  display: table-row;\r\n  background: white;\r\n}\r\n#menuContainer{\r\n  display: table-row;\r\n}\r\n"

/***/ }),

/***/ "./src/app/skeleton/project-sharing/project-sharing.component.html":
/*!*************************************************************************!*\
  !*** ./src/app/skeleton/project-sharing/project-sharing.component.html ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div id=\"siteWrapper\" style=\"min-height: 100%; width: 100%; display: table;\">\r\n  <div id=\"menuContainer\">\r\n<main-menu></main-menu>\r\n  </div>\r\n\r\n  <div id=\"siteContainer\">\r\n    <!-- Notifications-->\r\n    <div *ngIf=\"loginStatus > 0\">\r\n    <div class=\"text ui-grid-row\">\r\n    <p style=\"text-align: center\">In this tool you're able to export a existing project.ts into enduser accounts.</p>\r\n    <p style=\"text-align: center\">The enduser account must be created by the <strong>enduser</strong> because you should not able to see or set the password!</p>\r\n    <p style=\"text-align: center\">Exporting a project to a enduser may <strong>overwrites</strong> existing exports in the enduser account.</p><br>\r\n    <p style=\"text-align: center\">Please enter email of enduser account: </p>\r\n    </div>\r\n    <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n    <div class=\"ui-inputgroup\" style=\"margin: auto\">\r\n      <input style=\"margin-left: auto\" #email type=\"text\" pInputText placeholder=\"Client E-Mail\">\r\n      <button style=\"margin-right: auto\" (click)=\"searchUser(email.value)\" pButton type=\"button\" label=\"Search\"></button>\r\n    </div><br>\r\n    </div>\r\n    <div *ngIf=\"resultStatus\">\r\n      <div class=\"text\" style=\"text-align: center\">\r\n      <p style=\"text-align: center\">User <strong>{{ result }}</strong> found.</p>\r\n      <p style=\"text-align: center\">Please choose project to export to {{ result }}</p>\r\n      </div>\r\n      <div style=\"text-align: center;\">\r\n        <p-dropdown>\r\n        </p-dropdown>\r\n      </div>\r\n      <div *ngIf=\"selectedID>0\">\r\n      <button pButton (click)=\"exportProject()\">Export project.ts</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/project-sharing/project-sharing.component.ts":
/*!***********************************************************************!*\
  !*** ./src/app/skeleton/project-sharing/project-sharing.component.ts ***!
  \***********************************************************************/
/*! exports provided: ProjectSharingComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ProjectSharingComponent", function() { return ProjectSharingComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};





var ProjectSharingComponent = /** @class */ (function () {
    function ProjectSharingComponent(router, dataService, databaseService, overlayContainer) {
        this.router = router;
        this.dataService = dataService;
        this.databaseService = databaseService;
        this.overlayContainer = overlayContainer;
    }
    ProjectSharingComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.currentLoginStatus.subscribe(function (value) { return _this.loginStatus = value; });
        this.dataService.currentTheme.subscribe(function (value) { return _this.changeTheme(value); });
        console.log("login statzus: ", this.loginStatus);
    };
    ProjectSharingComponent.prototype.changeTheme = function (theme) {
        if (theme !== undefined) {
            this.overlayContainer.getContainerElement().classList.add(theme);
            this.componentCssClass = theme;
        }
        else {
            this.router.navigate(['dashboard']);
        }
    };
    ProjectSharingComponent.prototype.searchUser = function (email) {
        /*this.databaseService.searchMail(email).subscribe(res => {
          if (res['docs'].length === 1) {
            this.resultStatus = true;
            this.result = res['docs'][0]['email'];
            this.targetUUID = res['docs'][0]['_id'];
            console.log(this.result);
          }
        });*/
    };
    ProjectSharingComponent.prototype.exportProject = function () {
        console.log(this.selectedID);
        var tempWidgets = [];
        var tempProject = [];
        //todo
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], ProjectSharingComponent.prototype, "componentCssClass", void 0);
    ProjectSharingComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-user-management',
            template: __webpack_require__(/*! ./project-sharing.component.html */ "./src/app/skeleton/project-sharing/project-sharing.component.html"),
            styles: [__webpack_require__(/*! ./project-sharing.component.css */ "./src/app/skeleton/project-sharing/project-sharing.component.css")]
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayContainer"]])
    ], ProjectSharingComponent);
    return ProjectSharingComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/skeleton-routing.module.ts":
/*!*****************************************************!*\
  !*** ./src/app/skeleton/skeleton-routing.module.ts ***!
  \*****************************************************/
/*! exports provided: SkeletonRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonRoutingModule", function() { return SkeletonRoutingModule; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dashboard/dashboard.component */ "./src/app/skeleton/dashboard/dashboard.component.ts");
/* harmony import */ var _platform_settings_platform_settings_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./platform-settings/platform-settings.component */ "./src/app/skeleton/platform-settings/platform-settings.component.ts");
/* harmony import */ var _project_sharing_project_sharing_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./project-sharing/project-sharing.component */ "./src/app/skeleton/project-sharing/project-sharing.component.ts");
/* harmony import */ var _user_profile_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./user-profile/user-settings/user-settings.component */ "./src/app/skeleton/user-profile/user-settings/user-settings.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};






var routes2 = [
    { path: '', component: _dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_2__["DashboardComponent"] },
    { path: 'project-sharing', component: _project_sharing_project_sharing_component__WEBPACK_IMPORTED_MODULE_4__["ProjectSharingComponent"] },
    { path: 'platform-settings', component: _platform_settings_platform_settings_component__WEBPACK_IMPORTED_MODULE_3__["PlatformSettingsComponent"] },
    { path: 'user-profile', component: _user_profile_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_5__["UserSettingsComponent"] }
];
var SkeletonRoutingModule = /** @class */ (function () {
    function SkeletonRoutingModule() {
    }
    SkeletonRoutingModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"])({
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"].forChild(routes2)],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_1__["RouterModule"]]
        })
    ], SkeletonRoutingModule);
    return SkeletonRoutingModule;
}());



/***/ }),

/***/ "./src/app/skeleton/skeleton.module.ts":
/*!*********************************************!*\
  !*** ./src/app/skeleton/skeleton.module.ts ***!
  \*********************************************/
/*! exports provided: SkeletonModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkeletonModule", function() { return SkeletonModule; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var ng2_fittext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ng2-fittext */ "./node_modules/ng2-fittext/index.js");
/* harmony import */ var _models_shared_module__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../models/shared.module */ "./src/app/models/shared.module.ts");
/* harmony import */ var _skeleton_routing_module__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./skeleton-routing.module */ "./src/app/skeleton/skeleton-routing.module.ts");
/* harmony import */ var ng2_charts_ng2_charts__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng2-charts/ng2-charts */ "./node_modules/ng2-charts/ng2-charts.js");
/* harmony import */ var ng2_charts_ng2_charts__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(ng2_charts_ng2_charts__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var angular_gridster2__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! angular-gridster2 */ "./node_modules/angular-gridster2/fesm5/angular-gridster2.js");
/* harmony import */ var _dashboard_sheet_content_widgets_devices_management_add_device_add_device_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/devices/management/add-device/add-device.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/add-device/add-device.component.ts");
/* harmony import */ var _dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./dashboard/dashboard.component */ "./src/app/skeleton/dashboard/dashboard.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_devices_management_delete_device_delete_device_component__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/management/delete-device/delete-device.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_devices_control_slider_slider_control_device_component__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/slider/slider-control-device.component.ts");
/* harmony import */ var _dashboard_sheet_content_sheet_content_component__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./dashboard/sheet-content/sheet-content.component */ "./src/app/skeleton/dashboard/sheet-content/sheet-content.component.ts");
/* harmony import */ var _platform_settings_platform_settings_component__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./platform-settings/platform-settings.component */ "./src/app/skeleton/platform-settings/platform-settings.component.ts");
/* harmony import */ var _main_menu_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./main-menu.component */ "./src/app/skeleton/main-menu.component.ts");
/* harmony import */ var _dashboard_sidebar_content_sidebar_content_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./dashboard/sidebar-content/sidebar-content.component */ "./src/app/skeleton/dashboard/sidebar-content/sidebar-content.component.ts");
/* harmony import */ var _project_sharing_project_sharing_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./project-sharing/project-sharing.component */ "./src/app/skeleton/project-sharing/project-sharing.component.ts");
/* harmony import */ var _user_profile_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./user-profile/user-settings/user-settings.component */ "./src/app/skeleton/user-profile/user-settings/user-settings.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_value_visualization_realtime_realtime_value_visualization_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/value-visualization/realtime/realtime-value-visualization.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_chart_visualization_BarChart_bar_chart_visualization_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BarChart/bar-chart-visualization.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_anomaly_history_anomaly_history_anomaly_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/history-anomaly/history-anomaly.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_anomaly_realtime_anomaly_realtime_anomaly_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/anomaly/realtime-anomaly/realtime-anomaly.component.ts");
/* harmony import */ var _user_profile_user_privacy_settings_user_privacy_settings_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./user-profile/user-privacy-settings/user-privacy-settings.component */ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.ts");
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! primeng/accordion */ "./node_modules/primeng/accordion.js");
/* harmony import */ var primeng_accordion__WEBPACK_IMPORTED_MODULE_24___default = /*#__PURE__*/__webpack_require__.n(primeng_accordion__WEBPACK_IMPORTED_MODULE_24__);
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! primeng/card */ "./node_modules/primeng/card.js");
/* harmony import */ var primeng_card__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(primeng_card__WEBPACK_IMPORTED_MODULE_25__);
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! primeng/button */ "./node_modules/primeng/button.js");
/* harmony import */ var primeng_button__WEBPACK_IMPORTED_MODULE_26___default = /*#__PURE__*/__webpack_require__.n(primeng_button__WEBPACK_IMPORTED_MODULE_26__);
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! primeng/tabview */ "./node_modules/primeng/tabview.js");
/* harmony import */ var primeng_tabview__WEBPACK_IMPORTED_MODULE_27___default = /*#__PURE__*/__webpack_require__.n(primeng_tabview__WEBPACK_IMPORTED_MODULE_27__);
/* harmony import */ var primeng_toolbar__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! primeng/toolbar */ "./node_modules/primeng/toolbar.js");
/* harmony import */ var primeng_toolbar__WEBPACK_IMPORTED_MODULE_28___default = /*#__PURE__*/__webpack_require__.n(primeng_toolbar__WEBPACK_IMPORTED_MODULE_28__);
/* harmony import */ var primeng_menubar__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! primeng/menubar */ "./node_modules/primeng/menubar.js");
/* harmony import */ var primeng_menubar__WEBPACK_IMPORTED_MODULE_29___default = /*#__PURE__*/__webpack_require__.n(primeng_menubar__WEBPACK_IMPORTED_MODULE_29__);
/* harmony import */ var primeng_panelmenu__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! primeng/panelmenu */ "./node_modules/primeng/panelmenu.js");
/* harmony import */ var primeng_panelmenu__WEBPACK_IMPORTED_MODULE_30___default = /*#__PURE__*/__webpack_require__.n(primeng_panelmenu__WEBPACK_IMPORTED_MODULE_30__);
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_31___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_31__);
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! primeng/slider */ "./node_modules/primeng/slider.js");
/* harmony import */ var primeng_slider__WEBPACK_IMPORTED_MODULE_32___default = /*#__PURE__*/__webpack_require__.n(primeng_slider__WEBPACK_IMPORTED_MODULE_32__);
/* harmony import */ var primeng_inputswitch__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! primeng/inputswitch */ "./node_modules/primeng/inputswitch.js");
/* harmony import */ var primeng_inputswitch__WEBPACK_IMPORTED_MODULE_33___default = /*#__PURE__*/__webpack_require__.n(primeng_inputswitch__WEBPACK_IMPORTED_MODULE_33__);
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! primeng/tooltip */ "./node_modules/primeng/tooltip.js");
/* harmony import */ var primeng_tooltip__WEBPACK_IMPORTED_MODULE_34___default = /*#__PURE__*/__webpack_require__.n(primeng_tooltip__WEBPACK_IMPORTED_MODULE_34__);
/* harmony import */ var primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! primeng/overlaypanel */ "./node_modules/primeng/overlaypanel.js");
/* harmony import */ var primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_35___default = /*#__PURE__*/__webpack_require__.n(primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_35__);
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! primeng/panel */ "./node_modules/primeng/panel.js");
/* harmony import */ var primeng_panel__WEBPACK_IMPORTED_MODULE_36___default = /*#__PURE__*/__webpack_require__.n(primeng_panel__WEBPACK_IMPORTED_MODULE_36__);
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! primeng/growl */ "./node_modules/primeng/growl.js");
/* harmony import */ var primeng_growl__WEBPACK_IMPORTED_MODULE_37___default = /*#__PURE__*/__webpack_require__.n(primeng_growl__WEBPACK_IMPORTED_MODULE_37__);
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! primeng/dialog */ "./node_modules/primeng/dialog.js");
/* harmony import */ var primeng_dialog__WEBPACK_IMPORTED_MODULE_38___default = /*#__PURE__*/__webpack_require__.n(primeng_dialog__WEBPACK_IMPORTED_MODULE_38__);
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! primeng/menu */ "./node_modules/primeng/menu.js");
/* harmony import */ var primeng_menu__WEBPACK_IMPORTED_MODULE_39___default = /*#__PURE__*/__webpack_require__.n(primeng_menu__WEBPACK_IMPORTED_MODULE_39__);
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! primeng/sidebar */ "./node_modules/primeng/sidebar.js");
/* harmony import */ var primeng_sidebar__WEBPACK_IMPORTED_MODULE_40___default = /*#__PURE__*/__webpack_require__.n(primeng_sidebar__WEBPACK_IMPORTED_MODULE_40__);
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! primeng/confirmdialog */ "./node_modules/primeng/confirmdialog.js");
/* harmony import */ var primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_41___default = /*#__PURE__*/__webpack_require__.n(primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_41__);
/* harmony import */ var primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! primeng/scrollpanel */ "./node_modules/primeng/scrollpanel.js");
/* harmony import */ var primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_42___default = /*#__PURE__*/__webpack_require__.n(primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_42__);
/* harmony import */ var primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! primeng/tieredmenu */ "./node_modules/primeng/tieredmenu.js");
/* harmony import */ var primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_43___default = /*#__PURE__*/__webpack_require__.n(primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_43__);
/* harmony import */ var primeng_calendar__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! primeng/calendar */ "./node_modules/primeng/calendar.js");
/* harmony import */ var primeng_calendar__WEBPACK_IMPORTED_MODULE_44___default = /*#__PURE__*/__webpack_require__.n(primeng_calendar__WEBPACK_IMPORTED_MODULE_44__);
/* harmony import */ var primeng_selectbutton__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! primeng/selectbutton */ "./node_modules/primeng/selectbutton.js");
/* harmony import */ var primeng_selectbutton__WEBPACK_IMPORTED_MODULE_45___default = /*#__PURE__*/__webpack_require__.n(primeng_selectbutton__WEBPACK_IMPORTED_MODULE_45__);
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! primeng/radiobutton */ "./node_modules/primeng/radiobutton.js");
/* harmony import */ var primeng_radiobutton__WEBPACK_IMPORTED_MODULE_46___default = /*#__PURE__*/__webpack_require__.n(primeng_radiobutton__WEBPACK_IMPORTED_MODULE_46__);
/* harmony import */ var _dashboard_sheet_content_widgets_devices_control_toggle_toggle_control_device_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/toggle/toggle-control-device.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_devices_control_state_state_control_device_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/devices/control/state/state-control-device.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/devices/control/state/state-control-device.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_chart_visualization_LineChart_line_chart_visualization_component__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/LineChart/line-chart-visualization.component.ts");
/* harmony import */ var primeng_autocomplete__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! primeng/autocomplete */ "./node_modules/primeng/autocomplete.js");
/* harmony import */ var primeng_autocomplete__WEBPACK_IMPORTED_MODULE_50___default = /*#__PURE__*/__webpack_require__.n(primeng_autocomplete__WEBPACK_IMPORTED_MODULE_50__);
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! primeng/checkbox */ "./node_modules/primeng/checkbox.js");
/* harmony import */ var primeng_checkbox__WEBPACK_IMPORTED_MODULE_51___default = /*#__PURE__*/__webpack_require__.n(primeng_checkbox__WEBPACK_IMPORTED_MODULE_51__);
/* harmony import */ var primeng_multiselect__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! primeng/multiselect */ "./node_modules/primeng/multiselect.js");
/* harmony import */ var primeng_multiselect__WEBPACK_IMPORTED_MODULE_52___default = /*#__PURE__*/__webpack_require__.n(primeng_multiselect__WEBPACK_IMPORTED_MODULE_52__);
/* harmony import */ var primeng_colorpicker__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! primeng/colorpicker */ "./node_modules/primeng/colorpicker.js");
/* harmony import */ var primeng_colorpicker__WEBPACK_IMPORTED_MODULE_53___default = /*#__PURE__*/__webpack_require__.n(primeng_colorpicker__WEBPACK_IMPORTED_MODULE_53__);
/* harmony import */ var primeng_message__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! primeng/message */ "./node_modules/primeng/message.js");
/* harmony import */ var primeng_message__WEBPACK_IMPORTED_MODULE_54___default = /*#__PURE__*/__webpack_require__.n(primeng_message__WEBPACK_IMPORTED_MODULE_54__);
/* harmony import */ var primeng_tabmenu__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! primeng/tabmenu */ "./node_modules/primeng/tabmenu.js");
/* harmony import */ var primeng_tabmenu__WEBPACK_IMPORTED_MODULE_55___default = /*#__PURE__*/__webpack_require__.n(primeng_tabmenu__WEBPACK_IMPORTED_MODULE_55__);
/* harmony import */ var _dashboard_rules_creation_rule_creation_component__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ./dashboard/rules/creation/rule-creation.component */ "./src/app/skeleton/dashboard/rules/creation/rule-creation.component.ts");
/* harmony import */ var _dashboard_rules_creation_trigger_trigger_component__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ./dashboard/rules/creation/trigger/trigger.component */ "./src/app/skeleton/dashboard/rules/creation/trigger/trigger.component.ts");
/* harmony import */ var _dashboard_rules_creation_action_action_component__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ./dashboard/rules/creation/action/action.component */ "./src/app/skeleton/dashboard/rules/creation/action/action.component.ts");
/* harmony import */ var _dashboard_rules_creation_trigger_combine_trigger_combine_component__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ./dashboard/rules/creation/trigger-combine/trigger-combine.component */ "./src/app/skeleton/dashboard/rules/creation/trigger-combine/trigger-combine.component.ts");
/* harmony import */ var _dashboard_rules_pipes_select_item_pipe__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ./dashboard/rules/pipes/select-item.pipe */ "./src/app/skeleton/dashboard/rules/pipes/select-item.pipe.ts");
/* harmony import */ var _dashboard_rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ./dashboard/rules/service/rule-creation.service */ "./src/app/skeleton/dashboard/rules/service/rule-creation.service.ts");
/* harmony import */ var _dashboard_rules_service_rule_management_service__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ./dashboard/rules/service/rule-management.service */ "./src/app/skeleton/dashboard/rules/service/rule-management.service.ts");
/* harmony import */ var _dashboard_rules_creation_action_combine_action_combine_component__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ./dashboard/rules/creation/action-combine/action-combine.component */ "./src/app/skeleton/dashboard/rules/creation/action-combine/action-combine.component.ts");
/* harmony import */ var _dashboard_rules_pipes_selected_trigger_pipe__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ./dashboard/rules/pipes/selected-trigger.pipe */ "./src/app/skeleton/dashboard/rules/pipes/selected-trigger.pipe.ts");
/* harmony import */ var _dashboard_rules_management_management_component__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ./dashboard/rules/management/management.component */ "./src/app/skeleton/dashboard/rules/management/management.component.ts");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! primeng/table */ "./node_modules/primeng/table.js");
/* harmony import */ var primeng_table__WEBPACK_IMPORTED_MODULE_66___default = /*#__PURE__*/__webpack_require__.n(primeng_table__WEBPACK_IMPORTED_MODULE_66__);
/* harmony import */ var primeng_splitbutton__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! primeng/splitbutton */ "./node_modules/primeng/splitbutton.js");
/* harmony import */ var primeng_splitbutton__WEBPACK_IMPORTED_MODULE_67___default = /*#__PURE__*/__webpack_require__.n(primeng_splitbutton__WEBPACK_IMPORTED_MODULE_67__);
/* harmony import */ var primeng_dataview__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! primeng/dataview */ "./node_modules/primeng/dataview.js");
/* harmony import */ var primeng_dataview__WEBPACK_IMPORTED_MODULE_68___default = /*#__PURE__*/__webpack_require__.n(primeng_dataview__WEBPACK_IMPORTED_MODULE_68__);
/* harmony import */ var primeng_messages__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! primeng/messages */ "./node_modules/primeng/messages.js");
/* harmony import */ var primeng_messages__WEBPACK_IMPORTED_MODULE_69___default = /*#__PURE__*/__webpack_require__.n(primeng_messages__WEBPACK_IMPORTED_MODULE_69__);
/* harmony import */ var _dashboard_rules_sharing_sharing_component__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ./dashboard/rules/sharing/sharing.component */ "./src/app/skeleton/dashboard/rules/sharing/sharing.component.ts");
/* harmony import */ var _dashboard_rules_notification_notification_component__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ./dashboard/rules/notification/notification.component */ "./src/app/skeleton/dashboard/rules/notification/notification.component.ts");
/* harmony import */ var _dashboard_rules_notify_message_notify_message_component__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ./dashboard/rules/notify-message/notify-message.component */ "./src/app/skeleton/dashboard/rules/notify-message/notify-message.component.ts");
/* harmony import */ var _dashboard_rules_service_rule_notification_service__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ./dashboard/rules/service/rule-notification.service */ "./src/app/skeleton/dashboard/rules/service/rule-notification.service.ts");
/* harmony import */ var _dashboard_rules_service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ./dashboard/rules/service/platform-device-management.service */ "./src/app/skeleton/dashboard/rules/service/platform-device-management.service.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_chart_visualization_doughnut_chart_doughnut_chart_component__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/doughnut-chart/doughnut-chart.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_chart_visualization_BubbleChart_bubble_chart_visualization_component__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/BubbleChart/bubble-chart-visualization.component.ts");
/* harmony import */ var _dashboard_sheet_content_widgets_visualization_chart_visualization_polar_area_chart_visualization_polar_area_chart_visualization_component__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ./dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component */ "./src/app/skeleton/dashboard/sheet-content/widgets/visualization/chart-visualization/polar-area-chart-visualization/polar-area-chart-visualization.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// Angular Modules





// Our created Modules


// imported Modules


// Our Components















// primeng modules
































// rule components























var SkeletonModule = /** @class */ (function () {
    function SkeletonModule() {
    }
    SkeletonModule = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
            imports: [
                primeng_scrollpanel__WEBPACK_IMPORTED_MODULE_42__["ScrollPanelModule"],
                primeng_sidebar__WEBPACK_IMPORTED_MODULE_40__["SidebarModule"],
                primeng_tieredmenu__WEBPACK_IMPORTED_MODULE_43__["TieredMenuModule"],
                primeng_confirmdialog__WEBPACK_IMPORTED_MODULE_41__["ConfirmDialogModule"],
                primeng_menu__WEBPACK_IMPORTED_MODULE_39__["MenuModule"],
                primeng_accordion__WEBPACK_IMPORTED_MODULE_24__["AccordionModule"],
                primeng_panel__WEBPACK_IMPORTED_MODULE_36__["PanelModule"],
                primeng_growl__WEBPACK_IMPORTED_MODULE_37__["GrowlModule"],
                primeng_overlaypanel__WEBPACK_IMPORTED_MODULE_35__["OverlayPanelModule"],
                primeng_tooltip__WEBPACK_IMPORTED_MODULE_34__["TooltipModule"],
                primeng_inputswitch__WEBPACK_IMPORTED_MODULE_33__["InputSwitchModule"],
                primeng_slider__WEBPACK_IMPORTED_MODULE_32__["SliderModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_31__["DropdownModule"],
                primeng_panelmenu__WEBPACK_IMPORTED_MODULE_30__["PanelMenuModule"],
                primeng_menubar__WEBPACK_IMPORTED_MODULE_29__["MenubarModule"],
                primeng_toolbar__WEBPACK_IMPORTED_MODULE_28__["ToolbarModule"],
                primeng_tabview__WEBPACK_IMPORTED_MODULE_27__["TabViewModule"],
                primeng_button__WEBPACK_IMPORTED_MODULE_26__["ButtonModule"],
                primeng_card__WEBPACK_IMPORTED_MODULE_25__["CardModule"],
                _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                _skeleton_routing_module__WEBPACK_IMPORTED_MODULE_6__["SkeletonRoutingModule"],
                ng2_charts_ng2_charts__WEBPACK_IMPORTED_MODULE_7__["ChartsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                angular_gridster2__WEBPACK_IMPORTED_MODULE_8__["GridsterModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClientModule"],
                _models_shared_module__WEBPACK_IMPORTED_MODULE_5__["SharedModule"],
                primeng_dialog__WEBPACK_IMPORTED_MODULE_38__["DialogModule"],
                primeng_calendar__WEBPACK_IMPORTED_MODULE_44__["CalendarModule"],
                primeng_selectbutton__WEBPACK_IMPORTED_MODULE_45__["SelectButtonModule"],
                primeng_radiobutton__WEBPACK_IMPORTED_MODULE_46__["RadioButtonModule"],
                primeng_checkbox__WEBPACK_IMPORTED_MODULE_51__["CheckboxModule"],
                primeng_autocomplete__WEBPACK_IMPORTED_MODULE_50__["AutoCompleteModule"],
                primeng_multiselect__WEBPACK_IMPORTED_MODULE_52__["MultiSelectModule"],
                primeng_table__WEBPACK_IMPORTED_MODULE_66__["TableModule"],
                primeng_splitbutton__WEBPACK_IMPORTED_MODULE_67__["SplitButtonModule"],
                primeng_primeng__WEBPACK_IMPORTED_MODULE_31__["FieldsetModule"],
                primeng_dataview__WEBPACK_IMPORTED_MODULE_68__["DataViewModule"],
                primeng_messages__WEBPACK_IMPORTED_MODULE_69__["MessagesModule"],
                primeng_colorpicker__WEBPACK_IMPORTED_MODULE_53__["ColorPickerModule"],
                primeng_message__WEBPACK_IMPORTED_MODULE_54__["MessageModule"],
                primeng_tabmenu__WEBPACK_IMPORTED_MODULE_55__["TabMenuModule"],
                ng2_fittext__WEBPACK_IMPORTED_MODULE_4__["Ng2FittextModule"]
            ],
            providers: [
                _dashboard_rules_service_rule_creation_service__WEBPACK_IMPORTED_MODULE_61__["RuleCreationService"],
                _dashboard_rules_service_rule_management_service__WEBPACK_IMPORTED_MODULE_62__["RuleManagementService"],
                _dashboard_rules_service_rule_notification_service__WEBPACK_IMPORTED_MODULE_73__["RuleNotificationService"],
                _dashboard_rules_service_platform_device_management_service__WEBPACK_IMPORTED_MODULE_74__["PlatformDeviceManagementService"]
            ],
            declarations: [
                _main_menu_component__WEBPACK_IMPORTED_MODULE_15__["MainMenuComponent"],
                _dashboard_sheet_content_widgets_devices_management_add_device_add_device_component__WEBPACK_IMPORTED_MODULE_9__["AddDeviceComponent"],
                _dashboard_dashboard_component__WEBPACK_IMPORTED_MODULE_10__["DashboardComponent"],
                _dashboard_sheet_content_widgets_devices_control_slider_slider_control_device_component__WEBPACK_IMPORTED_MODULE_12__["SliderControlDeviceComponent"],
                _dashboard_sheet_content_widgets_devices_control_toggle_toggle_control_device_component__WEBPACK_IMPORTED_MODULE_47__["ToggleControlDeviceComponent"],
                _dashboard_sheet_content_widgets_devices_control_state_state_control_device_component__WEBPACK_IMPORTED_MODULE_48__["StateControlDeviceComponent"],
                _dashboard_sheet_content_widgets_devices_management_delete_device_delete_device_component__WEBPACK_IMPORTED_MODULE_11__["DeleteDeviceComponent"],
                _dashboard_sidebar_content_sidebar_content_component__WEBPACK_IMPORTED_MODULE_16__["SidebarContentComponent"],
                _dashboard_sheet_content_widgets_visualization_chart_visualization_LineChart_line_chart_visualization_component__WEBPACK_IMPORTED_MODULE_49__["LineChartVisualizationComponent"],
                _dashboard_sheet_content_sheet_content_component__WEBPACK_IMPORTED_MODULE_13__["SheetContentComponent"],
                _platform_settings_platform_settings_component__WEBPACK_IMPORTED_MODULE_14__["PlatformSettingsComponent"],
                _project_sharing_project_sharing_component__WEBPACK_IMPORTED_MODULE_17__["ProjectSharingComponent"],
                _user_profile_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_18__["UserSettingsComponent"],
                _dashboard_sheet_content_widgets_visualization_value_visualization_realtime_realtime_value_visualization_component__WEBPACK_IMPORTED_MODULE_19__["RealtimeValueVisualizationComponent"],
                _dashboard_sheet_content_widgets_visualization_chart_visualization_BarChart_bar_chart_visualization_component__WEBPACK_IMPORTED_MODULE_20__["BarChartVisualizationComponent"],
                _dashboard_rules_management_management_component__WEBPACK_IMPORTED_MODULE_65__["ManagementComponent"],
                _dashboard_rules_pipes_selected_trigger_pipe__WEBPACK_IMPORTED_MODULE_64__["SelectedTriggerPipe"],
                _dashboard_rules_creation_action_combine_action_combine_component__WEBPACK_IMPORTED_MODULE_63__["ActionCombineComponent"],
                _dashboard_rules_pipes_select_item_pipe__WEBPACK_IMPORTED_MODULE_60__["SelectItemPipe"],
                _dashboard_rules_creation_trigger_combine_trigger_combine_component__WEBPACK_IMPORTED_MODULE_59__["TriggerCombineComponent"],
                _dashboard_rules_creation_action_action_component__WEBPACK_IMPORTED_MODULE_58__["ActionComponent"],
                _dashboard_rules_creation_trigger_trigger_component__WEBPACK_IMPORTED_MODULE_57__["TriggerComponent"],
                _dashboard_rules_creation_rule_creation_component__WEBPACK_IMPORTED_MODULE_56__["CreateRuleComponent"],
                _dashboard_rules_sharing_sharing_component__WEBPACK_IMPORTED_MODULE_70__["SharingComponent"],
                _dashboard_rules_notification_notification_component__WEBPACK_IMPORTED_MODULE_71__["NotificationComponent"],
                _dashboard_rules_notify_message_notify_message_component__WEBPACK_IMPORTED_MODULE_72__["NotifyMessageComponent"],
                _dashboard_sheet_content_widgets_anomaly_realtime_anomaly_realtime_anomaly_component__WEBPACK_IMPORTED_MODULE_22__["RealtimeAnomalyComponent"],
                _dashboard_sheet_content_widgets_anomaly_history_anomaly_history_anomaly_component__WEBPACK_IMPORTED_MODULE_21__["HistoryAnomalyComponent"],
                _dashboard_sheet_content_widgets_visualization_chart_visualization_doughnut_chart_doughnut_chart_component__WEBPACK_IMPORTED_MODULE_75__["DoughnutChartComponent"],
                _user_profile_user_privacy_settings_user_privacy_settings_component__WEBPACK_IMPORTED_MODULE_23__["UserPrivacySettingsComponent"],
                _user_profile_user_settings_user_settings_component__WEBPACK_IMPORTED_MODULE_18__["UserSettingsComponent"],
                _dashboard_sheet_content_widgets_visualization_chart_visualization_BubbleChart_bubble_chart_visualization_component__WEBPACK_IMPORTED_MODULE_76__["BubbleChartVisualizationComponent"],
                _dashboard_sheet_content_widgets_visualization_chart_visualization_polar_area_chart_visualization_polar_area_chart_visualization_component__WEBPACK_IMPORTED_MODULE_77__["PolarAreaChartVisualizationComponent"],
            ],
            entryComponents: [
                _dashboard_sheet_content_widgets_devices_management_add_device_add_device_component__WEBPACK_IMPORTED_MODULE_9__["AddDeviceComponent"],
                _dashboard_sheet_content_widgets_devices_management_delete_device_delete_device_component__WEBPACK_IMPORTED_MODULE_11__["DeleteDeviceComponent"]
            ]
        })
    ], SkeletonModule);
    return SkeletonModule;
}());



/***/ }),

/***/ "./src/app/skeleton/unauthorized/unauthorized.component.css":
/*!******************************************************************!*\
  !*** ./src/app/skeleton/unauthorized/unauthorized.component.css ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n#mainContent {\r\n  position: absolute;\r\n  left: 50px;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n}\r\n\r\n.middlecardSheet {\r\n  left: 0;\r\n  right: 0;\r\n  height: 100%;\r\n}\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/unauthorized/unauthorized.component.html":
/*!*******************************************************************!*\
  !*** ./src/app/skeleton/unauthorized/unauthorized.component.html ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<p-growl [(value)]=\"msgs\"></p-growl>\r\n<div *ngIf=\"status == 0\">\r\n\r\n</div>\r\n\r\n<div *ngIf=\"status == 1\">\r\n  <p-card title=\"Error!\" [style]=\"{width: '360px'}\" styleClass=\"ui-card-shadow\">\r\n    <p>You're not authorized to be here. Maybe you just need to login? </p>\r\n    <p-footer>\r\n      <button pButton (click)=\"toLogin()\">Login</button>\r\n    </p-footer>\r\n  </p-card>\r\n</div>\r\n\r\n<div *ngIf=\"status == 2\">\r\n  <p-card title=\"Error!\" [style]=\"{width: '360px'}\" styleClass=\"ui-card-shadow\">\r\n    <p>Your Session has expired or your account has been logged in from another device. Please log in again.</p>\r\n    <p-footer>\r\n      <button pButton (click)=\"toLogin()\">Login</button>\r\n    </p-footer>\r\n  </p-card>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/skeleton/unauthorized/unauthorized.component.ts":
/*!*****************************************************************!*\
  !*** ./src/app/skeleton/unauthorized/unauthorized.component.ts ***!
  \*****************************************************************/
/*! exports provided: UnauthorizedComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnauthorizedComponent", function() { return UnauthorizedComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _services_session_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/session.service */ "./src/app/services/session.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/**
 * @author Philipp Grenz
 * This component allows to recover a session when the page is reloaded or reopened
 */
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};







var UnauthorizedComponent = /** @class */ (function () {
    function UnauthorizedComponent(sessionService, databaseService, dataService, projectService, router) {
        this.sessionService = sessionService;
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.projectService = projectService;
        this.router = router;
        this.msgs = [];
        this.status = 0;
    }
    UnauthorizedComponent.prototype.ngOnInit = function () {
        this.checkForSession();
    };
    UnauthorizedComponent.prototype.notifyOfEvent = function (event) {
        this.msgs.push(event);
    };
    /**
     * this method restores the users session if one is present
     */
    UnauthorizedComponent.prototype.checkForSession = function () {
        var _this = this;
        this.sessionService.restoreSession()
            .subscribe(function (result) {
            var userId = result['userId'];
            _this.databaseService.getDocument(_this.databaseService.USERSCOLLECTION, userId)
                .subscribe(function (user) {
                if (user.role === 'developer') {
                    _this.dataService.changeLoginStatus(2);
                }
                else if (user.role === 'enduser') {
                    _this.dataService.changeLoginStatus(1);
                }
                console.log(user.projects[0]);
                _this.dataService.changeLoginUUID(user.id);
                _this.dataService.changeUserData(user);
                _this.projectService.loadNewProject(user.projects[0], true);
            }, function (err) {
                _this.status = 1;
            });
        }, function (err) {
            if (err['error'] === 'Session invalid') {
                _this.status = 2;
            }
            else {
                console.log(err.status);
                _this.status = 1;
            }
        });
    };
    /**
     * this method routes the user to the login page
     */
    UnauthorizedComponent.prototype.toLogin = function () {
        this.router.navigate(['']);
        setTimeout(function () {
            window.location.reload();
        }, 25);
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], UnauthorizedComponent.prototype, "componentCssClass", void 0);
    UnauthorizedComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-unauthorized',
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_3__["ConfirmationService"]],
            template: __webpack_require__(/*! ./unauthorized.component.html */ "./src/app/skeleton/unauthorized/unauthorized.component.html"),
            styles: [__webpack_require__(/*! ./unauthorized.component.css */ "./src/app/skeleton/unauthorized/unauthorized.component.css")]
        }),
        __metadata("design:paramtypes", [_services_session_service__WEBPACK_IMPORTED_MODULE_5__["SessionService"], _services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_2__["DataService"], _services_project_service__WEBPACK_IMPORTED_MODULE_4__["ProjectService"], _angular_router__WEBPACK_IMPORTED_MODULE_6__["Router"]])
    ], UnauthorizedComponent);
    return UnauthorizedComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.css":
/*!*************************************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.css ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.html":
/*!**************************************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.html ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-growl [sticky]=\"false\" [(value)]=\"this.msgs\"></p-growl>\r\n<p-dialog header=\"Privacy Settings\" [modal]=true appendTo=\"body\" [width]=\"550\" [(visible)]=\"privacySettings\">\r\n\r\n  <form [formGroup]=\"policyForm\" (ngSubmit)=\"saveSettings(policyForm.value)\" *ngIf=\"policyForm != null\">\r\n    <div class=\"ui-g\">\r\n      <div class=\"ui-g-12\">\r\n        <h3>Change privacy settings</h3>\r\n      </div>\r\n\r\n      <div *ngFor=\"let currID of sequenceList; let i=index\">\r\n        <div style=\"width: 475px;\">\r\n          <p-fieldset [toggleable]=\"true\" [collapsed]=\"true\">\r\n            <p-header>\r\n              <div style=\"border:none\" class=\"ui-message\" *ngIf=\"policyForm.controls[currID].valid\">\r\n                {{availableElements[currID].title}}\r\n                <div style=\"border:none\" class=\"ui-message\" *ngIf=\"!availableElements[currID].consentRequired\">\r\n                  [OPTIONAL]\r\n                </div>\r\n              </div>\r\n              <div style=\"border:none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyForm.controls[currID].valid\">\r\n                <i style=\"color:red\" class=\"fa fa-exclamation-circle\"></i>\r\n                {{availableElements[currID].title}} <br/>\r\n              </div>\r\n            </p-header>\r\n\r\n            <div class=\"ui-g-12\">\r\n              <p>\r\n                {{availableElements[currID].descriptions.before}}\r\n              </p>\r\n              <div *ngFor=\"let child of availableElements[currID].children; let i=index\">\r\n                <div style=\"width: 400px;\">\r\n                  <p-fieldset [toggleable]=\"true\" [collapsed]=\"true\">\r\n                    <p-header>\r\n                      <div style=\"border: none\" class=\"ui-message\" *ngIf=\"policyForm.controls[child.id].valid\">\r\n                        {{child.title}}\r\n                        <div style=\"border: none\" class=\"ui-message\" *ngIf=\"!child.consentRequired\">\r\n                          [OPTIONAL]\r\n                        </div>\r\n                      </div>\r\n                      <div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyForm.controls[child.id].valid\">\r\n                        <i style=\"color: red\" class=\"fa fa-exclamation-circle\"></i>\r\n                        {{child.title}} <br/>\r\n                      </div>\r\n                    </p-header>\r\n                    <div class=\"ui-g-12\">\r\n                      <p>\r\n                        {{child.descriptions.before}}\r\n                      </p>\r\n                    </div>\r\n                    <div class=\"ui-g-12\">\r\n                      <p-checkbox label=\"{{child.descriptions.submit}}\" [formControl]=\"policyForm.controls[child.id]\"\r\n                                  binary=\"true\"></p-checkbox>\r\n                    </div>\r\n\r\n                    <div class=\"ui-g-5\">\r\n                      <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\"\r\n                           *ngIf=\"child.validFrom.getTime() > currTime && child.consentRequired && !policyForm.controls[child.id].value\">\r\n                        required till {{child.validFrom.getDate()}}.{{child.validFrom.getMonth() + 1}}.{{child.validFrom.getFullYear()}}\r\n                      </div>\r\n                    </div>\r\n\r\n                  </p-fieldset>\r\n                </div>\r\n                <br>\r\n              </div>\r\n              <p>\r\n                {{availableElements[currID].descriptions.after}}\r\n              </p>\r\n              <div class=\"ui-g-12\">\r\n                <p-checkbox label=\"{{availableElements[currID].descriptions.submit}}\"\r\n                            [formControl]=\"policyForm.controls[currID]\" binary=\"true\"></p-checkbox>\r\n              </div>\r\n            </div>\r\n          </p-fieldset>\r\n          <div class=\"ui-g-5\">\r\n            <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\"\r\n                 *ngIf=\"availableElements[currID].validFrom.getTime() > currTime && availableElements[currID].consentRequired && !policyForm.controls[currID].value\">\r\n              required till {{availableElements[currID].validFrom.getDate()}}.{{availableElements[currID].validFrom.getMonth() + 1}}.{{availableElements[currID].validFrom.getFullYear()}}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-g-4\"></div>\r\n      <div class=\"ui-g-4\">\r\n        <button pButton type=\"submit\" label=\"Submit\" [disabled]=\"policyForm.invalid\"></button>\r\n      </div>\r\n      <div class=\"ui-g-4\"></div>\r\n    </div>\r\n  </form>\r\n</p-dialog>\r\n\r\n\r\n\r\n<p-dialog header=\"Changed Terms of Use\" [modal]=true [closeOnEscape]=\"false\" [closable]=\"false\"\r\n          appendTo=\"body\" [width]=\"550\" [(visible)]=\"popup\">\r\n  <form [formGroup]=\"this.policyFormPopup\" (ngSubmit)=\"this.editPartOfSettings(policyFormPopup.value)\" *ngIf=\"this.policyFormPopup != null\">\r\n    <div class=\"ui-g\">\r\n      <div class=\"ui-g-12\">\r\n        The terms of use have changed, if you want to continue using this service you have to accept the new terms.\r\n        Otherwise you have to delete your account.\r\n      </div>\r\n      <div class=\"ui-g-12\">\r\n\r\n        <div *ngFor=\"let elem of this.uncheckedElements; let i=index\">\r\n          <div style=\"width: 475px;\">\r\n            <p-fieldset [toggleable]=\"true\">\r\n              <p-header>\r\n                <div style=\"border:none\" class=\"ui-message\" *ngIf=\"policyFormPopup.controls[elem.id].valid\">\r\n                  {{elem.title}}\r\n                </div>\r\n                <div style=\"border:none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyFormPopup.controls[elem.id].valid\">\r\n                  <i style=\"color:red\" class=\"fa fa-exclamation-circle\"></i>\r\n                  {{elem.title}} <br/>\r\n                  <div style=\"border: none\" class=\"ui-message\" *ngIf=\"!elem.consentRequired\">\r\n                    [OPTIONAL]\r\n                  </div>\r\n                </div>\r\n              </p-header>\r\n              <div class=\"ui-g-12\">\r\n                <p>\r\n                  {{elem.descriptions.before}}\r\n                </p>\r\n                <div *ngFor=\"let child of elem.children; let i=index\">\r\n                  <div style=\"width: 400px;\">\r\n                    <p-fieldset>\r\n                      <p-header>\r\n                        <div style=\"border:none\" class=\"ui-message\" *ngIf=\"policyFormPopup.controls[child.id].valid\">\r\n                          {{child.title}}\r\n                          <div style=\"border: none\" class=\"ui-message\" *ngIf=\"!child.consentRequired\">\r\n                            [OPTIONAL]\r\n                          </div>\r\n                        </div>\r\n                        <div style=\"border:none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyFormPopup.controls[child.id].valid\">\r\n                          <i style=\"color:red\" class=\"fa fa-exclamation-circle\"></i>\r\n                          {{child.title}} <br/>\r\n                        </div>\r\n\r\n                      </p-header>\r\n                      <div class=\"ui-g-12\">\r\n                        <p>\r\n                          {{child.descriptions.before}}\r\n                        </p>\r\n                      </div>\r\n                      <div class=\"ui-g-12\">\r\n                        <p-checkbox label=\"{{child.descriptions.submit}}\" [formControl]=\"this.policyFormPopup.controls[child.id]\"\r\n                                    binary=\"true\"></p-checkbox>\r\n                      </div>\r\n\r\n                    </p-fieldset>\r\n                  </div>\r\n                  <br>\r\n                </div>\r\n                <p>\r\n                  {{elem.descriptions.after}}\r\n                </p>\r\n                <div class=\"ui-g-12\">\r\n                  <p-checkbox label=\"{{elem.descriptions.submit}}\"\r\n                              [formControl]=\"this.policyFormPopup.controls[elem.id]\" binary=\"true\"></p-checkbox>\r\n                </div>\r\n              </div>\r\n            </p-fieldset>\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n      <p-footer>\r\n        <button pButton type=\"submit\" label=\"Submit\" [disabled]=\"policyFormPopup.invalid\" (click)=\"editPartOfSettings(policyFormPopup)\"></button>\r\n        <button (click)=\"this.deleteAccountPopup = true\" class=\"ui-button-danger\" type=\"button\" pButton label=\"Delete Account\"></button>\r\n      </p-footer>\r\n    </div>\r\n  </form>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Account deletion\" [responsive]=\"true\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"deleteAccountPopup\">\r\n  <p-growl [(value)]=\"msgs\"></p-growl>\r\n  <div class=\"ui-g-12\">\r\n    <span>You are about to delete your account. This can not be undone.</span><br>\r\n    <span>Please confirm with your password.</span>\r\n  </div>\r\n  <form [formGroup]=\"passwordForm\" >\r\n    <div class=\"ui-g-12\">\r\n      <input formControlName=\"Password\" pInputText placeholder=\"Enter password\" type=\"password\">\r\n    </div>\r\n\r\n  <p-footer>\r\n    <button [disabled]=\"!passwordForm.valid\" (click)=\"deleteAccount(passwordForm.value)\" class=\"ui-button-danger\" type=\"button\" pButton label=\"Delete\"></button>\r\n    <button  (click)=\"deleteAccountPopup =false\" class=\"ui-button-secondary\" type=\"button\" pButton label=\"Cancel\"></button>\r\n  </p-footer>\r\n  </form>\r\n</p-dialog>\r\n\r\n<p-dialog header=\"Reminder\" appendTo=\"body\" [width]=\"550\" [(visible)]=\"reminderPopup\">\r\n  <div class=\"ui-g-12\">\r\n    You haven't agreed to our new terms of use. Check the Privacy Settings to view the new terms.<br/>\r\n    If you don't want to agree to the new terms till the given date in the Privacy Settings, you will have to delete your account.<br/>\r\n    <br/>\r\n  </div>\r\n  <div class=\"ui-g-12\">\r\n    The new terms consist of:\r\n    <ul>\r\n      <div *ngFor=\"let title of remindElements\">\r\n        <li>\r\n          {{title}}\r\n        </li>\r\n      </div>\r\n    </ul>\r\n  </div>\r\n  <p-footer>\r\n    <button  (click)=\"showSettings(); reminderPopup = false\" class=\"ui-button\" type=\"button\" pButton label=\"Open Privacy Settings\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n"

/***/ }),

/***/ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.ts":
/*!************************************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.ts ***!
  \************************************************************************************************/
/*! exports provided: UserPrivacySettingsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserPrivacySettingsComponent", function() { return UserPrivacySettingsComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../services/dataprivacymanager.service */ "./src/app/services/dataprivacymanager.service.ts");
/* harmony import */ var _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../models/backend/dataprivacyelementbackend */ "./src/app/models/backend/dataprivacyelementbackend.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};









var UserPrivacySettingsComponent = /** @class */ (function () {
    function UserPrivacySettingsComponent(databaseService, dataService, overlayContainer, usermanager, router, fb, dataprivacymanager) {
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.overlayContainer = overlayContainer;
        this.usermanager = usermanager;
        this.router = router;
        this.fb = fb;
        this.dataprivacymanager = dataprivacymanager;
        this.availableElements = {};
        this.userCheckedElements = [];
        this.privacySettings = false;
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.msgs = [];
        // Changed use terms dialog
        this.delete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.popup = false;
    }
    UserPrivacySettingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.currTime = Date.now();
        this.sequenceList = [];
        this.dataService.userData.subscribe(function (user) {
            _this.user = user;
            var formControls = {};
            _this.dataprivacymanager.getPrivacySettings(_this.user.id)
                .subscribe(function (result) {
                _this.userCheckedElements = result;
                // get all privacy elements and make formcontrols and fill availableElements
                _this.dataprivacymanager.getAllRootElements().subscribe(function (result) {
                    result.forEach(function (root) {
                        var _this = this;
                        var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_8__["DataPrivacyElementBackend"](root);
                        this.availableElements[root.id] = item;
                        this.sequenceList.push([root.id]);
                        formControls[root.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](this.userCheckedElements.indexOf(root.id) !== -1, (root.consentRequired && root.validFrom <= this.currTime) ?
                            _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
                        formControls[root.id].valueChanges.subscribe(function (val) {
                            if (val) {
                                var c = _this.availableElements[root.id].children;
                                var changes = {};
                                for (var i = 0; i < c.length; i++) {
                                    if (formControls[c[i].id] !== val) {
                                        changes[c[i].id] = val;
                                    }
                                }
                                _this.policyForm.patchValue(changes);
                            }
                        });
                    }.bind(_this));
                    _this.dataprivacymanager.getAllLeafElements().subscribe(function (result) {
                        result.forEach(function (leaf) {
                            var _this = this;
                            var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_8__["DataPrivacyElementBackend"](leaf);
                            this.availableElements[leaf.id] = item;
                            this.availableElements[leaf.contextID].addChild(item);
                            formControls[leaf.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](this.userCheckedElements.indexOf(leaf.id) !== -1, (leaf.consentRequired && leaf.validFrom <= this.currTime) ?
                                _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
                            formControls[leaf.id].valueChanges.subscribe(function (val) {
                                var changes = {};
                                if (!val && formControls[leaf.contextID]) {
                                    changes[leaf.contextID] = false;
                                    _this.policyForm.patchValue(changes);
                                }
                            });
                        }.bind(_this));
                        _this.policyForm = _this.fb.group(formControls);
                    });
                    // check if the reminder has to pop up
                    _this.checkForRemindingElements();
                    // set intervals
                    // interval for getting current time
                    setInterval(function () {
                        _this.currTime = Date.now();
                    }, 10000);
                    // interval for checking if privacy elements got valid
                    _this.intervalID = _this.checkPrivacyelementsInterval();
                    // interval for getting new dataprivacyelements
                    setInterval(function () {
                        _this.ngOnInit();
                    }, 86400000);
                });
            });
        });
    };
    /**
     * This method sets up an interval that checks if any privacyelements have gotten valid.
     * If elements have gotten valid, a popup pops up
     */
    UserPrivacySettingsComponent.prototype.checkPrivacyelementsInterval = function () {
        var _this = this;
        return setInterval(function () {
            if (!_this.popup && _this.getUncheckedConsentRequiredElements().length > 0) {
                _this.uncheckedElements = _this.getUncheckedConsentRequiredElements();
                var formControls_1 = {};
                var obj = void 0;
                for (var _i = 0, _a = _this.uncheckedElements; _i < _a.length; _i++) {
                    obj = _a[_i];
                    formControls_1[obj.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](_this.userCheckedElements.indexOf(obj.id) !== -1, obj.consentRequired ? _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
                    for (var _b = 0, _c = obj.children; _b < _c.length; _b++) {
                        var child = _c[_b];
                        formControls_1[child.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](_this.userCheckedElements.indexOf(child.id) !== -1, child.consentRequired ? _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
                    }
                }
                _this.uncheckedElements.forEach(function (item) {
                    formControls_1[item.id].valueChanges.subscribe(function (val) {
                        if (val) {
                            var c = item.children;
                            var changes = {};
                            for (var i = 0; i < c.length; i++) {
                                if (formControls_1[c[i].id] !== val) {
                                    changes[c[i].id] = val;
                                }
                            }
                            _this.policyFormPopup.patchValue(changes);
                        }
                    });
                    var _loop_1 = function (child) {
                        formControls_1[child.id].valueChanges.subscribe(function (val) {
                            var changes = {};
                            if (!val && formControls_1[child.contextID]) {
                                changes[child.contextID] = false;
                                _this.policyFormPopup.patchValue(changes);
                            }
                        });
                    };
                    for (var _i = 0, _a = item.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        _loop_1(child);
                    }
                });
                _this.policyFormPopup = _this.fb.group(formControls_1);
                _this.popup = true;
                clearInterval(_this.intervalID);
            }
        }, 5000);
    };
    /**
     * Accepts formvalues and saves the settings to the backend database
     *
     * @param formValues the values from the form
     */
    UserPrivacySettingsComponent.prototype.saveSettings = function (formValues) {
        var _this = this;
        // check if all necessary settings have been chosen
        var checkedAll = true;
        for (var id in this.availableElements) {
            var item = this.availableElements[id];
            if (item.children.length > 0) {
                for (var _i = 0, _a = item.children; _i < _a.length; _i++) {
                    var child = _a[_i];
                    if (child.consentRequired && !formValues[child.id] && child.validFrom.getTime() <= this.currTime) {
                        this.messageEvent.emit({ severity: 'error', summary: 'Conflict', detail: 'Not all necessary settings have been chosen.' });
                        checkedAll = false;
                    }
                }
            }
            if (item.consentRequired && !formValues[id] && item.validFrom.getTime() <= this.currTime) {
                this.messageEvent.emit({ severity: 'error', summary: 'Conflict', detail: 'Not all necessary settings have been chosen.' });
                checkedAll = false;
            }
        }
        // if all necessary settings have been chosen, send request to backend
        if (checkedAll) {
            this.dataprivacymanager.editPrivacySettings(this.user.id, formValues).subscribe(function (result) {
                // load settings
                _this.loadUserSettingsAndDo(function () {
                    if (_this.popup) {
                        _this.intervalID = _this.checkPrivacyelementsInterval();
                        _this.popup = false;
                    }
                    _this.privacySettings = false;
                });
                _this.messageEvent.emit({
                    severity: 'success',
                    summary: '',
                    detail: ''
                });
            }, function (err) {
                if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                    _this.router.navigate(['unauthorized']);
                }
                _this.messageEvent.emit({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while changing settings.Please try again later or contact the administrator.'
                });
            });
        }
    };
    /**
     * This method loads the users settings and sets the privacy settings to visible
     */
    UserPrivacySettingsComponent.prototype.showSettings = function () {
        var _this = this;
        // load user settings
        this.loadUserSettingsAndDo(function () {
            _this.privacySettings = true;
        });
    };
    /**
     * This method gets the user settings from the database, sets the policyform and calls func
     * @param func function that is being called after the settings were loaded
     */
    UserPrivacySettingsComponent.prototype.loadUserSettingsAndDo = function (func) {
        var _this = this;
        this.dataprivacymanager.getPrivacySettings(this.user.id)
            .subscribe(function (result) {
            _this.userCheckedElements = result;
            var newValues = {};
            var index;
            for (index in _this.availableElements) {
                newValues[index] = false;
            }
            // if user has checked old privacy elements, we have to ignore them
            var id;
            for (var _i = 0, _a = _this.userCheckedElements; _i < _a.length; _i++) {
                id = _a[_i];
                if (_this.availableElements[id] !== undefined) {
                    newValues[id] = true;
                }
            }
            _this.policyForm.setValue(newValues);
            func();
        });
    };
    /**
     * This method returns an array of the privacy elements that are not checked by the user but are valid and require consent
     *
     * @return array of valid, unchecked, consent required data privacy elements
     */
    UserPrivacySettingsComponent.prototype.getUncheckedConsentRequiredElements = function () {
        var ret = Array();
        var temp;
        var id;
        var elem;
        var child;
        var isFirstChild = true;
        for (id in this.availableElements) {
            elem = this.availableElements[id];
            if (elem.contextID !== '')
                continue;
            if (this.isUncheckedValidConsentRequired(elem)) {
                ret.push(elem);
            }
            else {
                isFirstChild = true;
                for (var _i = 0, _a = elem.children; _i < _a.length; _i++) {
                    child = _a[_i];
                    if (this.isUncheckedValidConsentRequired(child)) {
                        if (isFirstChild) {
                            temp = JSON.parse(JSON.stringify(elem));
                            temp.children = [];
                            ret.push(temp);
                            isFirstChild = false;
                        }
                        ret[ret.length - 1].children.push(child);
                    }
                }
            }
        }
        return ret;
    };
    /**
     * This method checks if elem is valid, unchecked by the user and consent required
     *
     * @param elem the data privacy element that is checked
     */
    UserPrivacySettingsComponent.prototype.isUncheckedValidConsentRequired = function (elem) {
        return elem.validFrom.getTime() < this.currTime && this.userCheckedElements.indexOf(elem.id) === -1 && elem.consentRequired;
    };
    /**
     * This method sends changed settings to the backend
     *
     * @param formValuesChange
     */
    UserPrivacySettingsComponent.prototype.editPartOfSettings = function (formValuesChange) {
        var _this = this;
        this.loadUserSettingsAndDo(function () {
            var fv = _this.policyForm.value;
            for (var id in formValuesChange) {
                fv[id] = formValuesChange[id];
            }
            _this.saveSettings(fv);
        });
    };
    /**
     * This method checks if there are any consent required, unchecked data privacy elements that aren't valid yet
     * and lets a reminder pop up if it finds anything
     */
    UserPrivacySettingsComponent.prototype.checkForRemindingElements = function () {
        var ret = Array();
        var id;
        var currElem;
        var child;
        for (id in this.availableElements) {
            currElem = this.availableElements[id];
            if (currElem.contextID !== '')
                continue;
            if (this.isNotValidRequiredNotChosen(currElem)) {
                ret.push(currElem.title);
            }
            if (currElem.children.length > 0 && !currElem.consentRequired) {
                for (var _i = 0, _a = currElem.children; _i < _a.length; _i++) {
                    child = _a[_i];
                    // if (child.validFrom.getTime() > this.currTime && child.consentRequired && !this.policyForm.controls[child.id].value) {
                    if (this.isNotValidRequiredNotChosen(child)) {
                        ret.push(currElem.title);
                        break;
                    }
                }
            }
        }
        this.remindElements = ret;
        if (ret.length > 0) {
            this.reminderPopup = true;
        }
    };
    /**
     *  This method checks if a dataprivacyelement is not valid, required and not chosen by the user
     * @param elem
     */
    UserPrivacySettingsComponent.prototype.isNotValidRequiredNotChosen = function (elem) {
        return elem.validFrom.getTime() > this.currTime && elem.consentRequired && !this.userCheckedElements.includes(elem.id, 0);
    };
    /**
     *  This method sends a delete request to the backend
     * @param formValue
     */
    UserPrivacySettingsComponent.prototype.deleteAccount = function (formValue) {
        var _this = this;
        // this.messageEvent.emit({severity: 'error', summary: 'Deletion failed', detail: 'Please contact the system administrator.'});
        // user löschen ans backend senden
        this.usermanager.deleteUser(this.user.id, formValue['Password'])
            .subscribe(function (result) {
            _this.dataService.changeLoginStatus(0);
            _this.dataService.changeUserData(undefined);
            _this.dataService.changeProjectData(undefined);
            _this.router.navigate(['']);
            window.location.reload();
        }, function (err) {
            _this.msgs.push({
                severity: 'error',
                summary: 'Error',
                detail: err['error']
            });
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], UserPrivacySettingsComponent.prototype, "componentCssClass", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", Object)
    ], UserPrivacySettingsComponent.prototype, "messageEvent", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"])(),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"])
    ], UserPrivacySettingsComponent.prototype, "delete", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"])(),
        __metadata("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormGroup"])
    ], UserPrivacySettingsComponent.prototype, "passwordForm", void 0);
    UserPrivacySettingsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-user-privacy-settings',
            template: __webpack_require__(/*! ./user-privacy-settings.component.html */ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.html"),
            styles: [__webpack_require__(/*! ./user-privacy-settings.component.css */ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.css")]
        }),
        __metadata("design:paramtypes", [_services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"], _services_data_service__WEBPACK_IMPORTED_MODULE_6__["DataService"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_3__["OverlayContainer"],
            _services_usermanager_service__WEBPACK_IMPORTED_MODULE_2__["UserManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_4__["Router"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"],
            _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_7__["DataPrivacyManagerService"]])
    ], UserPrivacySettingsComponent);
    return UserPrivacySettingsComponent;
}());



/***/ }),

/***/ "./src/app/skeleton/user-profile/user-settings/user-settings.component.css":
/*!*********************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-settings/user-settings.component.css ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/user-profile/user-settings/user-settings.component.html":
/*!**********************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-settings/user-settings.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<p-dialog  header=\"User Settings\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"userSettings\" [closable]=\"false\">\r\n  <form [formGroup]=\"userform\" (ngSubmit)=\"saveNewPassword(userform.value)\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Change Password</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Old Password:</div>\r\n      <input pInputText type=\"password\" formControlName=\"OldPassword\" placeholder=\"Enter old password\">\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">New Password:</div>\r\n      <input pInputText type=\"password\" formControlName=\"Password\" placeholder=\"Enter new password\">\r\n      <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['Password'].valid&&userform.controls['Password'].dirty\">\r\n        <span *ngIf=\"userform.controls['Password'].errors['required']\">Password is required</span>\r\n        <span *ngIf=\"userform.controls['Password'].errors['minlength']\">Must be longer than 6 characters</span>\r\n        <span *ngIf=\"userform.controls['Password'].errors['notMatchOther']\">Has to be different from the old password</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Password repetition:</div>\r\n      <input pInputText type=\"password\" formControlName=\"PasswordRepetition\" placeholder=\"Renter new password\">\r\n      <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['PasswordRepetition'].valid&&userform.controls['PasswordRepetition'].dirty\">\r\n        <span>Passwords do not match</span>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <button [disabled]=\"!userform.valid\" type=\"submit\" pButton icon=\"fa-check\"  label=\"Submit\"></button>\r\n    </div>\r\n  </div>\r\n  </form>\r\n\r\n  <!--form [formGroup]=\"emailform\" (ngSubmit)=\"saveNewEmail(emailform.value)\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\">\r\n      <h3>Change E-Mail address</h3>\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">New E-Mail:</div>\r\n      <input formControlName=\"email\" pInputText placeholder=\"Enter new E-Mail address\">\r\n      <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!emailform.controls['email'].valid&&emailform.controls['email'].dirty\">\r\n        E-Mail Address is not valid\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <div class=\"ui-g-4\">Password:</div>\r\n      <input formControlName=\"password\" type=\"password\" pInputText placeholder=\"Enter Password\">\r\n      <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!emailform.controls['password'].valid&&emailform.controls['password'].dirty\">\r\n        Password is required\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"ui-g-12\">\r\n      <button [disabled]=\"!emailform.valid\"  type=\"submit\" pButton icon=\"fa-check\"  label=\"Submit\"></button>\r\n    </div>\r\n    </div>\r\n  </form-->\r\n\r\n  <form [formGroup]=\"usernameform\" (ngSubmit)=\"saveNewUsername(usernameform.value)\">\r\n    <div class=\"ui-g\">\r\n      <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n      <div class=\"ui-g-12\">\r\n        <h3>Change Username</h3>\r\n      </div>\r\n      <div class=\"ui-g-12\">\r\n        <div class=\"ui-g-4\">New Username:</div>\r\n        <input formControlName=\"username\" pInputText placeholder=\"Enter new Username\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!usernameform.controls['username'].valid&&usernameform.controls['username'].dirty && asciiTest(usernameform.controls['username'].value)\">\r\n         required\r\n        </div>\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!asciiTest(usernameform.controls['username'].value)\">\r\n          <div class=\"fa fa-info-circle\"></div> Username must be at least 6 characters using A-Z, a-z, 0-9, and these characters: ! # $ % ' * + - . / = ? ^ _ &#123; &#125; !  ~ @\r\n         </div>\r\n      </div>\r\n      <div class=\"ui-g-12\">\r\n        <div class=\"ui-g-4\">Password:</div>\r\n        <input formControlName=\"password\" type=\"password\" pInputText placeholder=\"Enter Password\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!usernameform.controls['password'].valid&&usernameform.controls['password'].dirty\">\r\n          Password is required\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-g-12\">\r\n        <button [disabled]=\"!usernameform.valid\"  type=\"submit\" pButton icon=\"fa-check\"  label=\"Submit\"></button>\r\n      </div>\r\n      </div>\r\n   </form>\r\n\r\n\r\n  <form [formGroup]=\"userfirstform\" (ngSubmit)=\"saveNewFirstname(userfirstform.value)\">\r\n      <div class=\"ui-g\">\r\n        <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n        <div class=\"ui-g-12\">\r\n          <h3>Change Firstname</h3>\r\n        </div>\r\n\r\n        <div class=\"ui-g-12\">\r\n          <div class=\"ui-g-4\">New Firstname:</div>\r\n          <input formControlName=\"firstname\" pInputText placeholder=\"Enter new Firstname\">\r\n          <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userfirstform.controls['firstname'].valid&&userfirstform.controls['firstname'].dirty\">\r\n           required\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"ui-g-12\">\r\n          <div class=\"ui-g-4\">Password:</div>\r\n          <input formControlName=\"password\" type=\"password\" pInputText placeholder=\"Enter Password\">\r\n          <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userfirstform.controls['password'].valid&&userfirstform.controls['password'].dirty\">\r\n            Password is required\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"ui-g-12\">\r\n          <button [disabled]=\"!userfirstform.valid\"  type=\"submit\" pButton icon=\"fa-check\"  label=\"Submit\"></button>\r\n        </div>\r\n        </div>\r\n  </form>\r\n\r\n\r\n  <form [formGroup]=\"usersurform\" (ngSubmit)=\"saveNewSurname(usersurform.value)\">\r\n    <div class=\"ui-g\">\r\n      <div class=\"ui-g-12\" style=\"width:10px;\"></div>\r\n\r\n      <div class=\"ui-g-12\">\r\n            <h3>Change Lastname</h3>\r\n          </div>\r\n      <div class=\"ui-g-12\">\r\n            <div class=\"ui-g-4\">New Lastname:</div>\r\n            <input formControlName=\"surname\" pInputText placeholder=\"Enter new Lastname\">\r\n            <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!usersurform.controls['surname'].valid&&usersurform.controls['surname'].dirty\">\r\n              required\r\n            </div>\r\n          </div>\r\n      <div class=\"ui-g-12\">\r\n        <div class=\"ui-g-4\">Password:</div>\r\n        <input formControlName=\"password\" type=\"password\" pInputText placeholder=\"Enter Password\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!usersurform.controls['password'].valid&&usersurform.controls['password'].dirty\">\r\n              Password is required\r\n        </div>\r\n      </div>\r\n      <div class=\"ui-g-12\">\r\n            <button [disabled]=\"!usersurform.valid\"  type=\"submit\" pButton icon=\"fa-check\"  label=\"Submit\"></button>\r\n      </div>\r\n    </div>\r\n  </form>\r\n\r\n  <p-footer>\r\n    <button class=\"ui-button-danger\" type=\"button\" pButton (click)=\"deleteAccountPopup = true\" label=\"Delete Account\"></button>\r\n    <button type=\"button\" pButton icon=\"fa-close\" (click)=\"userSettings=false;\" label=\"Cancel\"></button>\r\n  </p-footer>\r\n</p-dialog>\r\n\r\n<p-dialog *ngIf=\"dataloaded\" header=\"Account deletion\" [responsive]=\"true\" [modal]=true appendTo=\"body\" [width]=\"550\"\r\n          [(visible)]=\"deleteAccountPopup\">\r\n  <!--p-growl [(value)]=\"msgs\"></p-growl-->\r\n  <div class=\"ui-g-12\">\r\n  <span>You are about to delete your account. This can not be undone.</span><br>\r\n  <span>Please confirm with your password.</span>\r\n  </div>\r\n  <form [formGroup]=\"passwordform\" >\r\n  <div class=\"ui-g-12\">\r\n    <input formControlName=\"Password\" pInputText type=\"password\" placeholder=\"Enter password\" type=\"password\">\r\n  </div>\r\n  </form>\r\n  <p-footer>\r\n    <button [disabled]=\"!passwordform.valid\" (click)=\"deleteAccount(passwordform.value)\" class=\"ui-button-danger\" type=\"button\" pButton label=\"Delete\"></button>\r\n    <button  (click)=\"deleteAccountPopup =false\" class=\"ui-button-secondary\" type=\"button\" pButton label=\"Cancel\"></button>\r\n  </p-footer>\r\n\r\n</p-dialog>\r\n\r\n<div *ngIf=\"dataloaded == true\" style=\"display: table; width: max-content\">\r\n <div style=\"background: transparent; display: table-row\">\r\n    <span style=\"font-size: 1.5em; display: table-row\">{{ userBackend.username }}</span>\r\n    <span style=\"font-size:0.75em; display: table-row\">{{ userBackend.email }}</span>\r\n    <span style=\"font-size:0.75em; display: table-row\">{{ user.role.charAt(0).toUpperCase() + user.role.slice(1) }}</span>\r\n </div>\r\n    <div style=\"display: table-row\">\r\n      <span style=\"display: table-cell\">\r\n        <button pButton type=\"button\" icon=\"fa fa-pencil\" (click)=\"this.userSettings = true;\" label=\"Settings\">\r\n      </button>\r\n      </span>\r\n      <span style=\"display: table-cell\">\r\n          <button  (click)=\"logout()\" icon=\"fa fa-sign-out\" class=\"ui-button-primary\" type=\"button\" label=\"Logout\" pButton></button>\r\n      </span>\r\n\r\n    </div>\r\n</div>\r\n\r\n<!-- Platz für mehrere Knöpfe in User Menü-->\r\n\r\n"

/***/ }),

/***/ "./src/app/skeleton/user-profile/user-settings/user-settings.component.ts":
/*!********************************************************************************!*\
  !*** ./src/app/skeleton/user-profile/user-settings/user-settings.component.ts ***!
  \********************************************************************************/
/*! exports provided: UserSettingsComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserSettingsComponent", function() { return UserSettingsComponent; });
/* harmony import */ var _custom_validation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../custom-validation */ "./src/app/custom-validation.ts");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/cdk/overlay */ "./node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/index.js");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(http_status_codes__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _user_privacy_settings_user_privacy_settings_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../user-privacy-settings/user-privacy-settings.component */ "./src/app/skeleton/user-profile/user-privacy-settings/user-privacy-settings.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};










var UserSettingsComponent = /** @class */ (function () {
    function UserSettingsComponent(databaseService, dataService, overlayContainer, usermanager, router, fb) {
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.overlayContainer = overlayContainer;
        this.usermanager = usermanager;
        this.router = router;
        this.fb = fb;
        this.dataloaded = false;
        this.emailPattern = '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$';
        this.messageEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    UserSettingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.dataService.userData.subscribe(function (user) {
            _this.user = user;
            _this.usermanager.getUser(_this.user.id)
                .subscribe(function (userBackend) {
                _this.userBackend = userBackend;
                _this.dataloaded = true;
                _this.passwordform = _this.fb.group({
                    Password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required)
                });
            });
        });
        this.userSettings = false;
        this.deleteAccountPopup = false;
        this.emailform = this.fb.group({
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].pattern(this.emailPattern)])),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required)
        });
        this.usernameform = this.fb.group({
            username: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required)
        });
        this.userfirstform = this.fb.group({
            firstname: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required)
        });
        this.usersurform = this.fb.group({
            surname: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required)
        });
        this.userform = this.fb.group({
            OldPassword: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required),
            Password: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].minLength(6), Object(_custom_validation__WEBPACK_IMPORTED_MODULE_0__["notMatchOtherValidator"])('OldPassword')])),
            PasswordRepetition: new _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_6__["Validators"].required, Object(_custom_validation__WEBPACK_IMPORTED_MODULE_0__["matchOtherValidator"])('Password')]))
        });
    };
    UserSettingsComponent.prototype.asciiTest = function (username) {
        return (/^[\x00-\x1F\x21-\x7F]*$/.test(username));
    };
    /**
     * This method saves a new password to the frontend and backend database.
     * @param formValues the values from the form
     */
    UserSettingsComponent.prototype.saveNewPassword = function (formValues) {
        var _this = this;
        this.usermanager.editUserPassword(this.user.id, formValues['Password'], formValues['OldPassword'])
            // muss entsprechend bearbeitet werden, da zum jetzigen Zeitpunkt mir nicht genau bewusst íst, welche Keys sich
            // hinter formValues befinden
            .subscribe(function (res) {
            _this.usermanager.getUser(_this.user.id)
                .subscribe(function (userBackend) {
                _this.userBackend = userBackend;
                _this.messageEvent.emit({ severity: 'success', summary: 'Changed password', detail: 'Your new password was successfully set' });
                _this.userSettings = false;
            });
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            _this.messageEvent.emit({
                severity: 'error',
                summary: 'Password change failed',
                detail: 'Error occurd saving the password. Please try again later.'
            });
        });
    };
    /**
     * This method saves a new Email address to the frontend and backend database.
     * @param formValues the values from the form
     */
    UserSettingsComponent.prototype.saveNewEmail = function (formValues) {
        var _this = this;
        this.usermanager.editUserMail(this.user.id, formValues['email'], formValues['password'])
            .subscribe(function (result) {
            _this.messageEvent.emit({
                severity: 'success',
                summary: 'Changed email address',
                detail: 'Your new email address was successfully set'
            });
            _this.userSettings = false;
            _this.logout();
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_8__["CONFLICT"]) {
                _this.messageEvent.emit({ severity: 'error', summary: 'Conflict', detail: 'Email address is already registered.' });
            }
            else {
                _this.messageEvent.emit({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while changing email address. Please try again later or contact the administrator.'
                });
            }
        });
    };
    //**
    /**
    * This method saves a new Username to the frontend and backend database.
    * @param formValues the values from the form
    */
    UserSettingsComponent.prototype.saveNewUsername = function (formValues) {
        var _this = this;
        this.usermanager.editUsername(this.user.id, formValues['username'], formValues['password'])
            .subscribe(function (result) {
            _this.messageEvent.emit({
                severity: 'success',
                summary: 'Changed Username',
                detail: 'Your new Username was successfully set'
            });
            // this.userSettings = false;
            //this.logout();
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_8__["CONFLICT"]) {
                _this.messageEvent.emit({ severity: 'error', summary: 'Conflict', detail: 'Username already exists.' });
            }
            else {
                _this.messageEvent.emit({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while changing email address.Please try again later or contact the administrator.'
                });
            }
        });
    };
    /**
     * This method saves a new Firstname to the frontend and backend database.
     * @param formValues the values from the form
     */
    UserSettingsComponent.prototype.saveNewFirstname = function (formValues) {
        var _this = this;
        this.usermanager.editFirstname(this.user.id, formValues['firstname'], formValues['password'])
            .subscribe(function (result) {
            _this.messageEvent.emit({
                severity: 'success',
                summary: 'Changed Firstname',
                detail: 'Your new Firstname was successfully set'
            });
            // this.userSettings = false;
            //this.logout();
        }, function (err) {
            /* if (err.status === CONFLICT) {
              this.messageEvent.emit({severity: 'error', summary: 'Conflict', detail: 'Username is already existed.'});
              console.log('Error saving in backend database ', err);
            }
            else {*/
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            _this.messageEvent.emit({
                severity: 'error',
                summary: 'Error',
                detail: 'Error while changing firstname. Please try again later or contact the administrator.'
            });
            //}
        });
    };
    /**
     * This method saves a new Surname to the frontend and backend database.
     * @param formValues the values from the form
     */
    UserSettingsComponent.prototype.saveNewSurname = function (formValues) {
        var _this = this;
        this.usermanager.editSurname(this.user.id, formValues['surname'], formValues['password'])
            .subscribe(function (result) {
            _this.messageEvent.emit({
                severity: 'success',
                summary: 'Changed Surname',
                detail: 'Your new Surname was successfully set'
            });
            // this.userSettings = false;
            //this.logout();
        }, function (err) {
            /*   if (err.status === CONFLICT) {
                 this.messageEvent.emit({severity: 'error', summary: 'Conflict', detail: 'Username is already existed.'});
                 console.log('Error saving in backend database ', err);
               }
                else {*/
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            _this.messageEvent.emit({
                severity: 'error',
                summary: 'Error',
                detail: 'Error while changing email address.Please try again later or contact the administrator.'
            });
            // }
        });
    };
    UserSettingsComponent.prototype.deleteAccount = function (formValue) {
        // TODO user löschen ans backend senden, in der forntend db alle dokumente löschen die dem user zugeordnet sind in Users, Projects, Dashboards, Sheets, Widgets
        // this.messageEvent.emit({severity: 'error', summary: 'Deletion failed', detail: 'Please contact the system administrator.'});
        var _this = this;
        // this.messageEvent.emit({severity: 'error', summary: 'Deletion failed', detail: 'Please contact the system administrator.'});
        // user löschen ans backend senden
        this.usermanager.deleteUser(this.user.id, formValue['Password'])
            .subscribe(function (result) {
            console.log('User was deleted successfully');
            _this.dataService.changeLoginStatus(0);
            _this.dataService.changeUserData(undefined);
            _this.dataService.changeProjectData(undefined);
            _this.router.navigate(['']);
            setTimeout(function () {
                window.location.reload();
            }, 100);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            _this.messageEvent.emit({
                severity: 'error',
                summary: 'Error',
                detail: err['error']
            });
        });
    };
    /**
     * This method logs out the user and navigates back to the login page
     */
    UserSettingsComponent.prototype.logout = function () {
        this.sendLogoutToBackend(this.user.id);
        this.dataService.changeLoginStatus(0);
        this.dataService.changeUserData(undefined);
        this.dataService.changeProjectData(undefined);
        this.router.navigate(['']);
        setTimeout(function () {
            window.location.reload();
        }, 25);
        // window.location.reload();
    };
    /**
     * This method sends a logout request to the backend. So the user can be disconnected from his platform sessions.
     * @param {string} id
     */
    UserSettingsComponent.prototype.sendLogoutToBackend = function (id) {
        var _this = this;
        this.usermanager.logoutUser(id).subscribe(function (result) {
            // log result.message
            console.log('Userlogout was sent to backend server');
            console.log(result);
        }, function (err) {
            if (err['error'] === 'Session invalid' || err['error'] === 'No session found') {
                _this.router.navigate(['unauthorized']);
            }
            console.log('Userlogout could not been sent to backend server');
            console.log(err);
        });
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"])('class'),
        __metadata("design:type", Object)
    ], UserSettingsComponent.prototype, "componentCssClass", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])(_user_privacy_settings_user_privacy_settings_component__WEBPACK_IMPORTED_MODULE_9__["UserPrivacySettingsComponent"]),
        __metadata("design:type", _user_privacy_settings_user_privacy_settings_component__WEBPACK_IMPORTED_MODULE_9__["UserPrivacySettingsComponent"])
    ], UserSettingsComponent.prototype, "privacySettings", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        __metadata("design:type", Object)
    ], UserSettingsComponent.prototype, "messageEvent", void 0);
    UserSettingsComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'app-user-settings',
            template: __webpack_require__(/*! ./user-settings.component.html */ "./src/app/skeleton/user-profile/user-settings/user-settings.component.html"),
            styles: [__webpack_require__(/*! ./user-settings.component.css */ "./src/app/skeleton/user-profile/user-settings/user-settings.component.css")]
        }),
        __metadata("design:paramtypes", [_services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"], _services_data_service__WEBPACK_IMPORTED_MODULE_7__["DataService"], _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_4__["OverlayContainer"],
            _services_usermanager_service__WEBPACK_IMPORTED_MODULE_3__["UserManagerService"], _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"], _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"]])
    ], UserSettingsComponent);
    return UserSettingsComponent;
}());



/***/ }),

/***/ "./src/app/user-management/confirm/confirm.component.html":
/*!****************************************************************!*\
  !*** ./src/app/user-management/confirm/confirm.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n<div style=\"text-align: center\" class=\"ui-grid-row\">\r\n  <span style=\"color: white; margin: auto\">Please click the Button to confirm your E-Mail</span><br><br>\r\n</div>\r\n\r\n  <!-- login button -->\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12\" style=\"text-align: center\">\r\n      <button style=\"margin: auto;background-color: #2B9E81; border: none;\" class=\"button\" pButton type=\"submit\" label=\"Confirm Email\" (click)=\"confirmMail()\">\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n\r\n"

/***/ }),

/***/ "./src/app/user-management/confirm/confirm.component.scss":
/*!****************************************************************!*\
  !*** ./src/app/user-management/confirm/confirm.component.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerHomePage {\n  width: 100%;\n  height: 100%;\n  background-image: url(\"/../bcklogin.jpg\");\n  background-size: cover; }\n\n.home-card {\n  align-content: center;\n  width: auto;\n  height: auto;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: 40px;\n  background: rgba(96, 191, 161, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 15px; }\n\n.ui-tabmenu {\n  background-color: rgba(0, 0, 0, 0.25); }\n\n.ui-tabmenu .ui-tabmenu-nav {\n  display: flex;\n  justify-content: center;\n  border-bottom: 0px !important;\n  border-radius: 5px !important; }\n\n.ui-tabmenuitem {\n  background: #14B404 !important;\n  border-color: green !important; }\n\n.ui-tabmenuitem.ui-state-active {\n  background: #01DF21 !important;\n  border-color: #088A08 !important; }\n\n.ui-menuitem-text {\n  color: #FFFFFF !important; }\n\n.ui-menuitem-icon {\n  color: #FAFAFA !important; }\n"

/***/ }),

/***/ "./src/app/user-management/confirm/confirm.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/user-management/confirm/confirm.component.ts ***!
  \**************************************************************/
/*! exports provided: ConfirmComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmComponent", function() { return ConfirmComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @author Philipp Grenz
 * This component allows a user to confirm their email address
 */







var ConfirmComponent = /** @class */ (function () {
    function ConfirmComponent(router, databaseService, dataService, usermanager, projectService, fb, route) {
        var _this = this;
        this.router = router;
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.usermanager = usermanager;
        this.projectService = projectService;
        this.fb = fb;
        this.route = route;
        this.route.fragment.subscribe(function (fragment) {
            fragment = fragment.split('?')[1];
            var params = new URLSearchParams(fragment);
            _this.token = params.get('token');
        });
    }
    ConfirmComponent.prototype.ngOnInit = function () {
    };
    /**
     * Sends the token to the backend to verify confirmation
     */
    ConfirmComponent.prototype.confirmMail = function () {
        var _this = this;
        this.usermanager.confirmEmail(this.token)
            .subscribe(function (result) {
            console.log(result);
            setTimeout(function () {
                _this.router.navigate(['']);
            }, 3000);
        }, function (err) {
            console.log('Error. ', err['error']);
        });
    };
    ConfirmComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-confirm',
            template: __webpack_require__(/*! ./confirm.component.html */ "./src/app/user-management/confirm/confirm.component.html"),
            styles: [__webpack_require__(/*! ./confirm.component.scss */ "./src/app/user-management/confirm/confirm.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"], _services_project_service__WEBPACK_IMPORTED_MODULE_5__["ProjectService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"]])
    ], ConfirmComponent);
    return ConfirmComponent;
}());



/***/ }),

/***/ "./src/app/user-management/create-user/create-user.component.html":
/*!************************************************************************!*\
  !*** ./src/app/user-management/create-user/create-user.component.html ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<script\r\n  src=\"../../../../../../Desktop/ClickDigital1.1.0/app/user-management/create-user/create-user.component.ts\"></script>\r\n<p-growl [value]=\"msgs\" [sticky]=\"true\"></p-growl>\r\n\r\n<!--<img style=\"width: 35%; padding-bottom: 15px\" src=\"assets/img/clickdigitallogo_white.svg\">-->\r\n\r\n<div *ngIf=\"this.policyForm === null\">\r\n\tERROR - Cannot connect to server\r\n</div>\r\n\r\n<form [formGroup]=\"userform\" (ngSubmit)=\"checkUserInput(userform.value['email'], userform.value['username'], userform.value['password'], userform.value['passwordrepetition'], userform.value['firstname'], userform.value['lastname'], userform.value['role'])\" *ngIf=\"this.currentPage == 0 && this.policyForm != null\">\r\n  <div class=\"ui-g\">\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">First name:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-user\"></i></span-->\r\n        <input style=\"width:100%;\" type=\"text\" pInputText formControlName=\"firstname\" placeholder=\"First name\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['firstname'].valid&&userform.controls['firstname'].dirty\">\r\n          required\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">Last name:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span-- style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-user\"></i></span-->\r\n        <input style=\"width:100%;\" type=\"text\" pInputText formControlName=\"lastname\" placeholder=\"Last name\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['lastname'].valid&&userform.controls['lastname'].dirty\">\r\n          required\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\">\r\n      <div class=\"ui-g-2 textInputDescription\">User name:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-user\"></i></span-->\r\n        <input style=\"width:100%;\" type=\"text\" pInputText formControlName=\"username\" placeholder=\"Username\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['username'].valid&&userform.controls['username'].dirty && asciiTest(userform.controls['username'].value)\">\r\n          required\r\n        </div>\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!asciiTest(userform.controls['username'].value)\">\r\n         <div class=\"fa fa-info-circle\"></div> Username must be at least 6 characters using A-Z, a-z, 0-9, and these characters: ! # $ % ' * + - . / = ? ^ _ &#123; &#125; !  ~ @>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">Email address:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-envelope\"></i></span-->\r\n        <input  style=\"width:100%;\"type=\"email\" pInputText formControlName=\"email\" placeholder=\"E-Mail Address\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['email'].valid&&userform.controls['email'].dirty\">\r\n          invalid email adress\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">Password:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-lock\"></i></span-->\r\n        <input style=\"width:100%;\" type=\"password\" pInputText formControlName=\"password\" placeholder=\"Password\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['password'].valid&&userform.controls['password'].dirty\">\r\n          <span *ngIf=\"userform.controls['password'].errors['required']\">required</span>\r\n          <span *ngIf=\"userform.controls['password'].errors['minlength']\">password has to be longer</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">Confirm password:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-lock\"></i></span-->\r\n        <input style=\"width:100%;\" type=\"password\" pInputText formControlName=\"passwordrepetition\" placeholder=\"Password repetition\">\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['passwordrepetition'].valid&&userform.controls['passwordrepetition'].dirty\">\r\n          <span>non-matching passwords</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12 vertical-align\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-2 textInputDescription\">Role:</div>\r\n      <div class=\"ui-g-5 ui-fluid\">\r\n        <p-dropdown placeholder=\"Select a role\" [options]=\"role\" formControlName=\"role\" [autoWidth]=\"false\"></p-dropdown>\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['role'].valid&&userform.controls['role'].dirty\">\r\n          required\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div *ngIf=\"this.dropdown != null && this.dropdown.selectedOption !== null && this.dropdown.selectedOption.value === ROLEDEVELOPER\" class=\"ui-g-12 vertical-align\">\r\n      <div class=\"ui-g-2 textInputDescription\">PIN:</div>\r\n      <div class=\"ui-inputgroup ui-g-5\">\r\n        <!--span style=\"background: transparent; border: none;\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-key\"></i></span-->\r\n        <input pInputText type=\"password\" placeholder=\"PIN\" [(ngModel)]=\"pin\" [ngModelOptions]=\"{standalone: true}\" required>\r\n      </div>\r\n      <div class=\"ui-g-5\">\r\n        <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!userform.controls['role'].valid&&userform.controls['role'].dirty\">\r\n          required\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"ui-g-12\" style=\"margin-bottom: -10px;\">\r\n      <div class=\"ui-g-6\">\r\n        <button pButton style = \"background-color: #297E60; border: none; text-color: #FFFFFF;\" type=\"submit\" label=\"Continue to Privacy Policies\" [disabled]=\"!userform.valid\"></button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n\r\n\r\n\t<form [formGroup]=\"policyForm\" (ngSubmit)=\"createUser(policyForm.value)\" *ngIf=\"this.currentPage == 1 && this.policyForm != null\">\r\n\t\t<div *ngFor=\"let currID of sequenceList; let i=index\">\r\n\t\t\t<div class=\"vertical-align\">\r\n\t\t\t\t<p-fieldset [toggleable]=\"true\" [collapsed]=\"true\">\r\n\t\t\t\t\t<p-header>\r\n\t\t\t\t\t\t<div style=\"border: none\" class=\"ui-message\" *ngIf=\"policyForm.controls[currID].valid\">\r\n\t\t\t\t\t\t\t{{availableElements[currID].title}}\r\n\t\t\t\t\t\t\t<div style=\"border: none\" class=\"ui-message\" *ngIf=\"!availableElements[currID].consentRequired\">\r\n\t\t\t\t\t\t\t\t[OPTIONAL]\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyForm.controls[currID].valid\">\r\n\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle \"></i>\r\n\t\t\t\t\t\t\t{{availableElements[currID].title}}\r\n\t\t\t\t\t\t\t<br/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</p-header>\r\n\t\t\t\t\t<div style=\"width: 700px;\">\r\n\t\t\t\t\t\t{{availableElements[currID].descriptions.before}}\r\n\t\t\t\t\t\t<div *ngFor=\"let child of availableElements[currID].children; let i=index\">\r\n\t\t\t\t\t\t\t<p-fieldset>\r\n\t\t\t\t\t\t\t\t<p-header>\r\n\t\t\t\t\t\t\t\t\t<div style=\"border: none\" class=\"ui-message\"  *ngIf=\"policyForm.controls[child.id].valid\">\r\n\t\t\t\t\t\t\t\t\t\t{{availableElements[child.id].title}}\r\n\t\t\t\t\t\t\t\t\t\t<div style=\"border: none\" class=\"ui-message\" *ngIf=\"!availableElements[child.id].consentRequired\">\r\n\t\t\t\t\t\t\t\t\t\t\t<i>[OPTIONAL]</i>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div style=\"border: none; color: red; font-weight: bold;\" class=\"ui-message\" *ngIf=\"!policyForm.controls[child.id].valid\">\r\n\t\t\t\t\t\t\t\t\t\t<i style=\"color: red\" class=\"fa fa-exclamation-circle \"></i> {{availableElements[child.id].title}}<br/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</p-header>\r\n\t\t\t\t\t\t\t\t<div style=\"width: 600px;\">\r\n\t\t\t\t\t\t\t\t\t{{child.descriptions.before}}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div class=\"ui-g-25\">\r\n\t\t\t\t\t\t\t\t\t<p-checkbox label=\"{{child.descriptions.submit}}\" [formControl]=\"policyForm.controls[child.id]\" binary=\"true\"></p-checkbox>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</p-fieldset>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t{{availableElements[currID].descriptions.after}}\r\n\t\t\t\t\t\t<div class=\"ui-g-25\">\r\n\t\t\t\t\t\t\t<p-checkbox label=\"{{availableElements[currID].descriptions.submit}}\" [formControl]=\"policyForm.controls[currID]\" binary=\"true\"></p-checkbox>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</p-fieldset>\r\n\t\t\t</div>\r\n\t\t</div>\r\n    <div style=\"text-align: center; padding-bottom: 20px;\">\r\n      By clicking \"Submit\", you accept our policies.\r\n    </div>\r\n\t\t<div style=\"text-align: center;\">\r\n\t\t\t<button pButton (click)=\"this.currentPage = 0\" type=\"button\" label=\"Back\" style=\"margin-right: 5px;background-color: #297e60; border: none;\"></button>\r\n\t\t\t<button pButton type=\"submit\" label=\"Submit\" style=\"background-color: #297E60; border: none;\" [disabled]=\"policyForm.invalid\"></button>\r\n\t\t</div>\r\n\t</form>\r\n\r\n"

/***/ }),

/***/ "./src/app/user-management/create-user/create-user.component.scss":
/*!************************************************************************!*\
  !*** ./src/app/user-management/create-user/create-user.component.scss ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".center {\n  width: 100%;\n  height: 100%;\n  background-image: url('bcklogin.jpg');\n  background-size: cover; }\n\n.form {\n  width: 75%;\n  margin: auto; }\n\n.input-form {\n  margin: auto;\n  width: 75%; }\n\n.back-button {\n  display: table-cell; }\n\n.submit-button {\n  display: table-cell; }\n\n.cardregister {\n  align-content: center;\n  width: 45vh;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background: rgba(96, 191, 161, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 15px; }\n\n.inputgroup {\n  opacity: 0.5;\n  width: 100%;\n  margin-top: 4px;\n  margin-bottom: 4px; }\n\n.textInputDescription {\n  color: white; }\n\n.textInputStyle {\n  background: transparent;\n  border-color: white; }\n"

/***/ }),

/***/ "./src/app/user-management/create-user/create-user.component.ts":
/*!**********************************************************************!*\
  !*** ./src/app/user-management/create-user/create-user.component.ts ***!
  \**********************************************************************/
/*! exports provided: CreateUserComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CreateUserComponent", function() { return CreateUserComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "./node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _custom_validation__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../custom-validation */ "./src/app/custom-validation.ts");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! primeng/primeng */ "./node_modules/primeng/primeng.js");
/* harmony import */ var primeng_primeng__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(primeng_primeng__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! uuid/v4 */ "./node_modules/uuid/v4.js");
/* harmony import */ var uuid_v4__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(uuid_v4__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _models_database_project__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../models/database/project */ "./src/app/models/database/project.ts");
/* harmony import */ var _models_database_dashboard__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../models/database/dashboard */ "./src/app/models/database/dashboard.ts");
/* harmony import */ var _models_database_sheet__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../models/database/sheet */ "./src/app/models/database/sheet.ts");
/* harmony import */ var _models_frontend_user__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../models/frontend/user */ "./src/app/models/frontend/user.ts");
/* harmony import */ var _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../models/backend/dataprivacyelementbackend */ "./src/app/models/backend/dataprivacyelementbackend.ts");
/* harmony import */ var _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../services/dataprivacymanager.service */ "./src/app/services/dataprivacymanager.service.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This component helps to create a new user. It validates the input data and registers
 * the user in the backend database as well as in the frontend database
 */













/*@*/


var CreateUserComponent = /** @class */ (function () {
    function CreateUserComponent(http, router, databaseService, usermanager, fb, dpManager) {
        this.http = http;
        this.router = router;
        this.databaseService = databaseService;
        this.usermanager = usermanager;
        this.fb = fb;
        this.dpManager = dpManager;
        this.PIN = '1234';
        this.ROLEDEVELOPER = 'developer';
        this.ROLEENDUSER = 'enduser';
        this.msgs = [];
        this.policyForm = undefined;
        this.emailPattern = '^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$';
    }
    CreateUserComponent.prototype.ngOnInit = function () {
        var _this = this;
        /*@*/
        this.currentPage = 0;
        this.availableElements = {};
        this.sequenceList = [];
        // initialize the form validation
        this.userform = this.fb.group({
            username: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(6), _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern(/^[\x00-\x1F\x21-\x7F]*$/)])),
            firstname: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].maxLength(32)])),
            lastname: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(2), _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].maxLength(64)])),
            email: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].pattern(this.emailPattern)])),
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].minLength(6)])),
            passwordrepetition: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required, Object(_custom_validation__WEBPACK_IMPORTED_MODULE_6__["matchOtherValidator"])('password')])),
            role: new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].required)
        });
        // initialize the role dropdown
        this.role = [];
        this.role.push({ label: 'Developer', value: 'developer' });
        this.role.push({ label: 'Enduser', value: 'enduser' });
        /*@*/
        var formControls = {};
        this.dpManager.getAllRootElements().subscribe(function (result) {
            result.forEach(function (root) {
                var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_13__["DataPrivacyElementBackend"](root);
                this.availableElements[root.id] = item;
                this.sequenceList.push([root.id]);
                formControls[root.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](root.preChecked, (root.consentRequired) ? _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
            }.bind(_this));
            _this.dpManager.getAllLeafElements().subscribe(function (result) {
                result.forEach(function (leaf) {
                    var _this = this;
                    var item = new _models_backend_dataprivacyelementbackend__WEBPACK_IMPORTED_MODULE_13__["DataPrivacyElementBackend"](leaf);
                    this.availableElements[leaf.id] = item;
                    this.availableElements[leaf.contextID].addChild(item);
                    formControls[leaf.id] = new _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormControl"](leaf.preChecked, (leaf.consentRequired) ? _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].requiredTrue : _angular_forms__WEBPACK_IMPORTED_MODULE_5__["Validators"].nullValidator);
                    formControls[leaf.id].valueChanges.subscribe(function (val) {
                        var _a;
                        if (_this.availableElements[leaf.id].consentRequired) {
                            if (!val) {
                                _this.policyForm.patchValue((_a = {}, _a[leaf.contextID] = false, _a));
                            }
                        }
                    });
                }.bind(_this));
                _this.policyForm = _this.fb.group(formControls);
            });
        }, function (err) {
            _this.policyForm = null;
        });
    };
    CreateUserComponent.prototype.asciiTest = function (username) {
        return (/^[\x00-\x1F\x21-\x7F]*$/.test(username));
    };
    CreateUserComponent.prototype.checkUserInput = function (email, username, password, password2, firstname, surname, role) {
        var notification = '';
        if (username === '' || username.length < 2 || username.length > 32) {
            notification = 'invalid username';
        }
        else if (firstname === '' || firstname.length < 2 || firstname.length > 32) {
            notification = 'invalid firstname';
        }
        else if (surname === '' || surname.length < 2 || surname.length > 64) {
            surname = 'invalid surname';
        }
        else if (!email.match(/^[\w\.-]+@[\w\.-]+\.[\w]{2,4}$/)) {
            notification = 'invalid email adress';
        }
        else if (password.length < 6) {
            notification = 'password has to be longer';
        }
        else if (password !== password2) {
            notification = 'non-matching passwords';
        }
        else if (this.role.filter(function (r) { return r.value === role.toString(); }).length == 0) {
            notification = 'invalid role';
        }
        else if (role.toString() === this.ROLEDEVELOPER && this.pin !== this.PIN) {
            notification = 'Wrong pin, please try again or contact the administrator.';
        }
        else if (notification === '') {
            this.userData = {
                username: username,
                firstname: firstname,
                surname: surname,
                email: email,
                password: password,
                role: role
            };
            this.currentPage = 1;
        }
        else {
            this.msgs.push({
                severity: 'error',
                summary: 'Error',
                detail: notification
            });
        }
    };
    /**
     * This method is called when the user tries to register. The data are already validated. It sends them to the backend.
     * If the user is successfully saved in the backend database, it is saved to the frontend database with a default new project
     * @param email the email address of a user
     * @param password the password of a user
     * @param firstname the user's firstname
     * @param surname the user's surname
     * @param role the role of a user
     */
    CreateUserComponent.prototype.createUser = function (items) {
        var _this = this;
        var checkedAll = true;
        var checkedIDs = [];
        for (var id in this.availableElements) {
            var item = this.availableElements[id];
            if (item.consentRequired) {
                if (!items[id]) {
                    this.msgs.push({
                        severity: 'error',
                        summary: 'Error',
                        detail: id + ' unchecked'
                    });
                    checkedAll = false;
                }
                else {
                    checkedIDs.push(id);
                }
            }
            else if (items[id])
                checkedIDs.push(id);
        }
        if (this.userData == null) {
            this.msgs.push({
                severity: 'error',
                summary: 'Error',
                detail: 'Internal Error'
            });
        }
        else if (checkedAll) {
            this.usermanager.createUser(this.userData.role.toString(), this.userData.username, this.userData.email, this.userData.firstname, this.userData.surname, this.userData.password, checkedIDs)
                .subscribe(function (result) {
                // user creation in backend successful
                var sheetId = uuid_v4__WEBPACK_IMPORTED_MODULE_8___default()();
                var dashboardId = uuid_v4__WEBPACK_IMPORTED_MODULE_8___default()();
                var projectId = uuid_v4__WEBPACK_IMPORTED_MODULE_8___default()();
                var startSheet = new _models_database_sheet__WEBPACK_IMPORTED_MODULE_11__["SheetDB"](sheetId, 'Sheet 1', []);
                var startDashboard = new _models_database_dashboard__WEBPACK_IMPORTED_MODULE_10__["DashboardDB"](dashboardId, 'Dashboard 1', [sheetId]);
                _this.databaseService.insertDocument(_this.databaseService.USERSCOLLECTION, new _models_frontend_user__WEBPACK_IMPORTED_MODULE_12__["User"](result['userId'], _this.userData.role.toString(), projectId))
                    .subscribe(function (resultUser) {
                    _this.databaseService.insertDocument(_this.databaseService.PROJECTSCOLLECTION, new _models_database_project__WEBPACK_IMPORTED_MODULE_9__["ProjectDB"](projectId, 'Project 1', 'omega', [dashboardId]))
                        .subscribe(function (result) {
                    }, function (err) {
                        console.log('Error saving empty Project into database', err);
                    });
                    _this.databaseService.insertDocument(_this.databaseService.DASHBOARDSCOLLECTION, startDashboard)
                        .subscribe(function (result) {
                    }, function (err) {
                        console.log('Error saving empty Project into database', err);
                    });
                    _this.databaseService.insertDocument(_this.databaseService.SHEETSSCOLLECTION, startSheet)
                        .subscribe(function (result) {
                    }, function (err) {
                        console.log('Error saving empty Project into database', err);
                    });
                    _this.msgs.push({
                        severity: 'success',
                        summary: 'Success',
                        detail: 'Registration was successful'
                    });
                    setTimeout(function () {
                        _this.router.navigate(['/'], { fragment: 'login' });
                    }, 2000);
                }, function (err) {
                    _this.msgs.push({
                        severity: 'error',
                        summary: 'Error',
                        detail: 'Error while creating user.Please try again later or contact the administrator.'
                    });
                    console.log('Error saving in frontend database ', err);
                });
            }, function (err) {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: err['error']
                });
                console.log('Error saving in frontend database ', err);
            });
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])(primeng_primeng__WEBPACK_IMPORTED_MODULE_7__["Dropdown"]),
        __metadata("design:type", primeng_primeng__WEBPACK_IMPORTED_MODULE_7__["Dropdown"])
    ], CreateUserComponent.prototype, "dropdown", void 0);
    CreateUserComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-create-user',
            template: __webpack_require__(/*! ./create-user.component.html */ "./src/app/user-management/create-user/create-user.component.html"),
            styles: [__webpack_require__(/*! ./create-user.component.scss */ "./src/app/user-management/create-user/create-user.component.scss")],
        }),
        __metadata("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _services_database_service__WEBPACK_IMPORTED_MODULE_1__["DatabaseService"],
            _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormBuilder"],
            _services_dataprivacymanager_service__WEBPACK_IMPORTED_MODULE_14__["DataPrivacyManagerService"]])
    ], CreateUserComponent);
    return CreateUserComponent;
}());



/***/ }),

/***/ "./src/app/user-management/forgot-password/forgot-password.component.html":
/*!********************************************************************************!*\
  !*** ./src/app/user-management/forgot-password/forgot-password.component.html ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n  <p-growl [(value)]=\"msgs\"></p-growl>\r\n  <div class=\"containerForgotPasswordPage\">\r\n    <div class=\"forgot-card ui-grid ui-grid-responsive\">\r\n      <h1 style=\"color:white; text-align:center;\">Forgot password</h1>\r\n      <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n        <span style=\"color: white; margin: auto\">Please enter your Email Address</span><br><br>\r\n      </div>\r\n      <div style=\"text-align: center\" id=\"form\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\">\r\n        <!-- login input fields -->\r\n        <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <div style=\"margin: auto\" class=\"inputgroup ui-inputgroup ui-grid-col-6\">\r\n            <span style=\"background: transparent; border-color: white; margin-left: auto\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-user\"></i></span>\r\n            <input style=\"margin-right: auto\" #email type=\"text\" pInputText placeholder=\"E-Mail\">\r\n          </div>\r\n        </div>\r\n        <!-- login button -->\r\n        <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <button style=\"margin: auto;background-color: #297E60; border: none\" class=\"button\" pButton type=\"submit\" label=\"Request Reset Link\" (click)=\"requestReset(email.value)\">\r\n          </button><br><br><br>\r\n        </div>\r\n        <!--<div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <button style=\"margin: auto\" class=\"button\" pButton label=\"Back to Login\" [routerLink]=\"['']\">\r\n          </button>\r\n        </div>-->\r\n        <br><br><br><br><br>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/user-management/forgot-password/forgot-password.component.scss":
/*!********************************************************************************!*\
  !*** ./src/app/user-management/forgot-password/forgot-password.component.scss ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerForgotPasswordPage {\n  width: 100%;\n  height: 100%;\n  background-image: url('bcklogin.jpg');\n  background-size: cover; }\n\n.forgot-card {\n  align-content: center;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background: rgba(96, 191, 161, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 15px; }\n\n.inputgroup {\n  opacity: 0.5;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  margin-top: 4px;\n  margin-bottom: 4px; }\n\n.button {\n  margin: auto;\n  width: -webkit-fit-content !important;\n  width: -moz-fit-content !important;\n  width: fit-content !important; }\n\n.forgot-card .ui-widget-content {\n  background-color: transparent;\n  border: none; }\n"

/***/ }),

/***/ "./src/app/user-management/forgot-password/forgot-password.component.ts":
/*!******************************************************************************!*\
  !*** ./src/app/user-management/forgot-password/forgot-password.component.ts ***!
  \******************************************************************************/
/*! exports provided: ForgotPasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForgotPasswordComponent", function() { return ForgotPasswordComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/index.js");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(http_status_codes__WEBPACK_IMPORTED_MODULE_6__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @author Philipp Grenz
 * this component allows the user to request a reset link
 */







var ForgotPasswordComponent = /** @class */ (function () {
    function ForgotPasswordComponent(router, databaseService, dataService, usermanager, projectService) {
        this.router = router;
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.usermanager = usermanager;
        this.projectService = projectService;
        this.msgs = [];
        this.ROLEDEVELOPER = 'developer';
        this.ROLEENDUSER = 'enduser';
    }
    ForgotPasswordComponent.prototype.ngOnInit = function () {
    };
    /**
     * sends the email the user entered to the backend
     * @param email the email address of the user
     */
    ForgotPasswordComponent.prototype.requestReset = function (email) {
        var _this = this;
        this.usermanager.requestResetLinkUser(email)
            .subscribe(function (result) {
            _this.msgs.push({ severity: 'success', summary: 'Sent Email', detail: 'A reset Link has been sent to your email address. You will be redirected to the login page' });
            setTimeout(function () {
                _this.router.navigate(['']);
            }, 5000);
        }, function (err) {
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_6__["UNAUTHORIZED"]) {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: err['error']
                });
            }
            else {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error sending email. Please contact the system administrator.'
                });
            }
            console.log('Error while login. ', err['error']);
        });
    };
    ForgotPasswordComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-forgot-password',
            template: __webpack_require__(/*! ./forgot-password.component.html */ "./src/app/user-management/forgot-password/forgot-password.component.html"),
            styles: [__webpack_require__(/*! ./forgot-password.component.scss */ "./src/app/user-management/forgot-password/forgot-password.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"], _services_project_service__WEBPACK_IMPORTED_MODULE_5__["ProjectService"]])
    ], ForgotPasswordComponent);
    return ForgotPasswordComponent;
}());



/***/ }),

/***/ "./src/app/user-management/home/home.component.html":
/*!**********************************************************!*\
  !*** ./src/app/user-management/home/home.component.html ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<p-growl [value]=\"homeMsgs\" [sticky]=\"true\"></p-growl>\r\n<cookie-law learnMore=\"/#privacyPolicy\" position=\"top\"></cookie-law>\r\n\r\n<div class=\"containerHomePage\">\r\n\t<div id=\"logincard\" class=\"home-card ui-grid ui-grid-responsive\">\r\n    <h1 style=\"text-align: center;\">Welcome to</h1>\r\n\t\t<a href=\"\">\r\n\t\t\t<img style=\"text-align: center; padding-bottom: 25px; width: 35%; margin: auto\" class=\"ui-grid-row\" src=\"../../../assets/img/clickdigitallogo_white.svg\">\r\n\t\t</a>\r\n    <p-tabMenu id=\"tabMenu\" #tabMenu></p-tabMenu>\r\n\r\n\t\t<br/>\r\n    <p-scrollPanel [style]=\"{height: '70%'}\">\r\n      <ng-container #tab></ng-container>\r\n    </p-scrollPanel>\r\n  </div>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/user-management/home/home.component.scss":
/*!**********************************************************!*\
  !*** ./src/app/user-management/home/home.component.scss ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerHomePage {\n  width: 100vw;\n  height: 100vh;\n  background-image: url(\"/../bcklogin.jpg\");\n  background-size: cover;\n  background-attachment: fixed; }\n\n.home-card {\n  align-content: center;\n  width: available;\n  height: available;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: 40px;\n  background: rgba(96, 191, 161, 0.6);\n  border: none;\n  padding: 15px; }\n\n#logincard {\n  color: #FFFFFF !important; }\n\n.home-card .ui-tabmenu .ui-tabmenu-nav {\n  display: flex;\n  justify-content: center;\n  background-color: transparent; }\n\n.home-card .ui-widget-content {\n  background-color: transparent;\n  border: none; }\n\n.home-card .ui-tabmenuitem {\n  background: #297E60 !important;\n  border-color: #297E60 !important; }\n\n.home-card .ui-tabmenuitem.ui-state-active {\n  background: #297E60 !important;\n  border-color: #FFFFFF !important; }\n\n.home-card .ui-confirmdialog {\n  top: 50% !important;\n  left: 50% !important; }\n"

/***/ }),

/***/ "./src/app/user-management/home/home.component.ts":
/*!********************************************************!*\
  !*** ./src/app/user-management/home/home.component.ts ***!
  \********************************************************/
/*! exports provided: HomeComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HomeComponent", function() { return HomeComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! primeng/api */ "./node_modules/primeng/api.js");
/* harmony import */ var primeng_api__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(primeng_api__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var ngx_cookie_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ngx-cookie-service */ "./node_modules/ngx-cookie-service/ngx-cookie-service.es5.js");
/* harmony import */ var _login_login_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../login/login.component */ "./src/app/user-management/login/login.component.ts");
/* harmony import */ var _create_user_create_user_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../create-user/create-user.component */ "./src/app/user-management/create-user/create-user.component.ts");
/* harmony import */ var _privacyPolicy_privacyPolicy_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../privacyPolicy/privacyPolicy.component */ "./src/app/user-management/privacyPolicy/privacyPolicy.component.ts");
/* harmony import */ var _forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../forgot-password/forgot-password.component */ "./src/app/user-management/forgot-password/forgot-password.component.ts");
/* harmony import */ var _reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../reset-password/reset-password.component */ "./src/app/user-management/reset-password/reset-password.component.ts");
/* harmony import */ var _confirm_confirm_component__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../confirm/confirm.component */ "./src/app/user-management/confirm/confirm.component.ts");
/* harmony import */ var _imprint_imprint_component__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../imprint/imprint.component */ "./src/app/user-management/imprint/imprint.component.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};











var HomeComponent = /** @class */ (function () {
    function HomeComponent(cookieService, confirmationService, router, componentFactoryResolver, viewContainerRef, route) {
        this.cookieService = cookieService;
        this.confirmationService = confirmationService;
        this.router = router;
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.route = route;
        this.homeMsgs = [];
        this.availableMenuItems = {};
    }
    HomeComponent.prototype.ngOnInit = function () {
        this.initTabMenu();
        this.initMenuItem();
        this.initCookiepopup();
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Login"
     *
     * @return object
     */
    HomeComponent.prototype.loginMI = function () {
        return {
            'key': 'login',
            'label': ' Login',
            'icon': 'fa fa-sign-in',
            'component': _login_login_component__WEBPACK_IMPORTED_MODULE_4__["LoginComponent"]
        };
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Create User"
     *
     * @return object
     */
    HomeComponent.prototype.createUserMI = function () {
        return {
            'key': 'createUser',
            'label': ' Create User',
            'icon': 'fa fa-user',
            'component': _create_user_create_user_component__WEBPACK_IMPORTED_MODULE_5__["CreateUserComponent"]
        };
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Data Privacy Policy"
     *
     * @return object
     */
    HomeComponent.prototype.privacyPolicyMI = function () {
        return {
            'key': 'privacyPolicy',
            'label': ' Data Privacy Policy',
            'icon': 'fa fa-info-circle',
            'component': _privacyPolicy_privacyPolicy_component__WEBPACK_IMPORTED_MODULE_6__["PrivacyPolicyComponent"]
        };
    };
    /**
    * this method returns an object that is responsible for forwarding to the "/acp" page
    *
    * @return object
    */
    HomeComponent.prototype.privacyPolicyMgmtMI = function () {
        return {
            'key': 'acp',
            'label': ' Privacy Policy Management Tools',
            'icon': 'fa fa-plus',
            'visible': false,
            'navigateTo': '/acp'
        };
    };
    /**
     * this method returns an object which is responsible for creating the menu item "Imprint"
     *
     * @return object
     */
    HomeComponent.prototype.ImprintMI = function () {
        return {
            'key': 'imprint',
            'label': ' Imprint',
            'icon': 'far fa-info-circle',
            'component': _imprint_imprint_component__WEBPACK_IMPORTED_MODULE_10__["ImprintComponent"]
        };
    };
    /**
     * this method ensures that the "Forgot Password" page is only visible via the "/#forgotPassword" link
     *
     * @return object
     */
    HomeComponent.prototype.forgotPasswordMI = function () {
        return {
            'key': 'forgotPassword',
            'label': ' Forgot Password',
            'visible': false,
            'component': _forgot_password_forgot_password_component__WEBPACK_IMPORTED_MODULE_7__["ForgotPasswordComponent"]
        };
    };
    /**
     * this method ensures that the "Reset Password" page is only visible via the "/#resetPassword" link
     *
     * @return object
     */
    HomeComponent.prototype.resetPasswordMI = function () {
        return {
            'key': 'resetPassword',
            'label': ' Reset Password',
            'visible': false,
            'component': _reset_password_reset_password_component__WEBPACK_IMPORTED_MODULE_8__["ResetPasswordComponent"]
        };
    };
    /**
     * this method ensures that the "Confirm Email" page is only visible via the "/#confirmEmail" link
     *
     * @return object
     */
    HomeComponent.prototype.confirmEmailMI = function () {
        return {
            'key': 'confirmEmail',
            'label': ' Confirm Email',
            'visible': false,
            'component': _confirm_confirm_component__WEBPACK_IMPORTED_MODULE_9__["ConfirmComponent"]
        };
    };
    /**
     * URL content is adapted so that further processing of the fragments can function without problems
     *
     * @return string url without parameters
     */
    HomeComponent.prototype.getPreparedURL = function () {
        var url = this.route.snapshot.fragment;
        if (url == null)
            url = '';
        url = url.split('?')[0]; //Parameterangaben abschneiden
        return url;
    };
    /**
     * in this method, any method that has a suffix "MI" is called and its return values are stored in the variable "availableMenuItems"
     * in addition, for each menu item and sub-item an event listener is declared which ensures that the corresponding component is loaded and the URL is adjusted accordingly
     */
    HomeComponent.prototype.initTabMenu = function () {
        var prototypes = Object.getPrototypeOf(this);
        for (var funcName in prototypes) {
            if (funcName.substr(-2) === 'MI') {
                var item_1 = this[funcName]();
                if (typeof (item_1) === 'object') {
                    this.availableMenuItems[item_1.key] = item_1;
                }
            }
        }
        this.tabMenu.model = [];
        for (var obj in this.availableMenuItems) {
            var item = this.availableMenuItems[obj];
            //Eventdeklaration
            item.command = (function (key) {
                return function () {
                    this.loadComponent(key);
                };
            })(obj).bind(this);
            this.tabMenu.model.push(item);
        }
    };
    HomeComponent.prototype.initMenuItem = function () {
        var _this = this;
        this.setMenuItem(this.getPreparedURL());
        this.route.fragment.subscribe(function (fragments) { return _this.setMenuItem(_this.getPreparedURL()); });
    };
    /**
     * processing options when user accepting the cookie hint
     */
    HomeComponent.prototype.initCookiepopup = function () {
        if (this.cookieService.get('acquiesced') === '') {
        }
    };
    /**
      * sets the currently viewed menu item and loads the corresponding component
      *
      * @param key which MenuItem is to be loaded
      */
    HomeComponent.prototype.setMenuItem = function (key) {
        var menuItem = this.getMenuItem(key == '' ? Object.keys(this.availableMenuItems)[0] : key);
        if (menuItem != null) {
            this.tabMenu.activeItem = menuItem;
            this.loadComponent(menuItem.key);
        }
        else {
            this.homeMsgs.push({
                severity: 'error',
                summary: 'Error',
                detail: 'key <b>' + key + '</b> is invalid'
            });
        }
    };
    HomeComponent.prototype.getMenuItem = function (key) {
        return this.availableMenuItems[key];
    };
    /**
     * this method ensures that the content of the component is displayed or that you are redirected to a specific page
     *
     * @param key which MenuItem is to be loaded
     */
    HomeComponent.prototype.loadComponent = function (key) {
        this.tab.remove(this.tab.length);
        var menuItem = this.getMenuItem(key);
        var component = menuItem.component;
        if (component != null) {
            var factory = this.componentFactoryResolver.resolveComponentFactory(component);
            var componentRef = this.tab.createComponent(factory);
        }
        else {
            if (menuItem.navigateTo != null) {
                this.router.navigateByUrl(menuItem.navigateTo);
            }
            else {
                this.homeMsgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'component of <b>' + key + '</b> is undefined'
                });
            }
        }
    };
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('cookieLaw'),
        __metadata("design:type", Object)
    ], HomeComponent.prototype, "cookieLaw", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tabMenu'),
        __metadata("design:type", Object)
    ], HomeComponent.prototype, "tabMenu", void 0);
    __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"])('tab', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }),
        __metadata("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"])
    ], HomeComponent.prototype, "tab", void 0);
    HomeComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-home',
            template: __webpack_require__(/*! ./home.component.html */ "./src/app/user-management/home/home.component.html"),
            styles: [__webpack_require__(/*! ./home.component.scss */ "./src/app/user-management/home/home.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            providers: [primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], ngx_cookie_service__WEBPACK_IMPORTED_MODULE_3__["CookieService"]]
        })
        /**
        *	add new menu item:
        *	step 1: declare method (for menu items), important the suffix "MI" must be included in the method name
        *	step 2: return an object in the properties similar to MenuModule (attributes not contained in MenuModule, e.g. "component", must be specified)
        *
        *   forwarding: if you do not want to display a page, but want to be redirected to one, you must set "component" to null and adjust "navigateTo" accordingly
        */
        ,
        __metadata("design:paramtypes", [ngx_cookie_service__WEBPACK_IMPORTED_MODULE_3__["CookieService"], primeng_api__WEBPACK_IMPORTED_MODULE_1__["ConfirmationService"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"], _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], HomeComponent);
    return HomeComponent;
}());



/***/ }),

/***/ "./src/app/user-management/imprint/imprint.component.html":
/*!****************************************************************!*\
  !*** ./src/app/user-management/imprint/imprint.component.html ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div style=\"white-space:  pre-line; color: white;\">\r\n<div style=\"background: rgba(0, 0, 0, 0.5); font-weight: bold\">Editorial Notes</div>\r\nThe Fraunhofer Institute for Fraunhofer-Institut für Graphische Datenverarbeitung (Fraunhoferstraße 5, 64283 Darmstadt).<br/>\r\nis a constituent entity of the Fraunhofer-Gesellschaft, and as such has no separate legal status.\r\n\r\nFraunhofer-Gesellschaft \r\nzur Förderung der angewandten Forschung e.V.\r\nHansastraße 27 c\r\n80686 München\r\nPhone: +49 89 1205- 0\r\nFax: +49 89 1205-7531 \r\nwww.fraunhofer.de\r\n<br/>\r\n<b>VAT Identification Number</b> in accordance with §27 a VAT Tax Act: DE 129515865\r\n<br/>\r\n<div style=\"background: rgba(0, 0, 0, 0.5); font-weight: bold\">Court of jurisdiction</div>\r\nAmtsgericht  München (district court)\r\nRegistered nonprofit association \r\nRegistration no. VR 4461 \r\n<br/>\r\nResponsible editor: XXX\r\nxxx@xxx.fraunhofer.de\r\n<br/>\r\n<div style=\"background: rgba(0, 0, 0, 0.5); font-weight: bold\">Executive Board</div>\r\nProf. Dr.-Ing. Reimund Neugebauer, President, Corporate Policy and Research, Technology Marketing and Business Models Management\r\nProf. Dr. Alexander Kurz, Human Resources, Legal Affairs and IP Management\r\nDipl.-Kfm. Andreas Meuer, Controlling and Digital Business Processes\r\n<br/>\r\n<div style=\"background: rgba(0, 0, 0, 0.5); font-weight: bold\">Usage Rights</div>\r\nCopyright © by\r\nFraunhofer-Gesellschaft\r\nAll rights reserved. \r\nAll copyright for this Web site are owned in full by the Fraunhofer-Gesellschaft. \r\n<br/>\r\nPermission is granted to download or print material published on this site for personal use only. Its use for any other purpose, and in particular its commercial use or distribution, are strictly forbidden in the absence of prior written approval. Please address your requests for approval to:<br/>\r\n<br/>\r\nFraunhofer Institute for Fraunhofer-Institut für Graphische Datenverarbeitung<br/>\r\nFraunhoferstraße 5<br/>\r\n64283 Darmstadt\r\n<br/>\r\nNotwithstanding this requirement, material may be downloaded or printed for use in connection with press reports on the activities of the Fraunhofer-Gesellschaft and its constituent institutes, on condition that the following terms are complied with:\r\n<br/>\r\nNo alterations may be made to pictorial content, with the exception of framing modifications to emphasize the central motif. The source must be quoted and two free reference copies must be sent to the above-mentioned address. Such usage is free of charge.\r\n<br/>\r\n<div style=\"background: rgba(0, 0, 0, 0.5); font-weight: bold\">Disclaimer</div>\r\nWe cannot assume any liability for the content of external pages. Solely the operators of those linked pages are responsible for their content.\r\nWe make every reasonable effort to ensure that the content of this Web site is kept up to date, and that it is accurate and complete. Nevertheless, the possibility of errors cannot be entirely ruled out. We do not give any warranty in respect of the timeliness, accuracy or completeness of material published on this Web site, and disclaim all liability for (material or non-material) loss or damage incurred by third parties arising from the use of content obtained from the Web site.\r\nRegistered trademarks and proprietary names, and copyrighted text and images, are not generally indicated as such on our Web pages. But the absence of such indications in no way implies that these names, images or text belong to the public domain in the context of trademark or copyright law.\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/user-management/imprint/imprint.component.scss":
/*!****************************************************************!*\
  !*** ./src/app/user-management/imprint/imprint.component.scss ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ""

/***/ }),

/***/ "./src/app/user-management/imprint/imprint.component.ts":
/*!**************************************************************!*\
  !*** ./src/app/user-management/imprint/imprint.component.ts ***!
  \**************************************************************/
/*! exports provided: ImprintComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ImprintComponent", function() { return ImprintComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var ImprintComponent = /** @class */ (function () {
    function ImprintComponent() {
    }
    ImprintComponent.prototype.ngOnInit = function () {
    };
    ImprintComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-imprint',
            template: __webpack_require__(/*! ./imprint.component.html */ "./src/app/user-management/imprint/imprint.component.html"),
            styles: [__webpack_require__(/*! ./imprint.component.scss */ "./src/app/user-management/imprint/imprint.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [])
    ], ImprintComponent);
    return ImprintComponent;
}());



/***/ }),

/***/ "./src/app/user-management/login/login.component.html":
/*!************************************************************!*\
  !*** ./src/app/user-management/login/login.component.html ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = " <p-growl [(value)]=\"msgs\"></p-growl>\r\n\r\n  <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n    <span style=\"color: white; margin: auto\">Please enter your Credentials</span><br><br>\r\n  </div>\r\n  <div style=\"text-align: center\" id=\"form\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\">\r\n      <!-- login input fields -->\r\n      <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n        <div style=\"margin: auto\" class=\"inputgroup ui-inputgroup ui-grid-col-6\">\r\n          <span style=\"background: transparent; border: none; margin-left: auto\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-user\"></i></span>\r\n          <input style=\"margin-right: auto\" #username type=\"text\" pInputText placeholder=\"Username\" (keyup.enter)=\"login(username.value, password.value)\">\r\n        </div>\r\n      </div>\r\n    <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n    <div style=\"margin: auto\" class=\"inputgroup ui-inputgroup ui-grid-col-6\">\r\n      <span style=\"background: transparent; border: none; margin-left: auto\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-lock\"></i></span>\r\n      <input style=\"margin-right: auto\"  #password type=\"password\" pInputText placeholder=\"Password\" (keyup.enter)=\"login(username.value, password.value)\">\r\n    </div>\r\n    </div>\r\n      <!-- login button -->\r\n      <div class=\"ui-g\">\r\n      <div class=\"ui-g-12\" style=\"text-align: center\">\r\n      <button style=\"margin: auto; background-color: #297E60; border: none\" class=\"button\" pButton type=\"submit\" label=\"Login\" (click)=\"login(username.value, password.value)\"(keyup.enter)=\"login(username.value, password.value)\" [disabled]=\"this.loginsLeft <= 0\">\r\n      </button>\r\n    </div>\r\n      <div class=\"ui-g-12\" style=\"text-align: center\">\r\n      <button style=\"margin: auto;background-color: #297E60; border: none\" class=\"button\" pButton type=\"submit\" label=\"Forgot Password?\" *ngIf=\"this.loginsLeft <= 0\" (click)=\"this.router.navigate(['/'], {fragment: 'forgotPassword'})\">\r\n      </button>\r\n    </div>\r\n    <div class=\"loading-indicator\" style=\"text-align: center;\" *ngIf=\"isLoading\">\r\n      <p-progressSpinner [style]=\"{width: '50px', height: '50px'}\" strokeWidth=\"8\"></p-progressSpinner>\r\n    </div>\r\n  </div>\r\n\r\n"

/***/ }),

/***/ "./src/app/user-management/login/login.component.scss":
/*!************************************************************!*\
  !*** ./src/app/user-management/login/login.component.scss ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerLoginPage {\n  width: 100%;\n  height: 100%;\n  background-image: url('bcklogin.jpg');\n  background-size: cover; }\n\n.card-login {\n  align-content: center;\n  width: 45vh;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background: rgba(96, 191, 161, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 15px; }\n\n.inputgroup {\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  margin-top: 4px;\n  margin-bottom: 4px; }\n\n.button {\n  margin: auto;\n  width: -webkit-fit-content !important;\n  width: -moz-fit-content !important;\n  width: fit-content !important; }\n\n.loading-indicator {\n  position: fixed;\n  z-index: 999;\n  height: 2em;\n  width: 2em;\n  overflow: show;\n  margin: auto;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0; }\n\n/* Transparent Overlay */\n\n.loading-indicator:before {\n  content: '';\n  display: block;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.53); }\n\n@-webkit-keyframes ui-progress-spinner-color {\n  100%,\n  0% {\n    stroke: #60bfa1; } }\n\n@keyframes ui-progress-spinner-color {\n  100%,\n  0% {\n    stroke: #60bfa1; } }\n"

/***/ }),

/***/ "./src/app/user-management/login/login.component.ts":
/*!**********************************************************!*\
  !*** ./src/app/user-management/login/login.component.ts ***!
  \**********************************************************/
/*! exports provided: LoginComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginComponent", function() { return LoginComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/index.js");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(http_status_codes__WEBPACK_IMPORTED_MODULE_6__);
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @author Chinaedu Onwukwe, Janina Hüther
 * This component helps to login a user. It sends the data to the backend and handles the exceptions.
 * If none it requests te data for the specific user and binds it to the models.
 */







var LoginComponent = /** @class */ (function () {
    function LoginComponent(router, databaseService, dataService, usermanager, projectService) {
        this.router = router;
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.usermanager = usermanager;
        this.projectService = projectService;
        this.msgs = [];
        this.ROLEDEVELOPER = 'developer';
        this.ROLEENDUSER = 'enduser';
    }
    LoginComponent.prototype.ngOnInit = function () {
        this.loginsLeft = 2;
        this.isLoading = false;
    };
    /**
     * This method is called when the user clicks on the login button.
     * It requests the backend to validate the user login data. It receives the {@link User#id}
     * @param email the email address of the user
     * @param password the password of the user
     */
    LoginComponent.prototype.login = function (username, password) {
        var _this = this;
        if (this.loginsLeft <= 0) {
            return;
        }
        this.isLoading = true;
        this.usermanager.loginUser(username, password)
            .subscribe(function (result) {
            _this.userId = result['userId'];
            _this.loadUserData();
        }, function (err) {
            _this.isLoading = false;
            console.log(_this.loginsLeft);
            _this.loginsLeft -= 1;
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_6__["UNAUTHORIZED"]) {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: err['error']
                });
            }
            else {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: 'Error while login. Please contact the system administrator.'
                });
            }
            console.log('Error while login. ', err['error']);
        });
    };
    /**
     * This method loads the specific user data from the database.
     */
    LoginComponent.prototype.loadUserData = function () {
        var _this = this;
        this.databaseService.getDocument(this.databaseService.USERSCOLLECTION, this.userId)
            .subscribe(function (user) {
            if (user.role === _this.ROLEDEVELOPER) {
                _this.dataService.changeLoginStatus(2);
            }
            else if (user.role === _this.ROLEENDUSER) {
                _this.dataService.changeLoginStatus(1);
            }
            console.log(user.projects[0]);
            _this.dataService.changeLoginUUID(user.id);
            _this.dataService.changeUserData(user);
            _this.projectService.loadNewProject(user.projects[0], true); // TODO zuletzt bearbeitetes projekt laden
        }, function (err) {
            console.log('Error loading user data from database ', err);
        });
    };
    LoginComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-login',
            template: __webpack_require__(/*! ./login.component.html */ "./src/app/user-management/login/login.component.html"),
            styles: [__webpack_require__(/*! ./login.component.scss */ "./src/app/user-management/login/login.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"], _services_project_service__WEBPACK_IMPORTED_MODULE_5__["ProjectService"]])
    ], LoginComponent);
    return LoginComponent;
}());



/***/ }),

/***/ "./src/app/user-management/privacyPolicy/privacyPolicy.component.html":
/*!****************************************************************************!*\
  !*** ./src/app/user-management/privacyPolicy/privacyPolicy.component.html ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "<div class=\"containerPolicyPage\">\r\n\t<object data=\"assets/GDPR_Compliance_Statement_Template.pdf\" width=\"100%\" height=\"100%\" type='application/pdf'>\r\n\t</object>\r\n</div>\r\n"

/***/ }),

/***/ "./src/app/user-management/privacyPolicy/privacyPolicy.component.scss":
/*!****************************************************************************!*\
  !*** ./src/app/user-management/privacyPolicy/privacyPolicy.component.scss ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerPolicyPage {\n  color: white;\n  height: 100%;\n  text-align: center; }\n"

/***/ }),

/***/ "./src/app/user-management/privacyPolicy/privacyPolicy.component.ts":
/*!**************************************************************************!*\
  !*** ./src/app/user-management/privacyPolicy/privacyPolicy.component.ts ***!
  \**************************************************************************/
/*! exports provided: PrivacyPolicyComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrivacyPolicyComponent", function() { return PrivacyPolicyComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};

var PrivacyPolicyComponent = /** @class */ (function () {
    function PrivacyPolicyComponent() {
    }
    PrivacyPolicyComponent.prototype.ngOnInit = function () {
    };
    PrivacyPolicyComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-privacy',
            template: __webpack_require__(/*! ./privacyPolicy.component.html */ "./src/app/user-management/privacyPolicy/privacyPolicy.component.html"),
            styles: [__webpack_require__(/*! ./privacyPolicy.component.scss */ "./src/app/user-management/privacyPolicy/privacyPolicy.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [])
    ], PrivacyPolicyComponent);
    return PrivacyPolicyComponent;
}());



/***/ }),

/***/ "./src/app/user-management/reset-password/reset-password.component.html":
/*!******************************************************************************!*\
  !*** ./src/app/user-management/reset-password/reset-password.component.html ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = "\r\n  <p-growl [(value)]=\"msgs\"></p-growl>\r\n  <div class=\"containerResetPasswordPage\">\r\n    <div class=\"reset-card ui-grid ui-grid-responsive\">\r\n      <h1 style=\"color:white; text-align:center;\">Reset password</h1>\r\n    <form [formGroup]=\"resetform\" (ngSubmit)=\"setNewPassword(resetform.value['password'])\">\r\n\r\n      <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n        <span style=\"color: white; margin: auto\">Please enter your new Password</span><br><br>\r\n      </div>\r\n      <div style=\"text-align: center\" id=\"form\" class=\"ui-grid ui-grid-responsive ui-grid-pad ui-fluid\">\r\n        <!-- login input fields -->\r\n        <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <div style=\"margin: auto\" class=\"inputgroup ui-inputgroup ui-grid-col-6\">\r\n            <span style=\"background: transparent; border-color: white; margin-left: auto\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-lock\"></i></span>\r\n            <input style=\"margin-right: auto\" formControlName=\"password\" #password type=\"password\" pInputText placeholder=\"new Password\">\r\n            <div>\r\n              <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!resetform.controls['password'].valid&&resetform.controls['password'].dirty\">\r\n                <span *ngIf=\"resetform.controls['password'].errors['required']\">required</span>\r\n                <span *ngIf=\"resetform.controls['password'].errors['minlength']\">password has to be longer</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <div style=\"margin: auto\" class=\"inputgroup ui-inputgroup ui-grid-col-6\">\r\n            <span style=\"background: transparent; border-color: white; margin-left: auto\" class=\"ui-inputgroup-addon\"><i style=\"color: white\" class=\"fa fa-lock\"></i></span>\r\n            <input style=\"margin-right: auto\" formControlName=\"passwordrepetition\" type=\"password\" pInputText placeholder=\"repeat new Password\">\r\n            <div>\r\n              <div style=\"width: fit-content\" class=\"ui-message ui-messages-error ui-corner-all\" *ngIf=\"!resetform.controls['passwordrepetition'].valid&&resetform.controls['passwordrepetition'].dirty\">\r\n                <span>non-matching passwords</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <!-- login button -->\r\n        <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          <button style=\"margin: auto; background-color: #2B9E81; border: none\" class=\"button\" pButton type=\"submit\" label=\"Confirm\" [disabled]=\"!resetform.valid\">\r\n          </button><br><br><br>\r\n        </div>\r\n          <div style=\"text-align: center\" class=\"ui-grid-row\">\r\n          </div>\r\n      </div>\r\n    </form>\r\n    </div>\r\n  </div>\r\n\r\n\r\n"

/***/ }),

/***/ "./src/app/user-management/reset-password/reset-password.component.scss":
/*!******************************************************************************!*\
  !*** ./src/app/user-management/reset-password/reset-password.component.scss ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = ".containerResetPasswordPage {\n  width: 100%;\n  height: 100%;\n  background-image: url('bcklogin.jpg');\n  background-size: cover; }\n\n.reset-card {\n  align-content: center;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  height: -webkit-fit-content;\n  height: -moz-fit-content;\n  height: fit-content;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  margin: auto;\n  background: rgba(96, 191, 161, 0.6);\n  border: 0.5px;\n  border-style: solid;\n  border-color: rgba(255, 255, 255, 0.3);\n  padding: 15px; }\n\n.inputgroup {\n  opacity: 0.5;\n  width: -webkit-fit-content;\n  width: -moz-fit-content;\n  width: fit-content;\n  margin-top: 4px;\n  margin-bottom: 4px; }\n\n.button {\n  margin: auto;\n  width: -webkit-fit-content !important;\n  width: -moz-fit-content !important;\n  width: fit-content !important; }\n\n.reset-card .ui-widget-content {\n  background-color: transparent;\n  border: none; }\n"

/***/ }),

/***/ "./src/app/user-management/reset-password/reset-password.component.ts":
/*!****************************************************************************!*\
  !*** ./src/app/user-management/reset-password/reset-password.component.ts ***!
  \****************************************************************************/
/*! exports provided: ResetPasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResetPasswordComponent", function() { return ResetPasswordComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/router */ "./node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _services_database_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/database.service */ "./src/app/services/database.service.ts");
/* harmony import */ var _services_data_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/data.service */ "./src/app/services/data.service.ts");
/* harmony import */ var _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/usermanager.service */ "./src/app/services/usermanager.service.ts");
/* harmony import */ var _services_project_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/project.service */ "./src/app/services/project.service.ts");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! http-status-codes */ "./node_modules/http-status-codes/index.js");
/* harmony import */ var http_status_codes__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(http_status_codes__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/forms */ "./node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _custom_validation__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../custom-validation */ "./src/app/custom-validation.ts");
var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
/**
 * @author Philipp Grenz
 * This component allows the user to reset their password
 */









var ResetPasswordComponent = /** @class */ (function () {
    function ResetPasswordComponent(router, databaseService, dataService, usermanager, projectService, fb, route) {
        var _this = this;
        this.router = router;
        this.databaseService = databaseService;
        this.dataService = dataService;
        this.usermanager = usermanager;
        this.projectService = projectService;
        this.fb = fb;
        this.route = route;
        this.msgs = [];
        this.ROLEDEVELOPER = 'developer';
        this.ROLEENDUSER = 'enduser';
        this.route.fragment.subscribe(function (fragment) {
            fragment = fragment.split('?')[1];
            var params = new URLSearchParams(fragment);
            _this.token = params.get('token');
        });
    }
    ResetPasswordComponent.prototype.ngOnInit = function () {
        this.resetform = this.fb.group({
            password: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required, _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].minLength(6)])),
            passwordrepetition: new _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormControl"]('', _angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].compose([_angular_forms__WEBPACK_IMPORTED_MODULE_7__["Validators"].required, Object(_custom_validation__WEBPACK_IMPORTED_MODULE_8__["matchOtherValidator"])('password')]))
        });
    };
    /**
     * This method sends the new password the user entered to the backend
     * @param password the users new password
     */
    ResetPasswordComponent.prototype.setNewPassword = function (password) {
        var _this = this;
        this.usermanager.resetPassword(password, this.token)
            .subscribe(function (result) {
            _this.msgs.push({ severity: 'success', summary: 'Password reset', detail: 'Your Password has been reset successfully. You will be redirected to the login page.' });
            setTimeout(function () {
                _this.router.navigate(['']);
            }, 5000);
        }, function (err) {
            if (err.status === http_status_codes__WEBPACK_IMPORTED_MODULE_6__["UNAUTHORIZED"]) {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: err['error']
                });
            }
            else {
                _this.msgs.push({
                    severity: 'error',
                    summary: 'Error',
                    detail: err['error']
                });
            }
            console.log('Error while resetting Password. ', err['error']);
        });
    };
    ResetPasswordComponent = __decorate([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"])({
            selector: 'app-reset-password',
            template: __webpack_require__(/*! ./reset-password.component.html */ "./src/app/user-management/reset-password/reset-password.component.html"),
            styles: [__webpack_require__(/*! ./reset-password.component.scss */ "./src/app/user-management/reset-password/reset-password.component.scss")],
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
        }),
        __metadata("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_1__["Router"], _services_database_service__WEBPACK_IMPORTED_MODULE_2__["DatabaseService"],
            _services_data_service__WEBPACK_IMPORTED_MODULE_3__["DataService"], _services_usermanager_service__WEBPACK_IMPORTED_MODULE_4__["UserManagerService"], _services_project_service__WEBPACK_IMPORTED_MODULE_5__["ProjectService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_7__["FormBuilder"], _angular_router__WEBPACK_IMPORTED_MODULE_1__["ActivatedRoute"]])
    ], ResetPasswordComponent);
    return ResetPasswordComponent;
}());



/***/ }),

/***/ "./src/environments/environment.ts":
/*!*****************************************!*\
  !*** ./src/environments/environment.ts ***!
  \*****************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
// The file contents for the current environment will overwrite these during build.
// The build system defaults to the dev environment which uses `environment.ts`, but if you do
// `ng build --env=prod` then `environment.prod.ts` will be used instead.
// The list of which env maps to which file can be found in `.angular-cli.json`.
var environment = {
    production: false,
    websocketProtocol: 'ws://',
    httpMode: 'http://',
    // environment variables set in assets/env.js
    baseUrl: window['env']['baseUrl'],
    contextRoot: window['env']['contextRoot'],
    // keycloak configuration
    keycloakUrl: window['env']['keycloakUrl'],
    keycloakRealm: window['env']['keycloakRealm'],
    addressedKeycloakClientId: window['env']['addressedKeycloakClientId']
};


/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "./node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var keycloak_angular__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! keycloak-angular */ "./node_modules/keycloak-angular/fesm5/keycloak-angular.js");
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hammerjs */ "./node_modules/hammerjs/hammer.js");
/* harmony import */ var hammerjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(hammerjs__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var _environments_environment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./environments/environment */ "./src/environments/environment.ts");






if (_environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["enableProdMode"])();
}
// keycloak init options
var initOptions = {
    // url: 'https://aiotes.igd.fraunhofer.de:8081/auth', realm: 'activage', clientId: 'tools-user-login'
    url: _environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].keycloakUrl, realm: _environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].keycloakRealm, clientId: _environments_environment__WEBPACK_IMPORTED_MODULE_5__["environment"].addressedKeycloakClientId
};
var keycloak = Object(keycloak_angular__WEBPACK_IMPORTED_MODULE_2__["Keycloak"])(initOptions);
// tslint:disable-next-line:newline-per-chained-call
keycloak.init({ onLoad: 'login-required' }).success(function (auth) {
    if (!auth) {
        window.location.reload();
    }
    else {
        console.log('Authenticated');
    }
    // bootstrap after authentication is successful.
    Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_1__["platformBrowserDynamic"])()
        .bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_4__["AppModule"])
        .then(function (success) { return console.log(success); })
        .catch(function (err) { return console.error(err); });
    localStorage.setItem('ang-token', keycloak.token);
    localStorage.setItem('ang-refresh-token', keycloak.refreshToken);
    setInterval(function () {
        keycloak.updateToken(5)
            .success(function (refreshed) {
            if (refreshed) {
                console.log('Token refreshed', refreshed);
            }
            else {
                console.warn('Token not refreshed, valid for ', Math.round(keycloak.tokenParsed.exp + keycloak.timeSkew - new Date().getTime() / 1000) + ' seconds');
            }
        })
            .error(function () {
            console.error('Failed to refresh token');
        });
    }, 300000);
})
    .error(function () {
    console.error('Keycloak Authentication Failed');
});


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\REPO - Activage\ClickDigitalFrontend\src\main.ts */"./src/main.ts");


/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map